// auto-generated: "lalrpop 0.19.0"
// sha256: 937c54bba38c479f52a6b92e71137985829be765f536291b2971a7a81ec6580
use std::str::FromStr;
use lalrpop_util::{ParseError, ErrorRecovery};
use crate::ast::{*, BinOpKind as BinOp};
use crate::span::*;
use super::{lexer::Token, err::ParserError, Interner};
#[allow(unused_extern_crates)]
extern crate lalrpop_util as __lalrpop_util;
#[allow(unused_imports)]
use self::__lalrpop_util::state_machine as __state_machine;

#[cfg_attr(rustfmt, rustfmt_skip)]
mod __parse__Program {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens)]

    use std::str::FromStr;
    use lalrpop_util::{ParseError, ErrorRecovery};
    use crate::ast::{*, BinOpKind as BinOp};
    use crate::span::*;
    use super::super::{lexer::Token, err::ParserError, Interner};
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub enum __Symbol<'input>
     {
        Variant0(Token<'input>),
        Variant1(&'input str),
        Variant2(__lalrpop_util::ErrorRecovery<usize, Token<'input>, ParserError>),
        Variant3(::std::option::Option<Token<'input>>),
        Variant4(Path),
        Variant5(::std::vec::Vec<Path>),
        Variant6(Expr),
        Variant7(::std::vec::Vec<Expr>),
        Variant8(Type),
        Variant9(::std::option::Option<Type>),
        Variant10(Identifier),
        Variant11(::std::vec::Vec<Identifier>),
        Variant12(::std::option::Option<Path>),
        Variant13((usize, usize)),
        Variant14(::std::option::Option<(usize, usize)>),
        Variant15((usize, Expr, usize)),
        Variant16(::std::option::Option<(usize, Expr, usize)>),
        Variant17(BranchVariant),
        Variant18(::std::vec::Vec<BranchVariant>),
        Variant19(FnParam),
        Variant20(::std::vec::Vec<FnParam>),
        Variant21(StructField),
        Variant22(::std::vec::Vec<StructField>),
        Variant23(::std::vec::Vec<Type>),
        Variant24(usize),
        Variant25(Block),
        Variant26(Option<Block>),
        Variant27(Item),
        Variant28(::std::option::Option<BranchVariant>),
        Variant29(Vec<BranchVariant>),
        Variant30(Vec<Expr>),
        Variant31(Vec<FnParam>),
        Variant32(Vec<StructField>),
        Variant33(::std::option::Option<Expr>),
        Variant34(::std::option::Option<FnParam>),
        Variant35(IsOpKind),
        Variant36(::std::vec::Vec<Item>),
        Variant37(Lit),
        Variant38(Vec<Type>),
        Variant39(Vec<Path>),
        Variant40(Option<Expr>),
        Variant41(Vec<Item>),
        Variant42(UnOpKind),
        Variant43(BinOp),
        Variant44(Program),
        Variant45(Spanned<IsOpKind>),
        Variant46(Spanned<UnOpKind>),
        Variant47(Spanned<BinOp>),
        Variant48(Stmt),
        Variant49(::std::vec::Vec<Stmt>),
        Variant50(::std::option::Option<StructField>),
        Variant51(Visibility),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 117, 4, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 6, 118, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 117, 4, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 6, 118, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0,
        // State 6
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0,
        // State 7
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0,
        // State 8
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0,
        // State 9
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0,
        // State 10
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0,
        // State 11
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0,
        // State 12
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0,
        // State 13
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0,
        // State 14
        0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 135,
        // State 15
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -156, 121, 0, 0, 0,
        // State 16
        0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 135,
        // State 17
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, -168, 121, 0, 0, 0,
        // State 18
        0, 0, 0, 0, 0, 0, 0, 0, -164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0,
        // State 19
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 117, 4, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 6, 118, 0, 7, 0, 0, 0, 0, 0, 0, 149, 0, 0, 0, 0,
        // State 20
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0,
        // State 21
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0,
        // State 22
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, -168, 121, 0, 0, 0,
        // State 23
        -209, -209, 0, 0, -209, -209, -209, 0, -209, 0, -209, -209, -209, -209, 0, -209, -209, -209, 0, -209, 0, 40, -209, -209, -209, -209, -209, -209, -209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -209, 0, 0, 0, 0, 0, 0, 0, 0, 0, -209, -209, -209, -209, 0, 0, 0, 0,
        // State 24
        -175, -175, 0, 0, -175, -175, -175, 0, -175, 0, -175, 41, -175, -175, 0, -175, 0, 0, 0, -175, 0, 0, -175, -175, -175, -175, -175, -175, -175, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -175, 0, 0, 0, 0, 0, 0, 0, 0, 0, -175, -175, -175, -175, 0, 0, 0, 0,
        // State 25
        0, 0, 0, 0, 0, 0, 0, 26, -172, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 135,
        // State 26
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -158, 121, 0, 0, 0,
        // State 27
        0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 135,
        // State 28
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, -168, 121, 0, 0, 0,
        // State 29
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, -170, 121, 0, 0, 0,
        // State 30
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0,
        // State 31
        0, 0, 0, 0, 0, 0, 0, 0, -166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0,
        // State 32
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 117, 4, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 6, 118, 0, 7, 0, 0, 0, 0, 0, 0, 168, 0, 0, 0, 0,
        // State 33
        0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 135,
        // State 34
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -156, 121, 0, 0, 0,
        // State 35
        0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 135,
        // State 36
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, -168, 121, 0, 0, 0,
        // State 37
        0, 0, 0, 0, 0, 0, 0, 0, -164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0,
        // State 38
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, -168, 121, 0, 0, 0,
        // State 39
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0,
        // State 40
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0,
        // State 41
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -156, 121, 0, 0, 0,
        // State 42
        0, 0, 0, 0, 0, 0, 0, 26, -174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 135,
        // State 43
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, -168, 121, 0, 0, 0,
        // State 44
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, -168, 121, 0, 0, 0,
        // State 45
        0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 135,
        // State 46
        208, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0, 66, 0, 0, 67, 0, 0, 0, 0, 0, 211, 68, 69, 0, 0, 0, 121, 212, 213, 214,
        // State 47
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, 0, 0, 0, 0, 0, 0,
        // State 48
        0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 135,
        // State 49
        0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 135,
        // State 50
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, -168, 121, 0, 0, 0,
        // State 51
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0,
        // State 52
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0,
        // State 53
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, -168, 121, 0, 0, 0,
        // State 54
        -114, -114, 0, 233, -114, -114, -114, 0, -114, 234, -114, -114, -114, -114, -114, -114, 0, 0, 235, -114, 0, 0, -114, -114, -114, -114, -114, -114, -114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -114, 0, 0, 0, 0, 0, 0, 0, 0, 0, -114, -114, -114, -114, 0, 0, 0, 0,
        // State 55
        -115, -115, 0, 0, -115, -115, -115, 0, -115, 0, -115, 237, -115, -115, 238, -115, 0, 0, 0, -115, 0, 0, -115, -115, -115, -115, -115, -115, -115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -115, 0, 0, 0, 0, 0, 0, 0, 0, 0, -115, -115, -115, -115, 0, 0, 0, 0,
        // State 56
        0, -118, 0, 0, -118, -118, -118, 0, -118, 0, -118, 0, -118, -118, 0, -118, 0, 0, 0, -118, 0, 0, -118, 240, 241, -118, -118, 242, 243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -118, -118, -118, -118, 0, 0, 0, 0,
        // State 57
        0, 245, 0, 0, -119, -119, -119, 0, -119, 0, -119, 0, -119, -119, 0, -119, 0, 0, 0, -119, 0, 0, -119, 0, 0, -119, 246, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -119, -119, -119, -119, 0, 0, 0, 0,
        // State 58
        0, 0, 0, 0, -120, 248, -120, 0, -120, 0, -120, 0, -120, -120, 0, -120, 0, 0, 0, -120, 0, 0, -120, 0, 0, -120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -120, -120, -120, -120, 0, 0, 0, 0,
        // State 59
        0, 0, 0, 0, -121, 0, -121, 0, -121, 0, -121, 0, -121, -121, 0, -121, 0, 0, 0, -121, 0, 0, -121, 0, 0, -121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -121, 250, -121, -121, 0, 0, 0, 0,
        // State 60
        252, -65, 0, 0, -65, -65, -65, 0, -65, 0, -65, 0, -65, -65, 0, -65, 0, 0, 0, -65, 0, 0, -65, -65, -65, -65, -65, -65, -65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 253, 0, 0, 0, 0, 0, 0, 0, 0, 0, -65, -65, -65, -65, 0, 0, 0, 0,
        // State 61
        0, 0, 0, 0, 255, 0, 256, 0, -112, 0, 257, 0, 258, -112, 0, 259, 0, 0, 0, 260, 0, 0, -112, 0, 0, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -112, 0, 261, -112, 0, 0, 0, 0,
        // State 62
        -104, -104, 0, -104, -104, -104, -104, -209, -104, -104, -104, -104, -104, -104, -104, -104, -104, -104, -104, -104, 0, 40, -104, -104, -104, -104, -104, -104, -104, -104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -104, 0, 0, 0, 0, 0, 0, 0, 0, 0, -104, -104, -104, -104, 0, 0, 0, 0,
        // State 63
        208, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 211, 0, 0, 0, 0, 0, 121, 212, 213, 214,
        // State 64
        208, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0, 66, 0, 0, 67, 0, 0, 0, 0, 0, 211, 68, 69, 0, 0, 0, 121, 212, 213, 214,
        // State 65
        208, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0, 66, 0, 0, 67, 0, 0, 0, 0, 0, 211, 68, 69, 0, 0, 0, 121, 212, 213, 214,
        // State 66
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, 0, 0, 0, 0, 0, 0,
        // State 67
        208, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0, 66, 0, 0, 67, 0, 0, 0, 0, 0, 211, 68, 69, 0, 0, 0, 121, 212, 213, 214,
        // State 68
        208, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 93, 117, 4, 0, 269, 0, 0, 0, 210, 5, 5, 66, 0, 94, 67, 6, 118, 95, 7, 0, 211, 68, 69, 0, 0, 270, 121, 212, 213, 214,
        // State 69
        0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 135,
        // State 70
        208, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0, 66, 0, 0, 67, 0, 0, 0, 0, 0, 211, 68, 69, 0, 0, 0, 121, 212, 213, 214,
        // State 71
        0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 135,
        // State 72
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -156, 121, 0, 0, 0,
        // State 73
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, -168, 121, 0, 0, 0,
        // State 74
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98, 0, 218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, 0, 0, 0, 0, 0, 0,
        // State 75
        208, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0, 66, 0, 0, 67, 0, 0, 0, 0, 0, 211, 68, 69, 0, 0, 0, 121, 212, 213, 214,
        // State 76
        208, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 211, 0, 0, 0, 0, 0, 121, 212, 213, 214,
        // State 77
        208, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 211, 0, 0, 0, 0, 0, 121, 212, 213, 214,
        // State 78
        208, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 211, 0, 0, 0, 0, 0, 121, 212, 213, 214,
        // State 79
        208, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 211, 0, 0, 0, 0, 0, 121, 212, 213, 214,
        // State 80
        208, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 211, 0, 0, 0, 0, 0, 121, 212, 213, 214,
        // State 81
        208, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 211, 0, 0, 0, 0, 0, 121, 212, 213, 214,
        // State 82
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0,
        // State 83
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0,
        // State 84
        0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 135,
        // State 85
        208, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 211, 0, 0, 0, 0, 0, 121, 212, 213, 214,
        // State 86
        208, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 211, 0, 0, 0, 0, 0, 121, 212, 213, 214,
        // State 87
        208, 0, 0, 0, 0, 0, 0, 65, -160, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0, 66, 0, 0, 67, 0, 0, 0, 0, 0, 211, 68, 69, 0, 0, 0, 121, 212, 213, 214,
        // State 88
        0, 0, 0, 0, 0, 0, 0, 0, -177, 0, 0, 0, 0, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 89
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, 0, 0, 0, 0, 0, 0,
        // State 90
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, 0, 0, 0, 0, 0, 0,
        // State 91
        208, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 93, 117, 4, 0, 269, 0, 0, 0, 210, 5, 5, 66, 0, 94, 67, 6, 118, 95, 7, 0, 211, 68, 69, 0, 0, 302, 121, 212, 213, 214,
        // State 92
        208, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0, 66, 0, 0, 67, 0, 0, 0, 0, 0, 211, 68, 69, 0, 0, 0, 121, 212, 213, 214,
        // State 93
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0,
        // State 94
        208, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0, 66, 0, 0, 67, 0, 0, 0, 0, 0, 211, 68, 69, 0, 0, 0, 121, 212, 213, 214,
        // State 95
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, 0, 0, 0, 0, 0, 0,
        // State 96
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, -168, 121, 0, 0, 0,
        // State 97
        0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 135,
        // State 98
        252, -64, 0, 0, -64, -64, -64, 0, -64, 0, -64, 0, -64, -64, 0, -64, 0, 0, 0, -64, 0, 0, -64, -64, -64, -64, -64, -64, -64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 253, 0, 0, 0, 0, 0, 0, 0, 0, 0, -64, -64, -64, -64, 0, 0, 0, 0,
        // State 99
        208, 0, 0, 0, 0, 0, 0, 65, -162, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0, 66, 0, 0, 67, 0, 0, 0, 0, 0, 211, 68, 69, 0, 0, 0, 121, 212, 213, 214,
        // State 100
        208, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0, 66, 0, 0, 67, 0, 0, 0, 0, 0, 211, 68, 69, 0, 0, 0, 121, 212, 213, 214,
        // State 101
        208, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0, 66, 0, 0, 67, 0, 0, 0, 0, 0, 211, 68, 69, 0, 0, 0, 121, 212, 213, 214,
        // State 102
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, 0, 0, 0, 0, 0, 0,
        // State 103
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0,
        // State 104
        208, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0, 66, 0, 0, 67, 0, 0, 0, 0, 0, 211, 68, 69, 0, 0, 0, 121, 212, 213, 214,
        // State 105
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, 0, 0, 0, 0, 0, 0,
        // State 106
        0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 135,
        // State 107
        208, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0, 66, 0, 0, 67, 0, 0, 0, 0, 0, 211, 68, 69, 0, 0, 0, 121, 212, 213, 214,
        // State 108
        208, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0, 66, 0, 0, 67, 0, 0, 0, 0, 0, 211, 68, 69, 0, 0, 0, 121, 212, 213, 214,
        // State 109
        -143, 0, 0, 0, 0, 0, 0, -143, 0, 0, 0, 0, 0, 0, -143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -143, -143, -143, -143, 0, -143, 0, 0, 0, -143, -143, -143, -143, 0, -143, -143, -143, -143, -143, -143, 0, -143, -143, -143, 0, 0, -143, -143, -143, -143, -143,
        // State 110
        -142, 0, 0, 0, 0, 0, 0, -142, 0, 0, 0, 0, 0, 0, -142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -142, -142, -142, -142, 0, -142, 0, 0, 0, -142, -142, -142, -142, 0, -142, -142, -142, -142, -142, -142, 0, -142, -142, -142, 0, 0, -142, -142, -142, -142, -142,
        // State 111
        -144, 0, 0, 0, 0, 0, 0, -144, 0, 0, 0, 0, 0, 0, -144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -144, -144, -144, -144, 0, -144, 0, 0, 0, -144, -144, -144, -144, 0, -144, -144, -144, -144, -144, -144, 0, -144, -144, -144, 0, 0, -144, -144, -144, -144, -144,
        // State 112
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -147, 0, -147, -147, 0, 0, 0, 0, 0, 0, -147, -147, 0, 0, 0, 0, -147, -147, 0, -147, 0, 0, 0, 0, 0, 0, -147, 0, 0, 0, 0,
        // State 113
        -140, 0, 0, 0, 0, 0, 0, -140, 0, 0, 0, 0, 0, 0, -140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -140, -140, -140, -140, 0, -140, 0, 0, 0, -140, -140, -140, -140, 0, -140, -140, -140, -140, -140, -140, 0, -140, -140, -140, 0, 0, -140, -140, -140, -140, -140,
        // State 114
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 115
        -141, 0, 0, 0, 0, 0, 0, -141, 0, 0, 0, 0, 0, 0, -141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -141, -141, -141, -141, 0, -141, 0, 0, 0, -141, -141, -141, -141, 0, -141, -141, -141, -141, -141, -141, 0, -141, -141, -141, 0, 0, -141, -141, -141, -141, -141,
        // State 116
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 117
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 124, 11, 0, 0, 0, 0, 0, 0, 12, 12, 0, 0, 0, 0, 13, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 118
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -148, 0, -148, -148, 0, 0, 0, 0, 0, 0, -148, -148, 0, 0, 0, 0, -148, -148, 0, -148, 0, 0, 0, 0, 0, 0, -148, 0, 0, 0, 0,
        // State 119
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0,
        // State 120
        -135, -135, 0, -135, -135, -135, -135, -135, -135, -135, -135, -135, -135, -135, -135, -135, -135, -135, -135, -135, -135, -135, -135, -135, -135, -135, -135, -135, -135, -135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -135, 0, 0, 0, 0, 0, 0, 0, 0, 0, -135, -135, -135, -135, 0, 0, 0, 0,
        // State 121
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0,
        // State 122
        0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 123
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 124
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0,
        // State 125
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0,
        // State 126
        -183, 0, 0, 0, 0, 0, 0, -183, 0, 0, 0, 0, 0, 0, -183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -183, -183, -183, -183, 0, -183, 0, 0, 0, -183, -183, -183, -183, 0, -183, -183, -183, -183, -183, -183, 0, -183, -183, -183, 0, 0, -183, -183, -183, -183, -183,
        // State 127
        -186, 0, 0, 0, 0, 0, 0, -186, 0, 0, 0, 0, 0, 0, -186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -186, -186, -186, -186, 0, -186, 0, 0, 0, -186, -186, -186, -186, 0, -186, -186, -186, -186, -186, -186, 0, -186, -186, -186, 0, 0, -186, -186, -186, -186, -186,
        // State 128
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0,
        // State 129
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0,
        // State 130
        0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 131
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0,
        // State 132
        -249, -249, 0, 0, -249, -249, -249, 0, -249, 0, -249, 0, -249, -249, 0, -249, 0, 0, 0, -249, 0, 0, -249, -249, -249, -249, -249, -249, -249, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -249, 0, 0, 0, 0, 0, 0, 0, 0, 0, -249, -249, -249, -249, 0, 0, 0, 0,
        // State 133
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0,
        // State 134
        -250, -250, 0, 0, -250, -250, -250, 0, -250, 0, -250, 0, -250, -250, 0, -250, 0, 0, 0, -250, 0, 0, -250, -250, -250, -250, -250, -250, -250, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -250, 0, 0, 0, 0, 0, 0, 0, 0, 0, -250, -250, -250, -250, 0, 0, 0, 0,
        // State 135
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 158, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -155, 0, 0, 0, 0,
        // State 136
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 159, 0, 0, 0, 0,
        // State 137
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0,
        // State 138
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -95, 0, 0, 0, 0,
        // State 139
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0,
        // State 140
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0,
        // State 141
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 142
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -98, 0, 0, 0, 0,
        // State 143
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -167, 0, 0, 0, 0,
        // State 144
        0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 145
        0, 0, 0, 0, 0, 0, 0, 0, -163, 0, 0, 0, 0, 167, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 146
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 147
        0, 0, 0, 0, 0, 0, 0, 0, -97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 148
        -184, 0, 0, 0, 0, 0, 0, -184, 0, 0, 0, 0, 0, 0, -184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -184, -184, -184, -184, 0, -184, 0, 0, 0, -184, -184, -184, -184, 0, -184, -184, -184, -184, -184, -184, 0, -184, -184, -184, 0, 0, -184, -184, -184, -184, -184,
        // State 149
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 0, 0, 0, 0, 0, 0,
        // State 150
        -182, 0, 0, 0, 0, 0, 0, -182, 0, 0, 0, 0, 0, 0, -182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -182, -182, -182, -182, 0, -182, 0, 0, 0, -182, -182, -182, -182, 0, -182, -182, -182, -182, -182, -182, 0, -182, -182, -182, 0, 0, -182, -182, -182, -182, -182,
        // State 151
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 175, 0, 0, 0, 0,
        // State 152
        -210, -210, 0, 0, -210, -210, -210, -210, -210, 0, -210, -210, -210, -210, 0, -210, -210, -210, 0, -210, 0, 52, -210, -210, -210, -210, -210, -210, -210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -210, 0, 0, 0, 0, 0, 0, 0, 0, 0, -210, -210, -210, -210, 0, 0, 0, 0,
        // State 153
        -176, -176, 0, 0, -176, -176, -176, 0, -176, 0, -176, 53, -176, -176, 0, -176, 0, 0, 0, -176, 0, 0, -176, -176, -176, -176, -176, -176, -176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -176, 0, 0, 0, 0, 0, 0, 0, 0, 0, -176, -176, -176, -176, 0, 0, 0, 0,
        // State 154
        0, 0, 0, 0, 0, 0, 0, 0, 180, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 155
        0, 0, 0, 0, 0, 0, 0, 0, -171, 0, 0, 0, 0, 181, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 156
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -157, 0, 0, 0, 0,
        // State 157
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -36, -36, 0, 0, 0,
        // State 158
        -82, 0, 0, 0, 0, 0, 0, -82, 0, 0, 0, 0, 0, 0, -82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -82, -82, -82, -82, 0, -82, 0, 0, 0, -82, -82, -82, -82, 0, -82, -82, -82, -82, -82, -82, 0, -82, -82, -82, 0, 0, -82, -82, -82, -82, -82,
        // State 159
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0,
        // State 160
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 184, 0, 0, 0, 0,
        // State 161
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -169, 0, 0, 0, 0,
        // State 162
        -94, 0, 0, 0, 0, 0, 0, -94, 0, 0, 0, 0, 0, 0, -94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -94, -94, -94, -94, 0, -94, 0, 0, 0, -94, -94, -94, -94, 0, -94, -94, -94, -94, -94, -94, 0, -94, -94, -94, 0, 0, -94, -94, -94, -94, -94,
        // State 163
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -51, 0, 0, 0, 0, 0, 0, 0, 0, -51, -51, 0, 0, 0,
        // State 164
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 165
        0, 0, 0, 0, 0, 0, 0, 0, -165, 0, 0, 0, 0, 215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 166
        0, 0, 0, 0, 0, 0, 0, 0, -46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -46, 0, 0, 0,
        // State 167
        -185, 0, 0, 0, 0, 0, 0, -185, 0, 0, 0, 0, 0, 0, -185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -185, -185, -185, -185, 0, -185, 0, 0, 0, -185, -185, -185, -185, 0, -185, -185, -185, -185, -185, -185, 0, -185, -185, -185, 0, 0, -185, -185, -185, -185, -185,
        // State 168
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0, 0, 0,
        // State 169
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
        // State 170
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0,
        // State 171
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 223, 0, 0, 0, 0,
        // State 172
        0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 173
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 0, 0, 0, 0,
        // State 174
        -239, 0, 0, 0, 0, 0, 0, -239, 0, 0, 0, 0, 0, 0, -239, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -239, -239, -239, -239, 0, -239, 0, 0, 0, -239, -239, -239, -239, 0, -239, -239, -239, -239, -239, -239, 0, -239, -239, -239, 0, 0, -239, -239, -239, -239, -239,
        // State 175
        -19, -19, 0, 0, -19, -19, -19, -19, -19, 0, -19, -19, -19, -19, 0, -19, -19, -19, 0, -19, 0, -19, -19, -19, -19, -19, -19, -19, -19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -19, 0, 0, 0, 0, 0, 0, 0, 0, 0, -19, -19, -19, -19, 0, 0, 0, 0,
        // State 176
        -6, -6, 0, 0, -6, -6, -6, 0, -6, 0, -6, -6, -6, -6, 0, -6, 0, 0, 0, -6, 0, 0, -6, -6, -6, -6, -6, -6, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, -6, -6, -6, 0, 0, 0, 0,
        // State 177
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 227, 0, 0, 0, 0,
        // State 178
        0, 0, 0, 0, 0, 0, 0, 0, -173, 0, 0, 0, 0, 228, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 179
        -248, -248, 0, 0, -248, -248, -248, 0, -248, 0, -248, 0, -248, -248, 0, -248, 0, 0, 0, -248, 0, 0, -248, -248, -248, -248, -248, -248, -248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -248, 0, 0, 0, 0, 0, 0, 0, 0, 0, -248, -248, -248, -248, 0, 0, 0, 0,
        // State 180
        0, 0, 0, 0, 0, 0, 0, -56, -56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -56, 0, 0, -56,
        // State 181
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -37, -37, 0, 0, 0,
        // State 182
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 229, 0, 0, 0, 0,
        // State 183
        -92, 0, 0, 0, 0, 0, 0, -92, 0, 0, 0, 0, 0, 0, -92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -92, -92, -92, -92, 0, -92, 0, 0, 0, -92, -92, -92, -92, 0, -92, -92, -92, -92, -92, -92, 0, -92, -92, -92, 0, 0, -92, -92, -92, -92, -92,
        // State 184
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 231, 0, 0, 0, 0,
        // State 185
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52, 0, 0, 0, 0, 0, 0, 0, 0, -52, -52, 0, 0, 0,
        // State 186
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -241, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -241, 0, 0, 0, 0,
        // State 187
        -76, 0, 0, 0, 0, 0, 0, -76, -76, 0, 0, 0, 0, -76, -76, 0, 0, 0, 0, 0, 0, 0, -76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -76, -76, -76, -76, 0, -76, 0, 0, 0, -76, -76, -76, -76, 0, -76, -76, -76, -76, -76, -76, 0, -76, -76, -76, 0, 0, -76, -76, -76, -76, -76,
        // State 188
        -125, 0, 0, 0, 0, 0, 0, -125, -125, 0, 0, 0, 0, -125, -125, 0, 0, 0, 0, 0, 0, 0, -125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -125, -125, -125, -125, 0, -125, 0, 0, 0, -125, -125, -125, -125, 0, -125, -125, -125, -125, -125, -125, 0, -125, -125, -125, 0, 0, -125, -125, -125, -125, -125,
        // State 189
        -107, -107, 0, -107, -107, -107, -107, 0, -107, -107, -107, -107, -107, -107, -107, -107, -107, -107, -107, -107, 0, 0, -107, -107, -107, -107, -107, -107, -107, -107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -107, 0, 0, 0, 0, 0, 0, 0, 0, 0, -107, -107, -107, -107, 0, 0, 0, 0,
        // State 190
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -245, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -245, 0, 0, 0, 0,
        // State 191
        -254, -254, 0, -254, -254, -254, -254, 0, -254, -254, -254, -254, -254, -254, -254, -254, 83, 83, -254, -254, 0, 0, -254, -254, -254, -254, -254, -254, -254, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -254, 0, 0, 0, 0, 0, 0, 0, 0, 0, -254, -254, -254, -254, 0, 0, 0, 0,
        // State 192
        0, 0, 0, 0, 0, 0, 0, 0, -127, 0, 0, 0, 0, -127, 0, 0, 0, 0, 0, 0, 0, 0, -127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -127, 0, 0, -127, 0, 0, 0, 0,
        // State 193
        -61, -61, 0, -61, -61, -61, -61, 0, -61, -61, -61, -61, -61, -61, -61, -61, 0, 0, -61, -61, 0, 0, -61, -61, -61, -61, -61, -61, -61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -61, 0, 0, 0, 0, 0, 0, 0, 0, 0, -61, -61, -61, -61, 0, 0, 0, 0,
        // State 194
        -63, -63, 0, 0, -63, -63, -63, 0, -63, 0, -63, -63, -63, -63, -63, -63, 0, 0, 0, -63, 0, 0, -63, -63, -63, -63, -63, -63, -63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -63, 0, 0, 0, 0, 0, 0, 0, 0, 0, -63, -63, -63, -63, 0, 0, 0, 0,
        // State 195
        -117, -117, 0, 0, -117, -117, -117, 0, -117, 0, -117, 0, -117, -117, 0, -117, 0, 0, 0, -117, 0, 0, -117, -117, -117, -117, -117, -117, -117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -117, 0, 0, 0, 0, 0, 0, 0, 0, 0, -117, -117, -117, -117, 0, 0, 0, 0,
        // State 196
        0, -67, 0, 0, -67, -67, -67, 0, -67, 0, -67, 0, -67, -67, 0, -67, 0, 0, 0, -67, 0, 0, -67, 0, 0, -67, -67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -67, -67, -67, -67, 0, 0, 0, 0,
        // State 197
        0, 0, 0, 0, -69, -69, -69, 0, -69, 0, -69, 0, -69, -69, 0, -69, 0, 0, 0, -69, 0, 0, -69, 0, 0, -69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -69, -69, -69, -69, 0, 0, 0, 0,
        // State 198
        0, 0, 0, 0, -71, 0, -71, 0, -71, 0, -71, 0, -71, -71, 0, -71, 0, 0, 0, -71, 0, 0, -71, 0, 0, -71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -71, -71, -71, -71, 0, 0, 0, 0,
        // State 199
        0, 0, 0, 0, 0, 0, 0, 0, -102, 0, 0, 0, 0, -102, 0, 0, 0, 0, 0, 0, 0, 0, -102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -102, 0, 0, -102, 0, 0, 0, 0,
        // State 200
        0, 0, 0, 0, 0, 0, 0, 0, -101, 0, 0, 0, 0, -101, 0, 0, 0, 0, 0, 0, 0, 0, -101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -101, 0, 0, -101, 0, 0, 0, 0,
        // State 201
        -124, 0, 0, 0, 0, 0, 0, -124, -124, 0, 0, 0, 0, -124, -124, 0, 0, 0, 0, 0, 0, 0, -124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -124, -124, -124, -124, 0, -124, 0, 0, 0, -124, -124, -124, -124, 0, -124, -124, -124, -124, -124, -124, 0, -124, -124, -124, 0, 0, -124, -124, -124, -124, -124,
        // State 202
        -103, -103, 0, -103, -103, -103, -103, 0, -103, -103, -103, -103, -103, -103, -103, -103, -103, -103, -103, -103, 0, 0, -103, -103, -103, -103, -103, -103, -103, -103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -103, 0, 0, 0, 0, 0, 0, 0, 0, 0, -103, -103, -103, -103, 0, 0, 0, 0,
        // State 203
        -126, 0, 0, 0, 0, 0, 0, -126, -126, 0, 0, 0, 0, -126, -126, 0, 0, 0, 0, 0, 0, 0, -126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -126, -126, -126, -126, 0, -126, 0, 0, 0, -126, -126, -126, -126, 0, -126, -126, -126, -126, -126, -126, 0, -126, -126, -126, 0, 0, -126, -126, -126, -126, -126,
        // State 204
        -214, 0, 0, 0, 0, 0, 0, -214, 0, 0, 0, 0, 0, 0, -214, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -214, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -214, 0, 0, 0, 0, 0, -214, -214, -214, -214,
        // State 205
        0, 0, 0, 0, 0, 0, 0, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 206
        -113, -113, 0, -113, -113, -113, -113, 0, -113, -113, -113, -113, -113, -113, -113, -113, 0, 0, -113, -113, 0, 0, -113, -113, -113, -113, -113, -113, -113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -113, 0, 0, 0, 0, 0, 0, 0, 0, 0, -113, -113, -113, -113, 0, 0, 0, 0,
        // State 207
        -188, 0, 0, 0, 0, 0, 0, -188, 0, 0, 0, 0, 0, 0, -188, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -188, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -188, 0, 0, 0, 0, 0, -188, -188, -188, -188,
        // State 208
        -187, 0, 0, 0, 0, 0, 0, -187, 0, 0, 0, 0, 0, 0, -187, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -187, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -187, 0, 0, 0, 0, 0, -187, -187, -187, -187,
        // State 209
        -150, -150, 0, -150, -150, -150, -150, 0, -150, -150, -150, -150, -150, -150, -150, -150, -150, -150, -150, -150, 0, 0, -150, -150, -150, -150, -150, -150, -150, -150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -150, 0, 0, 0, 0, 0, 0, 0, 0, 0, -150, -150, -150, -150, 0, 0, 0, 0,
        // State 210
        -149, -149, 0, -149, -149, -149, -149, 0, -149, -149, -149, -149, -149, -149, -149, -149, -149, -149, -149, -149, 0, 0, -149, -149, -149, -149, -149, -149, -149, -149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -149, 0, 0, 0, 0, 0, 0, 0, 0, 0, -149, -149, -149, -149, 0, 0, 0, 0,
        // State 211
        -152, -152, 0, -152, -152, -152, -152, 0, -152, -152, -152, -152, -152, -152, -152, -152, -152, -152, -152, -152, 0, 0, -152, -152, -152, -152, -152, -152, -152, -152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -152, 0, 0, 0, 0, 0, 0, 0, 0, 0, -152, -152, -152, -152, 0, 0, 0, 0,
        // State 212
        -151, -151, 0, -151, -151, -151, -151, 0, -151, -151, -151, -151, -151, -151, -151, -151, -151, -151, -151, -151, 0, 0, -151, -151, -151, -151, -151, -151, -151, -151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -151, 0, 0, 0, 0, 0, 0, 0, 0, 0, -151, -151, -151, -151, 0, 0, 0, 0,
        // State 213
        -109, -109, 0, -109, -109, -109, -109, 0, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109, 0, 0, -109, -109, -109, -109, -109, -109, -109, -109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -109, 0, 0, 0, 0, 0, 0, 0, 0, 0, -109, -109, -109, -109, 0, 0, 0, 0,
        // State 214
        0, 0, 0, 0, 0, 0, 0, 0, -47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -47, 0, 0, 0,
        // State 215
        -77, 0, 0, 0, 0, 0, 0, -77, 0, 0, 0, 0, 0, 0, -77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -77, -77, -77, -77, 0, -77, 0, 0, 0, -77, -77, -77, -77, 0, -77, -77, -77, -77, -77, -77, 0, -77, -77, -77, 0, 0, -77, -77, -77, -77, -77,
        // State 216
        -134, 0, 0, 0, 0, 0, 0, -134, 0, 0, 0, 0, 0, 0, -134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -134, -134, -134, -134, 0, -134, 0, 0, 0, -134, -134, -134, -134, 0, -134, -134, -134, -134, -134, -134, 0, -134, -134, -134, 0, 0, -134, -134, -134, -134, -134,
        // State 217
        -78, 0, 0, 0, 0, 0, 0, -78, 0, 0, 0, 0, 0, 0, -78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -78, -78, -78, -78, 0, -78, 0, 0, 0, -78, -78, -78, -78, 0, -78, -78, -78, -78, -78, -78, 0, -78, -78, -78, 0, 0, -78, -78, -78, -78, -78,
        // State 218
        0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 219
        -81, 0, 0, 0, 0, 0, 0, -81, 0, 0, 0, 0, 0, 0, -81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -81, -81, -81, -81, 0, -81, 0, 0, 0, -81, -81, -81, -81, 0, -81, -81, -81, -81, -81, -81, 0, -81, -81, -81, 0, 0, -81, -81, -81, -81, -81,
        // State 220
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 0,
        // State 221
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 274, 0, 0, 0, 0,
        // State 222
        -93, 0, 0, 0, 0, 0, 0, -93, 0, 0, 0, 0, 0, 0, -93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -93, -93, -93, -93, 0, -93, 0, 0, 0, -93, -93, -93, -93, 0, -93, -93, -93, -93, -93, -93, 0, -93, -93, -93, 0, 0, -93, -93, -93, -93, -93,
        // State 223
        -238, 0, 0, 0, 0, 0, 0, -238, 0, 0, 0, 0, 0, 0, -238, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -238, -238, -238, -238, 0, -238, 0, 0, 0, -238, -238, -238, -238, 0, -238, -238, -238, -238, -238, -238, 0, -238, -238, -238, 0, 0, -238, -238, -238, -238, -238,
        // State 224
        -20, -20, 0, 0, -20, -20, -20, -20, -20, 0, -20, -20, -20, -20, 0, -20, -20, -20, 0, -20, 0, -20, -20, -20, -20, -20, -20, -20, -20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -20, 0, 0, 0, 0, 0, 0, 0, 0, 0, -20, -20, -20, -20, 0, 0, 0, 0,
        // State 225
        -7, -7, 0, 0, -7, -7, -7, 0, -7, 0, -7, -7, -7, -7, 0, -7, 0, 0, 0, -7, 0, 0, -7, -7, -7, -7, -7, -7, -7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -7, 0, 0, 0, 0, 0, 0, 0, 0, 0, -7, -7, -7, -7, 0, 0, 0, 0,
        // State 226
        -80, 0, 0, 0, 0, 0, 0, -80, 0, 0, 0, 0, 0, 0, -80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -80, -80, -80, -80, 0, -80, 0, 0, 0, -80, -80, -80, -80, 0, -80, -80, -80, -80, -80, -80, 0, -80, -80, -80, 0, 0, -80, -80, -80, -80, -80,
        // State 227
        0, 0, 0, 0, 0, 0, 0, -57, -57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -57, 0, 0, -57,
        // State 228
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -83, 0, 0, 0, 0,
        // State 229
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 277, 0, 0, 0, 0,
        // State 230
        -90, 0, 0, 0, 0, 0, 0, -90, 0, 0, 0, 0, 0, 0, -90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -90, -90, -90, -90, 0, -90, 0, 0, 0, -90, -90, -90, -90, 0, -90, -90, -90, -90, -90, -90, 0, -90, -90, -90, 0, 0, -90, -90, -90, -90, -90,
        // State 231
        -215, 0, 0, 0, 0, 0, 0, -215, 0, 0, 0, 0, 0, 0, -215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -215, 0, 0, 0, 0, 0, -215, -215, -215, -215,
        // State 232
        -191, 0, 0, 0, 0, 0, 0, -191, 0, 0, 0, 0, 0, 0, -191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -191, 0, 0, 0, 0, 0, -191, -191, -191, -191,
        // State 233
        -189, 0, 0, 0, 0, 0, 0, -189, 0, 0, 0, 0, 0, 0, -189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -189, 0, 0, 0, 0, 0, -189, -189, -189, -189,
        // State 234
        -190, 0, 0, 0, 0, 0, 0, -190, 0, 0, 0, 0, 0, 0, -190, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -190, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -190, 0, 0, 0, 0, 0, -190, -190, -190, -190,
        // State 235
        -216, 0, 0, 0, 0, 0, 0, -216, 0, 0, 0, 0, 0, 0, -216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -216, 0, 0, 0, 0, 0, -216, -216, -216, -216,
        // State 236
        -192, 0, 0, 0, 0, 0, 0, -192, 0, 0, 0, 0, 0, 0, -192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -192, 0, 0, 0, 0, 0, -192, -192, -192, -192,
        // State 237
        -193, 0, 0, 0, 0, 0, 0, -193, 0, 0, 0, 0, 0, 0, -193, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -193, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -193, 0, 0, 0, 0, 0, -193, -193, -193, -193,
        // State 238
        -217, 0, 0, 0, 0, 0, 0, -217, 0, 0, 0, 0, 0, 0, -217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -217, 0, 0, 0, 0, 0, -217, -217, -217, -217,
        // State 239
        -194, 0, 0, 0, 0, 0, 0, -194, 0, 0, 0, 0, 0, 0, -194, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -194, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -194, 0, 0, 0, 0, 0, -194, -194, -194, -194,
        // State 240
        -196, 0, 0, 0, 0, 0, 0, -196, 0, 0, 0, 0, 0, 0, -196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -196, 0, 0, 0, 0, 0, -196, -196, -196, -196,
        // State 241
        -195, 0, 0, 0, 0, 0, 0, -195, 0, 0, 0, 0, 0, 0, -195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -195, 0, 0, 0, 0, 0, -195, -195, -195, -195,
        // State 242
        -197, 0, 0, 0, 0, 0, 0, -197, 0, 0, 0, 0, 0, 0, -197, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -197, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -197, 0, 0, 0, 0, 0, -197, -197, -197, -197,
        // State 243
        -218, 0, 0, 0, 0, 0, 0, -218, 0, 0, 0, 0, 0, 0, -218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -218, 0, 0, 0, 0, 0, -218, -218, -218, -218,
        // State 244
        -199, 0, 0, 0, 0, 0, 0, -199, 0, 0, 0, 0, 0, 0, -199, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -199, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -199, 0, 0, 0, 0, 0, -199, -199, -199, -199,
        // State 245
        -198, 0, 0, 0, 0, 0, 0, -198, 0, 0, 0, 0, 0, 0, -198, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -198, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -198, 0, 0, 0, 0, 0, -198, -198, -198, -198,
        // State 246
        -219, 0, 0, 0, 0, 0, 0, -219, 0, 0, 0, 0, 0, 0, -219, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -219, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -219, 0, 0, 0, 0, 0, -219, -219, -219, -219,
        // State 247
        -200, 0, 0, 0, 0, 0, 0, -200, 0, 0, 0, 0, 0, 0, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -200, 0, 0, 0, 0, 0, -200, -200, -200, -200,
        // State 248
        -221, 0, 0, 0, 0, 0, 0, -221, 0, 0, 0, 0, 0, 0, -221, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -221, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -221, 0, 0, 0, 0, 0, -221, -221, -221, -221,
        // State 249
        -208, 0, 0, 0, 0, 0, 0, -208, 0, 0, 0, 0, 0, 0, -208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -208, 0, 0, 0, 0, 0, -208, -208, -208, -208,
        // State 250
        0, 0, 0, 0, 0, 0, 0, -213, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -213, 0, 0, -213,
        // State 251
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 287, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 252
        0, 0, 0, 0, 0, 0, 0, -139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -139, 0, 0, -139,
        // State 253
        -220, 0, 0, 0, 0, 0, 0, -220, 0, 0, 0, 0, 0, 0, -220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -220, 0, 0, 0, 0, 0, -220, -220, -220, -220,
        // State 254
        -205, 0, 0, 0, 0, 0, 0, -205, 0, 0, 0, 0, 0, 0, -205, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -205, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -205, 0, 0, 0, 0, 0, -205, -205, -205, -205,
        // State 255
        -206, 0, 0, 0, 0, 0, 0, -206, 0, 0, 0, 0, 0, 0, -206, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -206, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -206, 0, 0, 0, 0, 0, -206, -206, -206, -206,
        // State 256
        -203, 0, 0, 0, 0, 0, 0, -203, 0, 0, 0, 0, 0, 0, -203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -203, 0, 0, 0, 0, 0, -203, -203, -203, -203,
        // State 257
        -201, 0, 0, 0, 0, 0, 0, -201, 0, 0, 0, 0, 0, 0, -201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -201, 0, 0, 0, 0, 0, -201, -201, -201, -201,
        // State 258
        -202, 0, 0, 0, 0, 0, 0, -202, 0, 0, 0, 0, 0, 0, -202, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -202, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -202, 0, 0, 0, 0, 0, -202, -202, -202, -202,
        // State 259
        -204, 0, 0, 0, 0, 0, 0, -204, 0, 0, 0, 0, 0, 0, -204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -204, 0, 0, 0, 0, 0, -204, -204, -204, -204,
        // State 260
        -207, 0, 0, 0, 0, 0, 0, -207, 0, 0, 0, 0, 0, 0, -207, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -207, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -207, 0, 0, 0, 0, 0, -207, -207, -207, -207,
        // State 261
        -253, -253, 0, -253, -253, -253, -253, 0, -253, -253, -253, -253, -253, -253, -253, -253, 0, 0, -253, -253, 0, 0, -253, -253, -253, -253, -253, -253, -253, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -253, 0, 0, 0, 0, 0, 0, 0, 0, 0, -253, -253, -253, -253, 0, 0, 0, 0,
        // State 262
        0, 0, 0, 0, 0, 0, 0, 0, 294, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 263
        -153, 0, 0, 0, 0, 0, 0, -153, -153, 0, 0, 0, 0, -153, -153, 0, 0, 0, 0, 0, 0, 0, -153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -153, -153, -153, -153, 0, -153, 0, 0, 0, -153, -153, -153, -153, 0, -153, -153, -153, -153, -153, -153, 0, -153, -153, -153, 0, 0, -153, -153, -153, -153, -153,
        // State 264
        -233, 0, 0, 0, 0, 0, 0, -233, 0, 0, 0, 0, 0, 0, -233, 0, 0, 0, 0, 0, 0, 0, 297, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -233, -233, -233, -233, 0, -233, 0, 0, 0, -233, -233, -233, -233, 0, -233, -233, -233, -233, -233, -233, 0, -233, -233, -233, 0, 0, -233, -233, -233, -233, -233,
        // State 265
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 298, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 299, 0, 0, 0, 0,
        // State 266
        -222, 0, 0, 0, 0, 0, 0, -222, 0, 0, 0, 0, 0, 0, -222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -222, -222, -222, -222, 0, -222, 0, 0, 0, -222, -222, -222, -222, 0, -222, -222, -222, -222, -222, -222, 0, -222, -222, -222, 0, 0, -222, -222, -222, -222, -222,
        // State 267
        -236, 0, 0, 0, 0, 0, 0, -236, 0, 0, 0, 0, 0, 0, -236, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -236, -236, -236, -236, 0, -236, 0, 0, 0, -236, -236, -236, -236, 0, -236, -236, -236, -236, -236, -236, 0, -236, -236, -236, 0, 0, -236, -236, -236, -236, -236,
        // State 268
        -230, 0, 0, 0, 0, 0, 0, -230, 0, 0, 0, 0, 0, 0, -230, 0, 0, 0, 0, 0, 0, 0, 305, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -230, -230, -230, -230, 0, -230, 0, 0, 0, -230, -230, -230, -230, 0, -230, -230, -230, -230, -230, -230, 0, -230, -230, -230, 0, 0, -230, -230, -230, -230, -230,
        // State 269
        -74, 0, 0, 0, 0, 0, 0, -74, -74, 0, 0, 0, 0, -74, -74, 0, 0, 0, 0, 0, 0, 0, -74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -74, -74, -74, -74, 0, -74, 0, -74, 0, -74, -74, -74, -74, 0, -74, -74, -74, -74, -74, -74, 0, -74, -74, -74, 0, 0, -74, -74, -74, -74, -74,
        // State 270
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -240, 0, 0, 0, 0,
        // State 271
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -244, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -244, 0, 0, 0, 0,
        // State 272
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 310, 0, 0, 0, 0,
        // State 273
        -91, 0, 0, 0, 0, 0, 0, -91, 0, 0, 0, 0, 0, 0, -91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -91, -91, -91, -91, 0, -91, 0, 0, 0, -91, -91, -91, -91, 0, -91, -91, -91, -91, -91, -91, 0, -91, -91, -91, 0, 0, -91, -91, -91, -91, -91,
        // State 274
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
        // State 275
        -133, 0, 0, 0, 0, 0, 0, -133, 0, 0, 0, 0, 0, 0, -133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -133, -133, -133, -133, 0, -133, 0, 0, 0, -133, -133, -133, -133, 0, -133, -133, -133, -133, -133, -133, 0, -133, -133, -133, 0, 0, -133, -133, -133, -133, -133,
        // State 276
        -88, 0, 0, 0, 0, 0, 0, -88, 0, 0, 0, 0, 0, 0, -88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -88, -88, -88, -88, 0, -88, 0, 0, 0, -88, -88, -88, -88, 0, -88, -88, -88, -88, -88, -88, 0, -88, -88, -88, 0, 0, -88, -88, -88, -88, -88,
        // State 277
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -243, 0, 0, 0, 0,
        // State 278
        -60, -60, 0, -60, -60, -60, -60, 0, -60, -60, -60, -60, -60, -60, -60, -60, 0, 0, -60, -60, 0, 0, -60, -60, -60, -60, -60, -60, -60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -60, 0, 0, 0, 0, 0, 0, 0, 0, 0, -60, -60, -60, -60, 0, 0, 0, 0,
        // State 279
        -62, -62, 0, 0, -62, -62, -62, 0, -62, 0, -62, -62, -62, -62, -62, -62, 0, 0, 0, -62, 0, 0, -62, -62, -62, -62, -62, -62, -62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -62, 0, 0, 0, 0, 0, 0, 0, 0, 0, -62, -62, -62, -62, 0, 0, 0, 0,
        // State 280
        0, -66, 0, 0, -66, -66, -66, 0, -66, 0, -66, 0, -66, -66, 0, -66, 0, 0, 0, -66, 0, 0, -66, 0, 0, -66, -66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -66, -66, -66, -66, 0, 0, 0, 0,
        // State 281
        0, 0, 0, 0, -68, -68, -68, 0, -68, 0, -68, 0, -68, -68, 0, -68, 0, 0, 0, -68, 0, 0, -68, 0, 0, -68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -68, -68, -68, -68, 0, 0, 0, 0,
        // State 282
        0, 0, 0, 0, -70, 0, -70, 0, -70, 0, -70, 0, -70, -70, 0, -70, 0, 0, 0, -70, 0, 0, -70, 0, 0, -70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -70, -70, -70, -70, 0, 0, 0, 0,
        // State 283
        -106, -106, 0, -106, -106, -106, -106, 0, -106, -106, -106, -106, -106, -106, -106, -106, -106, -106, -106, -106, 0, 0, -106, -106, -106, -106, -106, -106, -106, -106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -106, 0, 0, 0, 0, 0, 0, 0, 0, 0, -106, -106, -106, -106, 0, 0, 0, 0,
        // State 284
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 285
        -116, -116, 0, 0, -116, -116, -116, 0, -116, 0, -116, 0, -116, -116, 0, -116, 0, 0, 0, -116, 0, 0, -116, -116, -116, -116, -116, -116, -116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -116, 0, 0, 0, 0, 0, 0, 0, 0, 0, -116, -116, -116, -116, 0, 0, 0, 0,
        // State 286
        0, 0, 0, 0, 0, 0, 0, -138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -138, 0, 0, -138,
        // State 287
        0, 0, 0, 0, 0, 0, 0, 0, -111, 0, 0, 0, 0, -111, 0, 0, 0, 0, 0, 0, 0, 0, -111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -111, 0, 0, -111, 0, 0, 0, 0,
        // State 288
        0, 0, 0, 0, 0, 0, 0, 0, -110, 0, 0, 0, 0, -110, 0, 0, 0, 0, 0, 0, 0, 0, -110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -110, 0, 0, -110, 0, 0, 0, 0,
        // State 289
        0, 0, 0, 0, 0, 0, 0, 0, 314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 290
        0, 0, 0, 0, 0, 0, 0, 0, -159, 0, 0, 0, 0, 315, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 291
        0, 0, 0, 0, 0, 0, 0, 0, -96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 292
        0, 0, 0, 0, 0, 0, 0, 0, -178, 0, 0, 0, 0, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 293
        -108, -108, 0, -108, -108, -108, -108, 0, -108, -108, -108, -108, -108, -108, -108, -108, -108, -108, -108, -108, 0, 0, -108, -108, -108, -108, -108, -108, -108, -108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -108, 0, 0, 0, 0, 0, 0, 0, 0, 0, -108, -108, -108, -108, 0, 0, 0, 0,
        // State 294
        -136, 0, 0, 0, 0, 0, 0, -136, -136, 0, 0, 0, 0, -136, -136, 0, 0, 0, 0, 0, 0, 0, -136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -136, -136, -136, -136, 0, -136, 0, 106, 0, -136, -136, -136, -136, 0, -136, -136, -136, -136, -136, -136, 0, -136, -136, -136, 0, 0, -136, -136, -136, -136, -136,
        // State 295
        -154, 0, 0, 0, 0, 0, 0, -154, -154, 0, 0, 0, 0, -154, -154, 0, 0, 0, 0, 0, 0, 0, -154, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -154, -154, -154, -154, 0, -154, 0, 0, 0, -154, -154, -154, -154, 0, -154, -154, -154, -154, -154, -154, 0, -154, -154, -154, 0, 0, -154, -154, -154, -154, -154,
        // State 296
        -232, 0, 0, 0, 0, 0, 0, -232, 0, 0, 0, 0, 0, 0, -232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -232, -232, -232, -232, 0, -232, 0, 0, 0, -232, -232, -232, -232, 0, -232, -232, -232, -232, -232, -232, 0, -232, -232, -232, 0, 0, -232, -232, -232, -232, -232,
        // State 297
        -231, 0, 0, 0, 0, 0, 0, -231, 0, 0, 0, 0, 0, 0, -231, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -231, -231, -231, -231, 0, -231, 0, 0, 0, -231, -231, -231, -231, 0, -231, -231, -231, -231, -231, -231, 0, -231, -231, -231, 0, 0, -231, -231, -231, -231, -231,
        // State 298
        -72, 0, 0, 0, 0, 0, 0, -72, -72, 0, 0, 0, 0, -72, -72, 0, 0, 0, 0, 0, 0, 0, -72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -72, -72, -72, -72, 0, -72, 0, -72, 0, -72, -72, -72, -72, 0, -72, -72, -72, -72, -72, -72, 0, -72, -72, -72, 0, 0, -72, -72, -72, -72, -72,
        // State 299
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 298, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 317, 0, 0, 0, 0,
        // State 300
        -237, 0, 0, 0, 0, 0, 0, -237, 0, 0, 0, 0, 0, 0, -237, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -237, -237, -237, -237, 0, -237, 0, 0, 0, -237, -237, -237, -237, 0, -237, -237, -237, -237, -237, -237, 0, -237, -237, -237, 0, 0, -237, -237, -237, -237, -237,
        // State 301
        -75, 0, 0, 0, 0, 0, 0, -75, -75, 0, 0, 0, 0, -75, -75, 0, 0, 0, 0, 0, 0, 0, -75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -75, -75, -75, -75, 0, -75, 0, -75, 0, -75, -75, -75, -75, 0, -75, -75, -75, -75, -75, -75, 0, -75, -75, -75, 0, 0, -75, -75, -75, -75, -75,
        // State 302
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 318, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 303
        -228, 0, 0, 0, 0, 0, 0, -228, 0, 0, 0, 0, 0, 0, -228, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -228, -228, -228, -228, 0, -228, 0, 0, 0, -228, -228, -228, -228, 0, -228, -228, -228, -228, -228, -228, 0, -228, -228, -228, 0, 0, -228, -228, -228, -228, -228,
        // State 304
        -229, 0, 0, 0, 0, 0, 0, -229, 0, 0, 0, 0, 0, 0, -229, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -229, -229, -229, -229, 0, -229, 0, 0, 0, -229, -229, -229, -229, 0, -229, -229, -229, -229, -229, -229, 0, -229, -229, -229, 0, 0, -229, -229, -229, -229, -229,
        // State 305
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 107, 0, 0, 0, 0, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 306
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 319, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 307
        -226, 0, 0, 0, 0, 0, 0, -226, 0, 0, 0, 0, 0, 0, -226, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -226, -226, -226, -226, 0, -226, 0, 0, 0, -226, -226, -226, -226, 0, -226, -226, -226, -226, -226, -226, 0, -226, -226, -226, 0, 0, -226, -226, -226, -226, -226,
        // State 308
        -132, 0, 0, 0, 0, 0, 0, -132, 0, 0, 0, 0, 0, 0, -132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -132, -132, -132, -132, 0, -132, 0, 0, 0, -132, -132, -132, -132, 0, -132, -132, -132, -132, -132, -132, 0, -132, -132, -132, 0, 0, -132, -132, -132, -132, -132,
        // State 309
        -79, 0, 0, 0, 0, 0, 0, -79, 0, 0, 0, 0, 0, 0, -79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -79, -79, -79, -79, 0, -79, 0, 0, 0, -79, -79, -79, -79, 0, -79, -79, -79, -79, -79, -79, 0, -79, -79, -79, 0, 0, -79, -79, -79, -79, -79,
        // State 310
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 321, 0, 0, 0, 0,
        // State 311
        -89, 0, 0, 0, 0, 0, 0, -89, 0, 0, 0, 0, 0, 0, -89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -89, -89, -89, -89, 0, -89, 0, 0, 0, -89, -89, -89, -89, 0, -89, -89, -89, -89, -89, -89, 0, -89, -89, -89, 0, 0, -89, -89, -89, -89, -89,
        // State 312
        0, 0, 0, 0, 0, 0, 0, 0, -161, 0, 0, 0, 0, 324, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 313
        -86, -86, 0, -86, -86, -86, -86, 0, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, 0, 0, -86, -86, -86, -86, -86, -86, -86, -86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -86, 0, 0, 0, 0, 0, 0, 0, 0, 0, -86, -86, -86, -86, 0, 0, 0, 0,
        // State 314
        -41, 0, 0, 0, 0, 0, 0, -41, -41, 0, 0, 0, 0, 0, -41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -41, 0, 0, -41, 0, 0, -41, 0, 0, 0, 0, 0, -41, -41, -41, 0, 0, 0, -41, -41, -41, -41,
        // State 315
        0, 0, 0, 0, 0, 0, 0, 0, -11, 0, 0, 0, 0, -11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 316
        -73, 0, 0, 0, 0, 0, 0, -73, -73, 0, 0, 0, 0, -73, -73, 0, 0, 0, 0, 0, 0, 0, -73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -73, -73, -73, -73, 0, -73, 0, -73, 0, -73, -73, -73, -73, 0, -73, -73, -73, -73, -73, -73, 0, -73, -73, -73, 0, 0, -73, -73, -73, -73, -73,
        // State 317
        -227, 0, 0, 0, 0, 0, 0, -227, 0, 0, 0, 0, 0, 0, -227, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -227, -227, -227, -227, 0, -227, 0, 0, 0, -227, -227, -227, -227, 0, -227, -227, -227, -227, -227, -227, 0, -227, -227, -227, 0, 0, -227, -227, -227, -227, -227,
        // State 318
        -225, 0, 0, 0, 0, 0, 0, -225, 0, 0, 0, 0, 0, 0, -225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -225, -225, -225, -225, 0, -225, 0, 0, 0, -225, -225, -225, -225, 0, -225, -225, -225, -225, -225, -225, 0, -225, -225, -225, 0, 0, -225, -225, -225, -225, -225,
        // State 319
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -242, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -242, 0, 0, 0, 0,
        // State 320
        -87, 0, 0, 0, 0, 0, 0, -87, 0, 0, 0, 0, 0, 0, -87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -87, -87, -87, -87, 0, -87, 0, 0, 0, -87, -87, -87, -87, 0, -87, -87, -87, -87, -87, -87, 0, -87, -87, -87, 0, 0, -87, -87, -87, -87, -87,
        // State 321
        -131, 0, 0, 0, 0, 0, 0, -131, 0, 0, 0, 0, 0, 0, -131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -131, -131, -131, -131, 0, -131, 0, 0, 0, -131, -131, -131, -131, 0, -131, -131, -131, -131, -131, -131, 0, -131, -131, -131, 0, 0, -131, -131, -131, -131, -131,
        // State 322
        -105, -105, 0, -105, -105, -105, -105, 0, -105, -105, -105, -105, -105, -105, -105, -105, -105, -105, -105, -105, 0, 0, -105, -105, -105, -105, -105, -105, -105, -105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -105, 0, 0, 0, 0, 0, 0, 0, 0, 0, -105, -105, -105, -105, 0, 0, 0, 0,
        // State 323
        -42, 0, 0, 0, 0, 0, 0, -42, -42, 0, 0, 0, 0, 0, -42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -42, 0, 0, -42, 0, 0, -42, 0, 0, 0, 0, 0, -42, -42, -42, 0, 0, 0, -42, -42, -42, -42,
        // State 324
        0, 0, 0, 0, 0, 0, 0, 0, -12, 0, 0, 0, 0, -12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 325
        -100, 0, 0, 0, 0, 0, 0, -100, -100, 0, 0, 0, 0, -100, -100, 0, 0, 0, 0, 0, 0, 0, -100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -100, -100, -100, -100, 0, -100, 0, 0, 0, -100, -100, -100, -100, 0, -100, -100, -100, -100, -100, -100, 0, -100, -100, -100, 0, 0, -100, -100, -100, -100, -100,
        // State 326
        -137, 0, 0, 0, 0, 0, 0, -137, -137, 0, 0, 0, 0, -137, -137, 0, 0, 0, 0, 0, 0, 0, -137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -137, -137, -137, -137, 0, -137, 0, 0, 0, -137, -137, -137, -137, 0, -137, -137, -137, -137, -137, -137, 0, -137, -137, -137, 0, 0, -137, -137, -137, -137, -137,
        // State 327
        -99, 0, 0, 0, 0, 0, 0, -99, -99, 0, 0, 0, 0, -99, -99, 0, 0, 0, 0, 0, 0, 0, -99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -99, -99, -99, -99, 0, -99, 0, 0, 0, -99, -99, -99, -99, 0, -99, -99, -99, -99, -99, -99, 0, -99, -99, -99, 0, 0, -99, -99, -99, -99, -99,
        // State 328
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 329
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 331, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 330
        -224, 0, 0, 0, 0, 0, 0, -224, 0, 0, 0, 0, 0, 0, -224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -224, -224, -224, -224, 0, -224, 0, 0, 0, -224, -224, -224, -224, 0, -224, -224, -224, -224, -224, -224, 0, -224, -224, -224, 0, 0, -224, -224, -224, -224, -224,
        // State 331
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 333, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 332
        -223, 0, 0, 0, 0, 0, 0, -223, 0, 0, 0, 0, 0, 0, -223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -223, -223, -223, -223, 0, -223, 0, 0, 0, -223, -223, -223, -223, 0, -223, -223, -223, -223, -223, -223, 0, -223, -223, -223, 0, 0, -223, -223, -223, -223, -223,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 64 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        -211,
        // State 1
        -212,
        // State 2
        0,
        // State 3
        0,
        // State 4
        0,
        // State 5
        0,
        // State 6
        0,
        // State 7
        0,
        // State 8
        0,
        // State 9
        0,
        // State 10
        0,
        // State 11
        0,
        // State 12
        0,
        // State 13
        0,
        // State 14
        0,
        // State 15
        0,
        // State 16
        0,
        // State 17
        0,
        // State 18
        0,
        // State 19
        0,
        // State 20
        0,
        // State 21
        0,
        // State 22
        0,
        // State 23
        0,
        // State 24
        0,
        // State 25
        0,
        // State 26
        0,
        // State 27
        0,
        // State 28
        0,
        // State 29
        0,
        // State 30
        0,
        // State 31
        0,
        // State 32
        0,
        // State 33
        0,
        // State 34
        0,
        // State 35
        0,
        // State 36
        0,
        // State 37
        0,
        // State 38
        0,
        // State 39
        0,
        // State 40
        0,
        // State 41
        0,
        // State 42
        0,
        // State 43
        0,
        // State 44
        0,
        // State 45
        0,
        // State 46
        0,
        // State 47
        0,
        // State 48
        0,
        // State 49
        0,
        // State 50
        0,
        // State 51
        0,
        // State 52
        0,
        // State 53
        0,
        // State 54
        0,
        // State 55
        0,
        // State 56
        0,
        // State 57
        0,
        // State 58
        0,
        // State 59
        0,
        // State 60
        0,
        // State 61
        0,
        // State 62
        0,
        // State 63
        0,
        // State 64
        0,
        // State 65
        0,
        // State 66
        0,
        // State 67
        0,
        // State 68
        0,
        // State 69
        0,
        // State 70
        0,
        // State 71
        0,
        // State 72
        0,
        // State 73
        0,
        // State 74
        0,
        // State 75
        0,
        // State 76
        0,
        // State 77
        0,
        // State 78
        0,
        // State 79
        0,
        // State 80
        0,
        // State 81
        0,
        // State 82
        0,
        // State 83
        0,
        // State 84
        0,
        // State 85
        0,
        // State 86
        0,
        // State 87
        0,
        // State 88
        0,
        // State 89
        0,
        // State 90
        0,
        // State 91
        0,
        // State 92
        0,
        // State 93
        0,
        // State 94
        0,
        // State 95
        0,
        // State 96
        0,
        // State 97
        0,
        // State 98
        0,
        // State 99
        0,
        // State 100
        0,
        // State 101
        0,
        // State 102
        0,
        // State 103
        0,
        // State 104
        0,
        // State 105
        0,
        // State 106
        0,
        // State 107
        0,
        // State 108
        0,
        // State 109
        -143,
        // State 110
        -142,
        // State 111
        -144,
        // State 112
        -147,
        // State 113
        -140,
        // State 114
        -257,
        // State 115
        -141,
        // State 116
        0,
        // State 117
        0,
        // State 118
        -148,
        // State 119
        0,
        // State 120
        0,
        // State 121
        0,
        // State 122
        0,
        // State 123
        0,
        // State 124
        0,
        // State 125
        0,
        // State 126
        -183,
        // State 127
        -186,
        // State 128
        0,
        // State 129
        0,
        // State 130
        0,
        // State 131
        0,
        // State 132
        0,
        // State 133
        0,
        // State 134
        0,
        // State 135
        0,
        // State 136
        0,
        // State 137
        0,
        // State 138
        0,
        // State 139
        0,
        // State 140
        0,
        // State 141
        0,
        // State 142
        0,
        // State 143
        0,
        // State 144
        0,
        // State 145
        0,
        // State 146
        0,
        // State 147
        0,
        // State 148
        -184,
        // State 149
        0,
        // State 150
        -182,
        // State 151
        0,
        // State 152
        0,
        // State 153
        0,
        // State 154
        0,
        // State 155
        0,
        // State 156
        0,
        // State 157
        0,
        // State 158
        -82,
        // State 159
        0,
        // State 160
        0,
        // State 161
        0,
        // State 162
        -94,
        // State 163
        0,
        // State 164
        0,
        // State 165
        0,
        // State 166
        0,
        // State 167
        -185,
        // State 168
        0,
        // State 169
        0,
        // State 170
        0,
        // State 171
        0,
        // State 172
        0,
        // State 173
        0,
        // State 174
        -239,
        // State 175
        0,
        // State 176
        0,
        // State 177
        0,
        // State 178
        0,
        // State 179
        0,
        // State 180
        0,
        // State 181
        0,
        // State 182
        0,
        // State 183
        -92,
        // State 184
        0,
        // State 185
        0,
        // State 186
        0,
        // State 187
        0,
        // State 188
        0,
        // State 189
        0,
        // State 190
        0,
        // State 191
        0,
        // State 192
        0,
        // State 193
        0,
        // State 194
        0,
        // State 195
        0,
        // State 196
        0,
        // State 197
        0,
        // State 198
        0,
        // State 199
        0,
        // State 200
        0,
        // State 201
        0,
        // State 202
        0,
        // State 203
        0,
        // State 204
        0,
        // State 205
        0,
        // State 206
        0,
        // State 207
        0,
        // State 208
        0,
        // State 209
        0,
        // State 210
        0,
        // State 211
        0,
        // State 212
        0,
        // State 213
        0,
        // State 214
        0,
        // State 215
        -77,
        // State 216
        -134,
        // State 217
        -78,
        // State 218
        0,
        // State 219
        -81,
        // State 220
        0,
        // State 221
        0,
        // State 222
        -93,
        // State 223
        -238,
        // State 224
        0,
        // State 225
        0,
        // State 226
        -80,
        // State 227
        0,
        // State 228
        0,
        // State 229
        0,
        // State 230
        -90,
        // State 231
        0,
        // State 232
        0,
        // State 233
        0,
        // State 234
        0,
        // State 235
        0,
        // State 236
        0,
        // State 237
        0,
        // State 238
        0,
        // State 239
        0,
        // State 240
        0,
        // State 241
        0,
        // State 242
        0,
        // State 243
        0,
        // State 244
        0,
        // State 245
        0,
        // State 246
        0,
        // State 247
        0,
        // State 248
        0,
        // State 249
        0,
        // State 250
        0,
        // State 251
        0,
        // State 252
        0,
        // State 253
        0,
        // State 254
        0,
        // State 255
        0,
        // State 256
        0,
        // State 257
        0,
        // State 258
        0,
        // State 259
        0,
        // State 260
        0,
        // State 261
        0,
        // State 262
        0,
        // State 263
        0,
        // State 264
        0,
        // State 265
        0,
        // State 266
        0,
        // State 267
        0,
        // State 268
        0,
        // State 269
        -74,
        // State 270
        0,
        // State 271
        0,
        // State 272
        0,
        // State 273
        -91,
        // State 274
        0,
        // State 275
        -133,
        // State 276
        -88,
        // State 277
        0,
        // State 278
        0,
        // State 279
        0,
        // State 280
        0,
        // State 281
        0,
        // State 282
        0,
        // State 283
        0,
        // State 284
        0,
        // State 285
        0,
        // State 286
        0,
        // State 287
        0,
        // State 288
        0,
        // State 289
        0,
        // State 290
        0,
        // State 291
        0,
        // State 292
        0,
        // State 293
        0,
        // State 294
        0,
        // State 295
        0,
        // State 296
        0,
        // State 297
        0,
        // State 298
        -72,
        // State 299
        0,
        // State 300
        0,
        // State 301
        -75,
        // State 302
        0,
        // State 303
        0,
        // State 304
        0,
        // State 305
        0,
        // State 306
        0,
        // State 307
        0,
        // State 308
        -132,
        // State 309
        -79,
        // State 310
        0,
        // State 311
        -89,
        // State 312
        0,
        // State 313
        0,
        // State 314
        0,
        // State 315
        0,
        // State 316
        -73,
        // State 317
        0,
        // State 318
        0,
        // State 319
        0,
        // State 320
        -87,
        // State 321
        -131,
        // State 322
        0,
        // State 323
        0,
        // State 324
        0,
        // State 325
        0,
        // State 326
        0,
        // State 327
        0,
        // State 328
        0,
        // State 329
        0,
        // State 330
        0,
        // State 331
        0,
        // State 332
        0,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            3 => 153,
            6 => 292,
            11 => 152,
            22 => 26,
            25 => 99,
            28 => 31,
            31 => 29,
            34 => 42,
            37 => 54,
            38 => 55,
            39 => 56,
            40 => 57,
            41 => 58,
            42 => 59,
            43 => match state {
                47 | 74 | 95 | 102 => 215,
                66 => 263,
                89 => 294,
                90 => 295,
                _ => 187,
            },
            44 => match state {
                105 => 325,
                _ => 188,
            },
            45 => match state {
                74 => 275,
                95 => 308,
                102 => 321,
                _ => 216,
            },
            46 => 109,
            47 => match state {
                26 => 156,
                _ => 135,
            },
            49 => 189,
            50 => 110,
            51 => match state {
                34 => 169,
                41 => 177,
                72 => 272,
                _ => 136,
            },
            52 => 289,
            53 => match state {
                37 => 172,
                _ => 144,
            },
            54 => match state {
                22 => 151,
                28 => 160,
                36 => 171,
                38 => 173,
                43 => 182,
                44 => 184,
                50 => 221,
                53 => 229,
                73 => 274,
                96 => 310,
                _ => 140,
            },
            55 => 326,
            56 => match state {
                65 => 89,
                67 => 90,
                46 => 190,
                70 => 271,
                75 => 277,
                87 => 290,
                92 => 302,
                94 => 306,
                99 => 312,
                100 => 315,
                101 => 319,
                104 => 324,
                107 => 329,
                108 => 331,
                _ => 88,
            },
            57 => 191,
            58 => match state {
                85 => 287,
                86 => 288,
                _ => 192,
            },
            59 => match state {
                76 => 278,
                _ => 193,
            },
            60 => match state {
                77 => 279,
                _ => 194,
            },
            61 => 195,
            62 => match state {
                78 => 98,
                _ => 60,
            },
            63 => match state {
                79 => 280,
                _ => 196,
            },
            64 => match state {
                80 => 281,
                _ => 197,
            },
            65 => match state {
                81 => 282,
                _ => 198,
            },
            66 => 61,
            68 => match state {
                68 | 91 => 264,
                _ => 199,
            },
            69 => match state {
                68 => 265,
                91 => 299,
                _ => 200,
            },
            70 => match state {
                31 => 165,
                _ => 145,
            },
            72 => 111,
            73 => match state {
                5 => 8,
                12 => 21,
                46 | 63..=65 | 67..=68 | 70 | 75..=81 | 85..=87 | 91..=92 | 94 | 99..=101 | 104 | 107..=108 => 62,
                2 => 119,
                3 => 121,
                4 => 122,
                6 => 124,
                7 => 125,
                9 => 128,
                10 => 129,
                11 => 130,
                13 => 131,
                15 | 26 | 34 | 41 | 72 => 137,
                17 | 22 | 28..=29 | 36 | 38 | 43..=44 | 50 | 53 | 73 | 96 => 141,
                18 | 31 | 37 => 146,
                20 => 149,
                30 => 164,
                39 => 175,
                51 => 224,
                82 => 283,
                93 => 305,
                103 => 322,
                _ => 23,
            },
            74 => match state {
                105 => 327,
                _ => 201,
            },
            75 => 250,
            76 => match state {
                1 | 32 => 118,
                68 | 91 => 266,
                _ => 112,
            },
            78 => match state {
                19 => 32,
                _ => 1,
            },
            79 => 202,
            80 => 203,
            81 => 138,
            82 => 291,
            83 => 147,
            84 => 142,
            85 => 154,
            86 => 132,
            87 => 262,
            89 => 113,
            90 => match state {
                21 => 150,
                _ => 126,
            },
            91 => 204,
            92 => 231,
            93 => 235,
            94 => 238,
            95 => 243,
            96 => 246,
            97 => 253,
            98 => 248,
            99 => match state {
                40 => 176,
                46 | 63..=65 | 67..=68 | 70 | 75..=81 | 85..=87 | 91..=92 | 94 | 99..=101 | 104 | 107..=108 => 205,
                52 => 225,
                83 => 284,
                _ => 24,
            },
            100 => 114,
            101 => 84,
            102 => 63,
            103 => 76,
            104 => 77,
            105 => 78,
            106 => 79,
            107 => 80,
            108 => 85,
            109 => 81,
            110 => match state {
                91 => 300,
                _ => 267,
            },
            112 => 91,
            113 => 115,
            114 => match state {
                29 => 161,
                _ => 143,
            },
            116 => match state {
                97 => 102,
                14 => 133,
                16 => 139,
                25 => 155,
                27 => 159,
                33 => 168,
                35 => 170,
                42 => 178,
                45 => 186,
                48 => 218,
                49 => 220,
                69 => 270,
                84 => 285,
                106 => 328,
                _ => 95,
            },
            118 => match state {
                63 => 261,
                _ => 206,
            },
            _ => 0,
        }
    }
    fn __expected_tokens(__state: i16) -> Vec<::std::string::String> {
        const __TERMINAL: &[&str] = &[
            r###""!""###,
            r###""!=""###,
            r###""#""###,
            r###""%""###,
            r###""%=""###,
            r###""&""###,
            r###""&=""###,
            r###""(""###,
            r###"")""###,
            r###""*""###,
            r###""*=""###,
            r###""+""###,
            r###""+=""###,
            r###"",""###,
            r###""-""###,
            r###""-=""###,
            r###"".""###,
            r###"".""###,
            r###""/""###,
            r###""/=""###,
            r###"":""###,
            r###""::""###,
            r###"";""###,
            r###""<""###,
            r###""<=""###,
            r###""=""###,
            r###""==""###,
            r###"">""###,
            r###"">=""###,
            r###""@""###,
            r###""[""###,
            r###""]""###,
            r###""^""###,
            r###""branch""###,
            r###""break""###,
            r###""builtin""###,
            r###""class""###,
            r###""const""###,
            r###""continue""###,
            r###""do""###,
            r###""else""###,
            r###""enum""###,
            r###""false""###,
            r###""fn""###,
            r###""fn""###,
            r###""if""###,
            r###""is""###,
            r###""let""###,
            r###""loop""###,
            r###""mod""###,
            r###""pub""###,
            r###""return""###,
            r###""struct""###,
            r###""trait""###,
            r###""true""###,
            r###""while""###,
            r###""{""###,
            r###""|""###,
            r###""|=""###,
            r###""}""###,
            r###"TokenIdentifier"###,
            r###"TokenInt"###,
            r###"TokenString"###,
        ];
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(terminal.to_string())
            }
        }).collect()
    }
    pub struct __StateMachine<'input, '__1, '__2>
    where 'input: '__2
    {
        input: &'input str,
        intr: &'__1 Interner,
        errs: &'__2 mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __phantom: ::std::marker::PhantomData<(&'input ())>,
    }
    impl<'input, '__1, '__2> __state_machine::ParserDefinition for __StateMachine<'input, '__1, '__2>
    where 'input: '__2
    {
        type Location = usize;
        type Error = ParserError;
        type Token = Token<'input>;
        type TokenIndex = usize;
        type Symbol = __Symbol<'input>;
        type Success = Program;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, ::std::marker::PhantomData::<(&())>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 64 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, ::std::marker::PhantomData::<(&())>)
        }

        fn expected_tokens(&self, state: i16) -> Vec<String> {
            __expected_tokens(state)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            true
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            __Symbol::Variant2(recovery)
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut Vec<i16>,
            symbols: &mut Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.input,
                self.intr,
                self.errs,
                action,
                start_location,
                states,
                symbols,
                ::std::marker::PhantomData::<(&())>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            __simulate_reduce(action, ::std::marker::PhantomData::<(&())>)
        }
    }
    fn __token_to_integer<
        'input,
    >(
        __token: &Token<'input>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> Option<usize>
    {
        match *__token {
            Token::Exclamation if true => Some(0),
            Token::BinOp(BinOp::Ne) if true => Some(1),
            Token::Hash if true => Some(2),
            Token::BinOp(BinOp::Rem) if true => Some(3),
            Token::AssignOp(BinOp::Rem) if true => Some(4),
            Token::BinOp(BinOp::And) if true => Some(5),
            Token::AssignOp(BinOp::And) if true => Some(6),
            Token::OpenParen if true => Some(7),
            Token::CloseParen if true => Some(8),
            Token::BinOp(BinOp::Mul) if true => Some(9),
            Token::AssignOp(BinOp::Mul) if true => Some(10),
            Token::BinOp(BinOp::Add) if true => Some(11),
            Token::AssignOp(BinOp::Add) if true => Some(12),
            Token::Comma if true => Some(13),
            Token::BinOp(BinOp::Sub) if true => Some(14),
            Token::AssignOp(BinOp::Sub) if true => Some(15),
            Token::Dot if true => Some(16),
            Token::Dot if true => Some(17),
            Token::BinOp(BinOp::Div) if true => Some(18),
            Token::AssignOp(BinOp::Div) if true => Some(19),
            Token::Colon if true => Some(20),
            Token::PathSeg if true => Some(21),
            Token::Semicolon if true => Some(22),
            Token::BinOp(BinOp::Lt) if true => Some(23),
            Token::BinOp(BinOp::Le) if true => Some(24),
            Token::Assign if true => Some(25),
            Token::BinOp(BinOp::Eq) if true => Some(26),
            Token::BinOp(BinOp::Gt) if true => Some(27),
            Token::BinOp(BinOp::Ge) if true => Some(28),
            Token::At if true => Some(29),
            Token::OpenBracket if true => Some(30),
            Token::CloseBracket if true => Some(31),
            Token::Caret if true => Some(32),
            Token::Branch if true => Some(33),
            Token::Break if true => Some(34),
            Token::Builtin if true => Some(35),
            Token::Class if true => Some(36),
            Token::Const if true => Some(37),
            Token::Continue if true => Some(38),
            Token::Do if true => Some(39),
            Token::Else if true => Some(40),
            Token::Enum if true => Some(41),
            Token::False if true => Some(42),
            Token::Fn if true => Some(43),
            Token::Fn if true => Some(44),
            Token::If if true => Some(45),
            Token::Is if true => Some(46),
            Token::Let if true => Some(47),
            Token::Loop if true => Some(48),
            Token::Mod if true => Some(49),
            Token::Pub if true => Some(50),
            Token::Return if true => Some(51),
            Token::Struct if true => Some(52),
            Token::Trait if true => Some(53),
            Token::True if true => Some(54),
            Token::While if true => Some(55),
            Token::OpenBlock if true => Some(56),
            Token::BinOp(BinOp::Or) if true => Some(57),
            Token::AssignOp(BinOp::Or) if true => Some(58),
            Token::CloseBlock if true => Some(59),
            Token::Identifier(_) if true => Some(60),
            Token::IntLiteral(_) if true => Some(61),
            Token::StringLiteral(_) if true => Some(62),
            _ => None,
        }
    }
    fn __token_to_symbol<
        'input,
    >(
        __token_index: usize,
        __token: Token<'input>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> __Symbol<'input>
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 => __Symbol::Variant0(__token),
            60 | 61 | 62 => match __token {
                Token::Identifier(__tok0) | Token::IntLiteral(__tok0) | Token::StringLiteral(__tok0) if true => __Symbol::Variant1(__tok0),
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    fn __simulate_reduce<
        'input,
        '__1,
        '__2,
    >(
        __reduce_index: i16,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> __state_machine::SimulatedReduce<__StateMachine<'input, '__1, '__2>>
    where
        'input: '__2,
    {
        match __reduce_index {
            0 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 0,
                }
            }
            1 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 0,
                }
            }
            2 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 1,
                }
            }
            3 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 2,
                }
            }
            4 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 2,
                }
            }
            5 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 3,
                }
            }
            6 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 3,
                }
            }
            7 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 4,
                }
            }
            8 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 5,
                }
            }
            9 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 5,
                }
            }
            10 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 6,
                }
            }
            11 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 6,
                }
            }
            12 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 7,
                }
            }
            13 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 8,
                }
            }
            14 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 8,
                }
            }
            15 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 9,
                }
            }
            16 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 10,
                }
            }
            17 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 10,
                }
            }
            18 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 11,
                }
            }
            19 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 11,
                }
            }
            20 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 12,
                }
            }
            21 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 13,
                }
            }
            22 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 13,
                }
            }
            23 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 14,
                }
            }
            24 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 15,
                }
            }
            25 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 15,
                }
            }
            26 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 16,
                }
            }
            27 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 17,
                }
            }
            28 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 17,
                }
            }
            29 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 18,
                }
            }
            30 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 19,
                }
            }
            31 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 19,
                }
            }
            32 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 20,
                }
            }
            33 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 21,
                }
            }
            34 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 21,
                }
            }
            35 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 22,
                }
            }
            36 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 22,
                }
            }
            37 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 23,
                }
            }
            38 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 24,
                }
            }
            39 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 24,
                }
            }
            40 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 25,
                }
            }
            41 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 25,
                }
            }
            42 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 26,
                }
            }
            43 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 27,
                }
            }
            44 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 27,
                }
            }
            45 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 28,
                }
            }
            46 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 28,
                }
            }
            47 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 29,
                }
            }
            48 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 30,
                }
            }
            49 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 30,
                }
            }
            50 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 31,
                }
            }
            51 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 31,
                }
            }
            52 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 32,
                }
            }
            53 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 33,
                }
            }
            54 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 33,
                }
            }
            55 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 34,
                }
            }
            56 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 34,
                }
            }
            57 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 35,
                }
            }
            58 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 36,
                }
            }
            59 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 37,
                }
            }
            60 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 37,
                }
            }
            61 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 38,
                }
            }
            62 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            63 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 39,
                }
            }
            64 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            65 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 40,
                }
            }
            66 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 40,
                }
            }
            67 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 41,
                }
            }
            68 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 41,
                }
            }
            69 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 42,
                }
            }
            70 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 42,
                }
            }
            71 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 43,
                }
            }
            72 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 43,
                }
            }
            73 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 43,
                }
            }
            74 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 43,
                }
            }
            75 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 44,
                }
            }
            76 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 45,
                }
            }
            77 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 45,
                }
            }
            78 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 46,
                }
            }
            79 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 46,
                }
            }
            80 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 46,
                }
            }
            81 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 46,
                }
            }
            82 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 47,
                }
            }
            83 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 48,
                }
            }
            84 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 48,
                }
            }
            85 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 49,
                }
            }
            86 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 9,
                    nonterminal_produced: 50,
                }
            }
            87 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 50,
                }
            }
            88 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 50,
                }
            }
            89 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 50,
                }
            }
            90 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 50,
                }
            }
            91 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 50,
                }
            }
            92 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 50,
                }
            }
            93 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 50,
                }
            }
            94 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 51,
                }
            }
            95 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 52,
                }
            }
            96 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 53,
                }
            }
            97 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 54,
                }
            }
            98 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 55,
                }
            }
            99 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 55,
                }
            }
            100 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 56,
                }
            }
            101 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 56,
                }
            }
            102 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 57,
                }
            }
            103 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 57,
                }
            }
            104 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 57,
                }
            }
            105 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 57,
                }
            }
            106 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 57,
                }
            }
            107 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 57,
                }
            }
            108 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 57,
                }
            }
            109 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 58,
                }
            }
            110 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 58,
                }
            }
            111 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 58,
                }
            }
            112 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 59,
                }
            }
            113 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 60,
                }
            }
            114 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 61,
                }
            }
            115 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 62,
                }
            }
            116 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 62,
                }
            }
            117 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 63,
                }
            }
            118 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 64,
                }
            }
            119 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 65,
                }
            }
            120 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 66,
                }
            }
            121 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            122 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 67,
                }
            }
            123 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 68,
                }
            }
            124 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 68,
                }
            }
            125 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 68,
                }
            }
            126 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 69,
                }
            }
            127 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 70,
                }
            }
            128 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 71,
                }
            }
            129 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 71,
                }
            }
            130 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 9,
                    nonterminal_produced: 72,
                }
            }
            131 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 72,
                }
            }
            132 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 72,
                }
            }
            133 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 72,
                }
            }
            134 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 73,
                }
            }
            135 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            136 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 74,
                }
            }
            137 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 75,
                }
            }
            138 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 75,
                }
            }
            139 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 76,
                }
            }
            140 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 76,
                }
            }
            141 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 76,
                }
            }
            142 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 76,
                }
            }
            143 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 76,
                }
            }
            144 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 77,
                }
            }
            145 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 77,
                }
            }
            146 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 78,
                }
            }
            147 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 78,
                }
            }
            148 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 79,
                }
            }
            149 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 79,
                }
            }
            150 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 79,
                }
            }
            151 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 79,
                }
            }
            152 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 80,
                }
            }
            153 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 80,
                }
            }
            154 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 81,
                }
            }
            155 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 81,
                }
            }
            156 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 81,
                }
            }
            157 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 81,
                }
            }
            158 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 82,
                }
            }
            159 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 82,
                }
            }
            160 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 82,
                }
            }
            161 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 82,
                }
            }
            162 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 83,
                }
            }
            163 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 83,
                }
            }
            164 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 83,
                }
            }
            165 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 83,
                }
            }
            166 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 84,
                }
            }
            167 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 84,
                }
            }
            168 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 84,
                }
            }
            169 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 84,
                }
            }
            170 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 85,
                }
            }
            171 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 85,
                }
            }
            172 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 85,
                }
            }
            173 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 85,
                }
            }
            174 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 86,
                }
            }
            175 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 86,
                }
            }
            176 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 87,
                }
            }
            177 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 87,
                }
            }
            178 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 88,
                }
            }
            179 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 88,
                }
            }
            180 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 88,
                }
            }
            181 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 89,
                }
            }
            182 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 89,
                }
            }
            183 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 90,
                }
            }
            184 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 90,
                }
            }
            185 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 90,
                }
            }
            186 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 91,
                }
            }
            187 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 91,
                }
            }
            188 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 92,
                }
            }
            189 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 92,
                }
            }
            190 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 92,
                }
            }
            191 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 93,
                }
            }
            192 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 93,
                }
            }
            193 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            194 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            195 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            196 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            197 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 95,
                }
            }
            198 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 95,
                }
            }
            199 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            200 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 97,
                }
            }
            201 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 97,
                }
            }
            202 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 97,
                }
            }
            203 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 97,
                }
            }
            204 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 97,
                }
            }
            205 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 97,
                }
            }
            206 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 97,
                }
            }
            207 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 98,
                }
            }
            208 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 99,
                }
            }
            209 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 99,
                }
            }
            210 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 100,
                }
            }
            211 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 100,
                }
            }
            212 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 101,
                }
            }
            213 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 102,
                }
            }
            214 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 103,
                }
            }
            215 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 104,
                }
            }
            216 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 105,
                }
            }
            217 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 106,
                }
            }
            218 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 107,
                }
            }
            219 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 108,
                }
            }
            220 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 109,
                }
            }
            221 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 110,
                }
            }
            222 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 110,
                }
            }
            223 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 110,
                }
            }
            224 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 110,
                }
            }
            225 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 110,
                }
            }
            226 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 110,
                }
            }
            227 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 110,
                }
            }
            228 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 110,
                }
            }
            229 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 110,
                }
            }
            230 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 110,
                }
            }
            231 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 110,
                }
            }
            232 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 110,
                }
            }
            233 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 111,
                }
            }
            234 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 111,
                }
            }
            235 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 112,
                }
            }
            236 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 112,
                }
            }
            237 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 113,
                }
            }
            238 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 113,
                }
            }
            239 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 114,
                }
            }
            240 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 114,
                }
            }
            241 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 114,
                }
            }
            242 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 114,
                }
            }
            243 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 114,
                }
            }
            244 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 114,
                }
            }
            245 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 115,
                }
            }
            246 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 115,
                }
            }
            247 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 116,
                }
            }
            248 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 116,
                }
            }
            249 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 116,
                }
            }
            250 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 117,
                }
            }
            251 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 117,
                }
            }
            252 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 118,
                }
            }
            253 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 118,
                }
            }
            254 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 119,
                }
            }
            255 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 119,
                }
            }
            256 => __state_machine::SimulatedReduce::Accept,
            _ => panic!("invalid reduction index {}", __reduce_index)
        }
    }
    pub struct ProgramParser {
        _priv: (),
    }

    impl ProgramParser {
        pub fn new() -> ProgramParser {
            ProgramParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            'input,
            __TOKEN: __ToTriple<'input, >,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            input: &'input str,
            intr: &Interner,
            errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
            __tokens0: __TOKENS,
        ) -> Result<Program, __lalrpop_util::ParseError<usize, Token<'input>, ParserError>>
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    input,
                    intr,
                    errs,
                    __phantom: ::std::marker::PhantomData::<(&())>,
                },
                __tokens,
            )
        }
    }
    fn __accepts<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __error_state: i16,
        __states: & [i16],
        __opt_integer: Option<usize>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> bool
    {
        let mut __states = __states.to_vec();
        __states.push(__error_state);
        loop {
            let mut __states_len = __states.len();
            let __top = __states[__states_len - 1];
            let __action = match __opt_integer {
                None => __EOF_ACTION[__top as usize],
                Some(__integer) => __action(__top, __integer),
            };
            if __action == 0 { return false; }
            if __action > 0 { return true; }
            let (__to_pop, __nt) = match __simulate_reduce(-(__action + 1), ::std::marker::PhantomData::<(&())>) {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop, nonterminal_produced
                } => (states_to_pop, nonterminal_produced),
                __state_machine::SimulatedReduce::Accept => return true,
            };
            __states_len -= __to_pop;
            __states.truncate(__states_len);
            let __top = __states[__states_len - 1];
            let __next_state = __goto(__top, __nt);
            __states.push(__next_state);
        }
    }
    pub(crate) fn __reduce<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> Option<Result<Program,__lalrpop_util::ParseError<usize, Token<'input>, ParserError>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            1 => {
                __reduce1(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            2 => {
                __reduce2(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            3 => {
                __reduce3(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            4 => {
                __reduce4(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            5 => {
                __reduce5(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            6 => {
                __reduce6(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            7 => {
                __reduce7(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            8 => {
                __reduce8(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            9 => {
                __reduce9(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            10 => {
                __reduce10(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            11 => {
                __reduce11(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            12 => {
                __reduce12(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            13 => {
                __reduce13(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            14 => {
                __reduce14(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            15 => {
                __reduce15(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            16 => {
                __reduce16(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            17 => {
                __reduce17(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            18 => {
                __reduce18(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            19 => {
                __reduce19(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            20 => {
                __reduce20(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            21 => {
                __reduce21(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            22 => {
                __reduce22(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            23 => {
                __reduce23(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            24 => {
                __reduce24(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            25 => {
                __reduce25(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            26 => {
                __reduce26(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            27 => {
                __reduce27(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            28 => {
                __reduce28(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            29 => {
                __reduce29(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            30 => {
                __reduce30(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            31 => {
                __reduce31(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            32 => {
                __reduce32(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            33 => {
                __reduce33(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            34 => {
                __reduce34(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            35 => {
                __reduce35(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            36 => {
                __reduce36(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            37 => {
                __reduce37(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            38 => {
                __reduce38(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            39 => {
                __reduce39(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            40 => {
                __reduce40(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            41 => {
                __reduce41(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            42 => {
                __reduce42(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            43 => {
                __reduce43(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            44 => {
                __reduce44(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            45 => {
                __reduce45(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            46 => {
                __reduce46(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            47 => {
                __reduce47(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            48 => {
                __reduce48(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            49 => {
                __reduce49(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            50 => {
                __reduce50(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            51 => {
                __reduce51(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            52 => {
                __reduce52(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            53 => {
                __reduce53(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            54 => {
                __reduce54(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            55 => {
                __reduce55(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            56 => {
                __reduce56(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            57 => {
                __reduce57(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            58 => {
                __reduce58(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            59 => {
                __reduce59(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            60 => {
                __reduce60(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            61 => {
                __reduce61(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            62 => {
                __reduce62(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            63 => {
                __reduce63(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            64 => {
                __reduce64(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            65 => {
                __reduce65(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            66 => {
                __reduce66(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            67 => {
                __reduce67(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            68 => {
                __reduce68(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            69 => {
                __reduce69(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            70 => {
                __reduce70(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            71 => {
                __reduce71(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            72 => {
                __reduce72(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            73 => {
                __reduce73(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            74 => {
                __reduce74(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            75 => {
                __reduce75(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            76 => {
                __reduce76(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            77 => {
                __reduce77(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            78 => {
                __reduce78(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            79 => {
                __reduce79(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            80 => {
                __reduce80(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            81 => {
                __reduce81(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            82 => {
                __reduce82(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            83 => {
                __reduce83(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            84 => {
                __reduce84(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            85 => {
                __reduce85(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            86 => {
                __reduce86(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            87 => {
                __reduce87(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            88 => {
                __reduce88(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            89 => {
                __reduce89(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            90 => {
                __reduce90(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            91 => {
                __reduce91(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            92 => {
                __reduce92(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            93 => {
                __reduce93(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            94 => {
                __reduce94(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            95 => {
                __reduce95(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            96 => {
                __reduce96(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            97 => {
                __reduce97(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            98 => {
                __reduce98(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            99 => {
                __reduce99(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            100 => {
                __reduce100(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            101 => {
                __reduce101(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            102 => {
                __reduce102(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            103 => {
                __reduce103(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            104 => {
                __reduce104(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            105 => {
                __reduce105(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            106 => {
                __reduce106(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            107 => {
                __reduce107(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            108 => {
                __reduce108(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            109 => {
                __reduce109(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            110 => {
                __reduce110(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            111 => {
                __reduce111(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            112 => {
                __reduce112(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            113 => {
                __reduce113(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            114 => {
                __reduce114(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            115 => {
                __reduce115(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            116 => {
                __reduce116(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            117 => {
                __reduce117(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            118 => {
                __reduce118(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            119 => {
                __reduce119(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            120 => {
                __reduce120(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            121 => {
                __reduce121(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            122 => {
                __reduce122(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            123 => {
                __reduce123(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            124 => {
                __reduce124(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            125 => {
                __reduce125(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            126 => {
                __reduce126(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            127 => {
                __reduce127(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            128 => {
                __reduce128(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            129 => {
                __reduce129(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            130 => {
                __reduce130(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            131 => {
                __reduce131(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            132 => {
                __reduce132(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            133 => {
                __reduce133(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            134 => {
                __reduce134(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            135 => {
                __reduce135(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            136 => {
                __reduce136(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            137 => {
                __reduce137(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            138 => {
                __reduce138(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            139 => {
                __reduce139(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            140 => {
                __reduce140(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            141 => {
                __reduce141(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            142 => {
                __reduce142(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            143 => {
                __reduce143(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            144 => {
                __reduce144(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            145 => {
                __reduce145(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            146 => {
                __reduce146(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            147 => {
                __reduce147(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            148 => {
                __reduce148(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            149 => {
                __reduce149(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            150 => {
                __reduce150(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            151 => {
                __reduce151(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            152 => {
                __reduce152(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            153 => {
                __reduce153(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            154 => {
                __reduce154(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            155 => {
                __reduce155(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            156 => {
                __reduce156(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            157 => {
                __reduce157(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            158 => {
                __reduce158(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            159 => {
                __reduce159(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            160 => {
                __reduce160(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            161 => {
                __reduce161(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            162 => {
                __reduce162(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            163 => {
                __reduce163(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            164 => {
                __reduce164(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            165 => {
                __reduce165(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            166 => {
                __reduce166(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            167 => {
                __reduce167(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            168 => {
                __reduce168(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            169 => {
                __reduce169(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            170 => {
                __reduce170(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            171 => {
                __reduce171(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            172 => {
                __reduce172(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            173 => {
                __reduce173(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            174 => {
                __reduce174(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            175 => {
                __reduce175(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            176 => {
                __reduce176(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            177 => {
                __reduce177(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            178 => {
                __reduce178(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            179 => {
                __reduce179(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            180 => {
                __reduce180(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            181 => {
                __reduce181(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            182 => {
                __reduce182(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            183 => {
                __reduce183(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            184 => {
                __reduce184(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            185 => {
                __reduce185(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            186 => {
                __reduce186(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            187 => {
                __reduce187(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            188 => {
                __reduce188(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            189 => {
                __reduce189(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            190 => {
                __reduce190(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            191 => {
                __reduce191(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            192 => {
                __reduce192(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            193 => {
                __reduce193(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            194 => {
                __reduce194(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            195 => {
                __reduce195(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            196 => {
                __reduce196(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            197 => {
                __reduce197(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            198 => {
                __reduce198(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            199 => {
                __reduce199(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            200 => {
                __reduce200(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            201 => {
                __reduce201(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            202 => {
                __reduce202(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            203 => {
                __reduce203(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            204 => {
                __reduce204(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            205 => {
                __reduce205(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            206 => {
                __reduce206(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            207 => {
                __reduce207(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            208 => {
                __reduce208(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            209 => {
                __reduce209(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            210 => {
                __reduce210(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            211 => {
                __reduce211(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            212 => {
                __reduce212(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            213 => {
                __reduce213(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            214 => {
                __reduce214(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            215 => {
                __reduce215(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            216 => {
                __reduce216(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            217 => {
                __reduce217(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            218 => {
                __reduce218(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            219 => {
                __reduce219(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            220 => {
                __reduce220(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            221 => {
                __reduce221(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            222 => {
                __reduce222(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            223 => {
                __reduce223(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            224 => {
                __reduce224(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            225 => {
                __reduce225(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            226 => {
                __reduce226(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            227 => {
                __reduce227(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            228 => {
                __reduce228(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            229 => {
                __reduce229(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            230 => {
                __reduce230(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            231 => {
                __reduce231(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            232 => {
                __reduce232(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            233 => {
                __reduce233(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            234 => {
                __reduce234(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            235 => {
                __reduce235(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            236 => {
                __reduce236(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            237 => {
                __reduce237(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            238 => {
                __reduce238(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            239 => {
                __reduce239(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            240 => {
                __reduce240(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            241 => {
                __reduce241(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            242 => {
                __reduce242(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            243 => {
                __reduce243(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            244 => {
                __reduce244(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            245 => {
                __reduce245(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            246 => {
                __reduce246(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            247 => {
                __reduce247(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            248 => {
                __reduce248(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            249 => {
                __reduce249(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            250 => {
                __reduce250(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            251 => {
                __reduce251(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            252 => {
                __reduce252(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            253 => {
                __reduce253(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            254 => {
                __reduce254(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            255 => {
                __reduce255(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
            }
            256 => {
                // __Program = Program => ActionFn(0);
                let __sym0 = __pop_Variant44(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action0::<>(input, intr, errs, __sym0);
                return Some(Ok(__nt));
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant15<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, (usize, Expr, usize), usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant15(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant13<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, (usize, usize), usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant13(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant43<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, BinOp, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant43(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant25<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Block, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant25(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, BranchVariant, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant17(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Expr, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant6(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, FnParam, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant19(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Identifier, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant10(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant35<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, IsOpKind, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant35(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant27<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Item, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant27(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant37<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Lit, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant37(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant26<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Option<Block>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant26(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant40<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Option<Expr>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant40(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant4<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Path, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant4(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant44<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Program, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant44(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant47<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Spanned<BinOp>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant47(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant45<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Spanned<IsOpKind>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant45(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant46<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Spanned<UnOpKind>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant46(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant48<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Stmt, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant48(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant21<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, StructField, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant21(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Token<'input>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant0(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Type, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant8(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant42<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, UnOpKind, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant42(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant29<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vec<BranchVariant>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant29(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant30<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vec<Expr>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant30(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant31<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vec<FnParam>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant31(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant41<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vec<Item>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant41(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant39<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vec<Path>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant39(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant32<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vec<StructField>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant32(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant38<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vec<Type>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant38(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant51<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Visibility, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant51(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, __lalrpop_util::ErrorRecovery<usize, Token<'input>, ParserError>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant2(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant24<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, usize, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant24(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ::std::option::Option<(usize, Expr, usize)>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant16(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ::std::option::Option<(usize, usize)>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant14(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant28<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ::std::option::Option<BranchVariant>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant28(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant33<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ::std::option::Option<Expr>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant33(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant34<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ::std::option::Option<FnParam>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant34(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ::std::option::Option<Path>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant12(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant50<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ::std::option::Option<StructField>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant50(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ::std::option::Option<Token<'input>>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant3(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ::std::option::Option<Type>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant9(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ::std::vec::Vec<BranchVariant>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant18(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ::std::vec::Vec<Expr>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant7(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ::std::vec::Vec<FnParam>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant20(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ::std::vec::Vec<Identifier>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant11(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant36<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ::std::vec::Vec<Item>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant36(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ::std::vec::Vec<Path>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant5(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant49<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ::std::vec::Vec<Stmt>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant49(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant22<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ::std::vec::Vec<StructField>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant22(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant23<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ::std::vec::Vec<Type>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant23(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, &'input str, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant1(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ";"? = ";" => ActionFn(121);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action121::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 0)
    }
    pub(crate) fn __reduce1<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ";"? =  => ActionFn(122);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action122::<>(input, intr, errs, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 0)
    }
    pub(crate) fn __reduce2<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("+" <Path>) = "+", Path => ActionFn(174);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action174::<>(input, intr, errs, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (2, 1)
    }
    pub(crate) fn __reduce3<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("+" <Path>)* =  => ActionFn(172);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action172::<>(input, intr, errs, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 2)
    }
    pub(crate) fn __reduce4<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("+" <Path>)* = ("+" <Path>)+ => ActionFn(173);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action173::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 2)
    }
    pub(crate) fn __reduce5<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("+" <Path>)+ = "+", Path => ActionFn(213);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action213::<>(input, intr, errs, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 3)
    }
    pub(crate) fn __reduce6<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("+" <Path>)+ = ("+" <Path>)+, "+", Path => ActionFn(214);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant4(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action214::<>(input, intr, errs, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (3, 3)
    }
    pub(crate) fn __reduce7<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," <Expr>) = ",", Expr => ActionFn(166);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action166::<>(input, intr, errs, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 4)
    }
    pub(crate) fn __reduce8<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," <Expr>)* =  => ActionFn(164);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action164::<>(input, intr, errs, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (0, 5)
    }
    pub(crate) fn __reduce9<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," <Expr>)* = ("," <Expr>)+ => ActionFn(165);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action165::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 5)
    }
    pub(crate) fn __reduce10<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," <Expr>)+ = ",", Expr => ActionFn(217);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action217::<>(input, intr, errs, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 6)
    }
    pub(crate) fn __reduce11<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," <Expr>)+ = ("," <Expr>)+, ",", Expr => ActionFn(218);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action218::<>(input, intr, errs, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 6)
    }
    pub(crate) fn __reduce12<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (":" <Type>) = ":", Type => ActionFn(132);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant8(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action132::<>(input, intr, errs, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce13<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (":" <Type>)? = ":", Type => ActionFn(221);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant8(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action221::<>(input, intr, errs, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 8)
    }
    pub(crate) fn __reduce14<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (":" <Type>)? =  => ActionFn(131);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action131::<>(input, intr, errs, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (0, 8)
    }
    pub(crate) fn __reduce15<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("::" <Identifier>) = "::", Identifier => ActionFn(139);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action139::<>(input, intr, errs, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 9)
    }
    pub(crate) fn __reduce16<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("::" <Identifier>)* =  => ActionFn(137);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action137::<>(input, intr, errs, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (0, 10)
    }
    pub(crate) fn __reduce17<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("::" <Identifier>)* = ("::" <Identifier>)+ => ActionFn(138);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action138::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce18<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("::" <Identifier>)+ = "::", Identifier => ActionFn(232);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action232::<>(input, intr, errs, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (2, 11)
    }
    pub(crate) fn __reduce19<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("::" <Identifier>)+ = ("::" <Identifier>)+, "::", Identifier => ActionFn(233);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant10(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action233::<>(input, intr, errs, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (3, 11)
    }
    pub(crate) fn __reduce20<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("@" <Path>) = "@", Path => ActionFn(99);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action99::<>(input, intr, errs, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (2, 12)
    }
    pub(crate) fn __reduce21<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("@" <Path>)? = "@", Path => ActionFn(236);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action236::<>(input, intr, errs, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (2, 13)
    }
    pub(crate) fn __reduce22<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("@" <Path>)? =  => ActionFn(98);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action98::<>(input, intr, errs, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (0, 13)
    }
    pub(crate) fn __reduce23<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<@L> "builtin" <@R>) = "builtin" => ActionFn(300);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action300::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 14)
    }
    pub(crate) fn __reduce24<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<@L> "builtin" <@R>)? = "builtin" => ActionFn(361);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action361::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce25<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<@L> "builtin" <@R>)? =  => ActionFn(134);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action134::<>(input, intr, errs, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (0, 15)
    }
    pub(crate) fn __reduce26<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<@L> "pub" <@R>) = "pub" => ActionFn(301);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action301::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce27<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<@L> "pub" <@R>)? = "pub" => ActionFn(366);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action366::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce28<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<@L> "pub" <@R>)? =  => ActionFn(141);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action141::<>(input, intr, errs, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (0, 17)
    }
    pub(crate) fn __reduce29<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<@L> <ExprWithoutBlock> <@R>) = ExprWithoutBlock => ActionFn(302);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action302::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce30<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<@L> <ExprWithoutBlock> <@R>)? = ExprWithoutBlock => ActionFn(369);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action369::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce31<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<@L> <ExprWithoutBlock> <@R>)? =  => ActionFn(124);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action124::<>(input, intr, errs, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (0, 19)
    }
    pub(crate) fn __reduce32<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<BranchVariant> ",") = BranchVariant, "," => ActionFn(193);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action193::<>(input, intr, errs, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (2, 20)
    }
    pub(crate) fn __reduce33<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<BranchVariant> ",")* =  => ActionFn(191);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action191::<>(input, intr, errs, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 21)
    }
    pub(crate) fn __reduce34<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<BranchVariant> ",")* = (<BranchVariant> ",")+ => ActionFn(192);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action192::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce35<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<BranchVariant> ",")+ = BranchVariant, "," => ActionFn(372);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action372::<>(input, intr, errs, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (2, 22)
    }
    pub(crate) fn __reduce36<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<BranchVariant> ",")+ = (<BranchVariant> ",")+, BranchVariant, "," => ActionFn(373);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action373::<>(input, intr, errs, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce37<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Expr> ",") = Expr, "," => ActionFn(183);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action183::<>(input, intr, errs, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 23)
    }
    pub(crate) fn __reduce38<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Expr> ",")* =  => ActionFn(181);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action181::<>(input, intr, errs, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (0, 24)
    }
    pub(crate) fn __reduce39<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Expr> ",")* = (<Expr> ",")+ => ActionFn(182);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action182::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce40<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Expr> ",")+ = Expr, "," => ActionFn(376);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action376::<>(input, intr, errs, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 25)
    }
    pub(crate) fn __reduce41<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Expr> ",")+ = (<Expr> ",")+, Expr, "," => ActionFn(377);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action377::<>(input, intr, errs, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 25)
    }
    pub(crate) fn __reduce42<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<FnParam> ",") = FnParam, "," => ActionFn(188);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action188::<>(input, intr, errs, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (2, 26)
    }
    pub(crate) fn __reduce43<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<FnParam> ",")* =  => ActionFn(186);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action186::<>(input, intr, errs, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 27)
    }
    pub(crate) fn __reduce44<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<FnParam> ",")* = (<FnParam> ",")+ => ActionFn(187);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action187::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce45<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<FnParam> ",")+ = FnParam, "," => ActionFn(380);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action380::<>(input, intr, errs, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (2, 28)
    }
    pub(crate) fn __reduce46<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<FnParam> ",")+ = (<FnParam> ",")+, FnParam, "," => ActionFn(381);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action381::<>(input, intr, errs, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (3, 28)
    }
    pub(crate) fn __reduce47<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<StructField> ",") = StructField, "," => ActionFn(198);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action198::<>(input, intr, errs, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce48<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<StructField> ",")* =  => ActionFn(196);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action196::<>(input, intr, errs, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (0, 30)
    }
    pub(crate) fn __reduce49<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<StructField> ",")* = (<StructField> ",")+ => ActionFn(197);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action197::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce50<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<StructField> ",")+ = StructField, "," => ActionFn(384);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action384::<>(input, intr, errs, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 31)
    }
    pub(crate) fn __reduce51<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<StructField> ",")+ = (<StructField> ",")+, StructField, "," => ActionFn(385);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant21(__symbols);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action385::<>(input, intr, errs, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 31)
    }
    pub(crate) fn __reduce52<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Type> ",") = Type, "," => ActionFn(171);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action171::<>(input, intr, errs, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce53<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Type> ",")* =  => ActionFn(169);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action169::<>(input, intr, errs, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (0, 33)
    }
    pub(crate) fn __reduce54<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Type> ",")* = (<Type> ",")+ => ActionFn(170);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action170::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce55<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Type> ",")+ = Type, "," => ActionFn(388);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action388::<>(input, intr, errs, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (2, 34)
    }
    pub(crate) fn __reduce56<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Type> ",")+ = (<Type> ",")+, Type, "," => ActionFn(389);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant8(__symbols);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action389::<>(input, intr, errs, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (3, 34)
    }
    pub(crate) fn __reduce57<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // @L =  => ActionFn(144);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action144::<>(input, intr, errs, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (0, 35)
    }
    pub(crate) fn __reduce58<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // @R =  => ActionFn(143);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action143::<>(input, intr, errs, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (0, 36)
    }
    pub(crate) fn __reduce59<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOpExpr<Op3, Expr2> = BinOpExpr<Op3, Expr2>, Spanned<Op3>, Expr2 => ActionFn(303);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant47(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action303::<>(input, intr, errs, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 37)
    }
    pub(crate) fn __reduce60<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOpExpr<Op3, Expr2> = Expr2 => ActionFn(104);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action104::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce61<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOpExpr<Op4, Expr3> = BinOpExpr<Op4, Expr3>, Spanned<Op4>, Expr3 => ActionFn(304);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant47(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action304::<>(input, intr, errs, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 38)
    }
    pub(crate) fn __reduce62<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOpExpr<Op4, Expr3> = Expr3 => ActionFn(106);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action106::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce63<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOpExpr<Op6, Expr5> = BinOpExpr<Op6, Expr5>, Spanned<Op6>, Expr5 => ActionFn(305);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant47(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action305::<>(input, intr, errs, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 39)
    }
    pub(crate) fn __reduce64<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOpExpr<Op6, Expr5> = Expr5 => ActionFn(109);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action109::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce65<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOpExpr<Op7, Expr6> = BinOpExpr<Op7, Expr6>, Spanned<Op7>, Expr6 => ActionFn(306);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant47(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action306::<>(input, intr, errs, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 40)
    }
    pub(crate) fn __reduce66<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOpExpr<Op7, Expr6> = Expr6 => ActionFn(111);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action111::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 40)
    }
    pub(crate) fn __reduce67<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOpExpr<OpAnd, Expr7> = BinOpExpr<OpAnd, Expr7>, Spanned<OpAnd>, Expr7 => ActionFn(307);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant47(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action307::<>(input, intr, errs, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 41)
    }
    pub(crate) fn __reduce68<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOpExpr<OpAnd, Expr7> = Expr7 => ActionFn(113);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action113::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce69<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOpExpr<OpOr, Expr8> = BinOpExpr<OpOr, Expr8>, Spanned<OpOr>, Expr8 => ActionFn(308);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant47(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action308::<>(input, intr, errs, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 42)
    }
    pub(crate) fn __reduce70<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BinOpExpr<OpOr, Expr8> = Expr8 => ActionFn(115);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action115::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce71<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Block = "{", ExprWithoutBlock, "}" => ActionFn(412);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action412::<>(input, intr, errs, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (3, 43)
    }
    pub(crate) fn __reduce72<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Block = "{", Stmt+, ExprWithoutBlock, "}" => ActionFn(413);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant49(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action413::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (4, 43)
    }
    pub(crate) fn __reduce73<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Block = "{", "}" => ActionFn(414);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action414::<>(input, intr, errs, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (2, 43)
    }
    pub(crate) fn __reduce74<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Block = "{", Stmt+, "}" => ActionFn(415);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant49(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action415::<>(input, intr, errs, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (3, 43)
    }
    pub(crate) fn __reduce75<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BlockExpr = Block => ActionFn(310);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action310::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 44)
    }
    pub(crate) fn __reduce76<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BlockOrSemi = Block => ActionFn(22);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action22::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce77<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BlockOrSemi = ";" => ActionFn(23);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action23::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce78<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BranchDefinition = "pub", "branch", Identifier, ":", Type, "{", Comma<BranchVariant>, "}" => ActionFn(424);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant29(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant8(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant10(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym7.2.clone();
        let __nt = super::__action424::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (8, 46)
    }
    pub(crate) fn __reduce79<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BranchDefinition = "branch", Identifier, ":", Type, "{", Comma<BranchVariant>, "}" => ActionFn(425);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant29(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant8(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action425::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (7, 46)
    }
    pub(crate) fn __reduce80<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BranchDefinition = "pub", "branch", Identifier, "{", Comma<BranchVariant>, "}" => ActionFn(426);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant29(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant10(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action426::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (6, 46)
    }
    pub(crate) fn __reduce81<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BranchDefinition = "branch", Identifier, "{", Comma<BranchVariant>, "}" => ActionFn(427);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant29(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action427::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (5, 46)
    }
    pub(crate) fn __reduce82<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BranchVariant = Identifier, "{", Comma<StructField>, "}" => ActionFn(313);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant32(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action313::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (4, 47)
    }
    pub(crate) fn __reduce83<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BranchVariant? = BranchVariant => ActionFn(189);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action189::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (1, 48)
    }
    pub(crate) fn __reduce84<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BranchVariant? =  => ActionFn(190);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action190::<>(input, intr, errs, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (0, 48)
    }
    pub(crate) fn __reduce85<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Call = Path, "(", Comma<Expr>, ")" => ActionFn(314);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant30(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action314::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (4, 49)
    }
    pub(crate) fn __reduce86<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ClassDefinition = "pub", "builtin", "class", Identifier, ":", Type, "{", Comma<StructField>, "}" => ActionFn(428);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant32(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant8(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant10(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym8.2.clone();
        let __nt = super::__action428::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (9, 50)
    }
    pub(crate) fn __reduce87<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ClassDefinition = "builtin", "class", Identifier, ":", Type, "{", Comma<StructField>, "}" => ActionFn(429);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant32(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant8(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant10(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym7.2.clone();
        let __nt = super::__action429::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (8, 50)
    }
    pub(crate) fn __reduce88<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ClassDefinition = "pub", "class", Identifier, ":", Type, "{", Comma<StructField>, "}" => ActionFn(430);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant32(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant8(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant10(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym7.2.clone();
        let __nt = super::__action430::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (8, 50)
    }
    pub(crate) fn __reduce89<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ClassDefinition = "class", Identifier, ":", Type, "{", Comma<StructField>, "}" => ActionFn(431);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant32(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant8(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action431::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (7, 50)
    }
    pub(crate) fn __reduce90<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ClassDefinition = "pub", "builtin", "class", Identifier, "{", Comma<StructField>, "}" => ActionFn(432);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant32(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant10(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action432::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (7, 50)
    }
    pub(crate) fn __reduce91<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ClassDefinition = "builtin", "class", Identifier, "{", Comma<StructField>, "}" => ActionFn(433);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant32(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant10(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action433::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (6, 50)
    }
    pub(crate) fn __reduce92<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ClassDefinition = "pub", "class", Identifier, "{", Comma<StructField>, "}" => ActionFn(434);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant32(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant10(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action434::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (6, 50)
    }
    pub(crate) fn __reduce93<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ClassDefinition = "class", Identifier, "{", Comma<StructField>, "}" => ActionFn(435);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant32(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action435::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (5, 50)
    }
    pub(crate) fn __reduce94<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Comma<BranchVariant> = Many0<",", BranchVariant> => ActionFn(129);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action129::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 51)
    }
    pub(crate) fn __reduce95<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Comma<Expr> = Many0<",", Expr> => ActionFn(100);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action100::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 52)
    }
    pub(crate) fn __reduce96<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Comma<FnParam> = Many0<",", FnParam> => ActionFn(128);
        let __sym0 = __pop_Variant31(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action128::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (1, 53)
    }
    pub(crate) fn __reduce97<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Comma<StructField> = Many0<",", StructField> => ActionFn(136);
        let __sym0 = __pop_Variant32(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action136::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (1, 54)
    }
    pub(crate) fn __reduce98<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Either<IfExpr, BlockExpr> = IfExpr => ActionFn(117);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action117::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce99<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Either<IfExpr, BlockExpr> = BlockExpr => ActionFn(118);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action118::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce100<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Expr = ExprWithoutBlock => ActionFn(33);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action33::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce101<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Expr = ExprWithBlock => ActionFn(34);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action34::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce102<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Expr0 = Lit => ActionFn(317);
        let __sym0 = __pop_Variant37(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action317::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce103<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Expr0 = Identifier => ActionFn(318);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action318::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce104<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Expr0 = Expr0, "@", Path, ".", Identifier => ActionFn(319);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant10(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant4(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action319::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (5, 57)
    }
    pub(crate) fn __reduce105<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Expr0 = Expr0, ".", Identifier => ActionFn(320);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant10(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action320::<>(input, intr, errs, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 57)
    }
    pub(crate) fn __reduce106<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Expr0 = Call => ActionFn(84);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action84::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce107<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Expr0 = "(", Many1<",", Expr>, ")" => ActionFn(321);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant30(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action321::<>(input, intr, errs, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 57)
    }
    pub(crate) fn __reduce108<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Expr0 = error => ActionFn(322);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action322::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce109<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Expr10 = Expr9, "=", Expr10 => ActionFn(323);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action323::<>(input, intr, errs, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 58)
    }
    pub(crate) fn __reduce110<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Expr10 = Expr9, Spanned<OpAssign>, Expr10 => ActionFn(324);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant47(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action324::<>(input, intr, errs, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 58)
    }
    pub(crate) fn __reduce111<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Expr10 = Expr9 => ActionFn(46);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action46::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce112<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Expr2 = UnOpExpr<Op2, Expr0> => ActionFn(77);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action77::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce113<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Expr3 = BinOpExpr<Op3, Expr2> => ActionFn(73);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action73::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 60)
    }
    pub(crate) fn __reduce114<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Expr4 = BinOpExpr<Op4, Expr3> => ActionFn(70);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action70::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 61)
    }
    pub(crate) fn __reduce115<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Expr5 = Expr5, Spanned<IsOp>, Type => ActionFn(325);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant8(__symbols);
        let __sym1 = __pop_Variant45(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action325::<>(input, intr, errs, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 62)
    }
    pub(crate) fn __reduce116<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Expr5 = Expr4 => ActionFn(67);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action67::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce117<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Expr6 = BinOpExpr<Op6, Expr5> => ActionFn(61);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action61::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 63)
    }
    pub(crate) fn __reduce118<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Expr7 = BinOpExpr<Op7, Expr6> => ActionFn(58);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action58::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 64)
    }
    pub(crate) fn __reduce119<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Expr8 = BinOpExpr<OpAnd, Expr7> => ActionFn(56);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action56::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 65)
    }
    pub(crate) fn __reduce120<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Expr9 = BinOpExpr<OpOr, Expr8> => ActionFn(54);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action54::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 66)
    }
    pub(crate) fn __reduce121<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Expr? = Expr => ActionFn(119);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action119::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant33(__nt), __end));
        (1, 67)
    }
    pub(crate) fn __reduce122<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Expr? =  => ActionFn(120);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action120::<>(input, intr, errs, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant33(__nt), __end));
        (0, 67)
    }
    pub(crate) fn __reduce123<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExprWithBlock = IfExpr => ActionFn(35);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action35::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 68)
    }
    pub(crate) fn __reduce124<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExprWithBlock = BlockExpr => ActionFn(36);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action36::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 68)
    }
    pub(crate) fn __reduce125<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExprWithBlock = LoopExpr => ActionFn(37);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action37::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 68)
    }
    pub(crate) fn __reduce126<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExprWithoutBlock = Expr10 => ActionFn(43);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action43::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 69)
    }
    pub(crate) fn __reduce127<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FnParam = Identifier, ":", Type => ActionFn(20);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant8(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action20::<>(input, intr, errs, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (3, 70)
    }
    pub(crate) fn __reduce128<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FnParam? = FnParam => ActionFn(184);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action184::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (1, 71)
    }
    pub(crate) fn __reduce129<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FnParam? =  => ActionFn(185);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action185::<>(input, intr, errs, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (0, 71)
    }
    pub(crate) fn __reduce130<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FunctionDefinition = "pub", "fn", Identifier, "(", Comma<FnParam>, ")", ":", Type, BlockOrSemi => ActionFn(436);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant26(__symbols);
        let __sym7 = __pop_Variant8(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant31(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant10(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym8.2.clone();
        let __nt = super::__action436::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (9, 72)
    }
    pub(crate) fn __reduce131<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FunctionDefinition = "fn", Identifier, "(", Comma<FnParam>, ")", ":", Type, BlockOrSemi => ActionFn(437);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant26(__symbols);
        let __sym6 = __pop_Variant8(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant31(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym7.2.clone();
        let __nt = super::__action437::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (8, 72)
    }
    pub(crate) fn __reduce132<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FunctionDefinition = "pub", "fn", Identifier, "(", Comma<FnParam>, ")", BlockOrSemi => ActionFn(438);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant26(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant31(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant10(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action438::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (7, 72)
    }
    pub(crate) fn __reduce133<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FunctionDefinition = "fn", Identifier, "(", Comma<FnParam>, ")", BlockOrSemi => ActionFn(439);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant26(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant31(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action439::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (6, 72)
    }
    pub(crate) fn __reduce134<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Identifier = TokenIdentifier => ActionFn(328);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action328::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 73)
    }
    pub(crate) fn __reduce135<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // IfExpr = "if", Expr, Block => ActionFn(329);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant25(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action329::<>(input, intr, errs, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 74)
    }
    pub(crate) fn __reduce136<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // IfExpr = "if", Expr, Block, "else", Either<IfExpr, BlockExpr> => ActionFn(330);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant6(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant25(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action330::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (5, 74)
    }
    pub(crate) fn __reduce137<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // IsOp = "!", "is" => ActionFn(68);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action68::<>(input, intr, errs, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (2, 75)
    }
    pub(crate) fn __reduce138<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // IsOp = "is" => ActionFn(69);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action69::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (1, 75)
    }
    pub(crate) fn __reduce139<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Item = ModDefinition => ActionFn(5);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action5::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 76)
    }
    pub(crate) fn __reduce140<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Item = StructDefinition => ActionFn(6);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action6::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 76)
    }
    pub(crate) fn __reduce141<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Item = ClassDefinition => ActionFn(7);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action7::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 76)
    }
    pub(crate) fn __reduce142<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Item = BranchDefinition => ActionFn(8);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action8::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 76)
    }
    pub(crate) fn __reduce143<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Item = FunctionDefinition => ActionFn(9);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action9::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 76)
    }
    pub(crate) fn __reduce144<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Item* =  => ActionFn(145);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action145::<>(input, intr, errs, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (0, 77)
    }
    pub(crate) fn __reduce145<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Item* = Item+ => ActionFn(146);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action146::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 77)
    }
    pub(crate) fn __reduce146<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Item+ = Item => ActionFn(147);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action147::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 78)
    }
    pub(crate) fn __reduce147<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Item+ = Item+, Item => ActionFn(148);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action148::<>(input, intr, errs, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (2, 78)
    }
    pub(crate) fn __reduce148<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Lit = "true" => ActionFn(87);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action87::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (1, 79)
    }
    pub(crate) fn __reduce149<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Lit = "false" => ActionFn(88);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action88::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (1, 79)
    }
    pub(crate) fn __reduce150<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Lit = TokenString => ActionFn(89);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action89::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (1, 79)
    }
    pub(crate) fn __reduce151<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Lit = TokenInt => ActionFn(331);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action331::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (1, 79)
    }
    pub(crate) fn __reduce152<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // LoopExpr = "loop", Block => ActionFn(332);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action332::<>(input, intr, errs, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 80)
    }
    pub(crate) fn __reduce153<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // LoopExpr = "while", Expr, Block => ActionFn(333);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant25(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action333::<>(input, intr, errs, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 80)
    }
    pub(crate) fn __reduce154<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Many0<",", BranchVariant> = BranchVariant => ActionFn(392);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action392::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 81)
    }
    pub(crate) fn __reduce155<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Many0<",", BranchVariant> =  => ActionFn(393);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action393::<>(input, intr, errs, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (0, 81)
    }
    pub(crate) fn __reduce156<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Many0<",", BranchVariant> = (<BranchVariant> ",")+, BranchVariant => ActionFn(394);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action394::<>(input, intr, errs, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 81)
    }
    pub(crate) fn __reduce157<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Many0<",", BranchVariant> = (<BranchVariant> ",")+ => ActionFn(395);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action395::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 81)
    }
    pub(crate) fn __reduce158<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Many0<",", Expr> = Expr => ActionFn(396);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action396::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 82)
    }
    pub(crate) fn __reduce159<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Many0<",", Expr> =  => ActionFn(397);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action397::<>(input, intr, errs, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (0, 82)
    }
    pub(crate) fn __reduce160<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Many0<",", Expr> = (<Expr> ",")+, Expr => ActionFn(398);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action398::<>(input, intr, errs, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (2, 82)
    }
    pub(crate) fn __reduce161<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Many0<",", Expr> = (<Expr> ",")+ => ActionFn(399);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action399::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 82)
    }
    pub(crate) fn __reduce162<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Many0<",", FnParam> = FnParam => ActionFn(404);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action404::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (1, 83)
    }
    pub(crate) fn __reduce163<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Many0<",", FnParam> =  => ActionFn(405);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action405::<>(input, intr, errs, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (0, 83)
    }
    pub(crate) fn __reduce164<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Many0<",", FnParam> = (<FnParam> ",")+, FnParam => ActionFn(406);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action406::<>(input, intr, errs, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (2, 83)
    }
    pub(crate) fn __reduce165<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Many0<",", FnParam> = (<FnParam> ",")+ => ActionFn(407);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action407::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (1, 83)
    }
    pub(crate) fn __reduce166<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Many0<",", StructField> = StructField => ActionFn(416);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action416::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (1, 84)
    }
    pub(crate) fn __reduce167<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Many0<",", StructField> =  => ActionFn(417);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action417::<>(input, intr, errs, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (0, 84)
    }
    pub(crate) fn __reduce168<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Many0<",", StructField> = (<StructField> ",")+, StructField => ActionFn(418);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant21(__symbols);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action418::<>(input, intr, errs, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (2, 84)
    }
    pub(crate) fn __reduce169<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Many0<",", StructField> = (<StructField> ",")+ => ActionFn(419);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action419::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (1, 84)
    }
    pub(crate) fn __reduce170<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Many0<",", Type> = Type => ActionFn(420);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action420::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (1, 85)
    }
    pub(crate) fn __reduce171<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Many0<",", Type> =  => ActionFn(421);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action421::<>(input, intr, errs, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (0, 85)
    }
    pub(crate) fn __reduce172<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Many0<",", Type> = (<Type> ",")+, Type => ActionFn(422);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant8(__symbols);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action422::<>(input, intr, errs, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (2, 85)
    }
    pub(crate) fn __reduce173<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Many0<",", Type> = (<Type> ",")+ => ActionFn(423);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action423::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (1, 85)
    }
    pub(crate) fn __reduce174<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Many1<"+", Path> = Path => ActionFn(215);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action215::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant39(__nt), __end));
        (1, 86)
    }
    pub(crate) fn __reduce175<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Many1<"+", Path> = Path, ("+" <Path>)+ => ActionFn(216);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action216::<>(input, intr, errs, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant39(__nt), __end));
        (2, 86)
    }
    pub(crate) fn __reduce176<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Many1<",", Expr> = Expr => ActionFn(219);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action219::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 87)
    }
    pub(crate) fn __reduce177<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Many1<",", Expr> = Expr, ("," <Expr>)+ => ActionFn(220);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action220::<>(input, intr, errs, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (2, 87)
    }
    pub(crate) fn __reduce178<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MaybeExprSemi = Expr, ";" => ActionFn(24);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action24::<>(input, intr, errs, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant40(__nt), __end));
        (2, 88)
    }
    pub(crate) fn __reduce179<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MaybeExprSemi = ";" => ActionFn(207);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action207::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant40(__nt), __end));
        (1, 88)
    }
    pub(crate) fn __reduce180<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MaybeExprSemi =  => ActionFn(208);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action208::<>(input, intr, errs, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant40(__nt), __end));
        (0, 88)
    }
    pub(crate) fn __reduce181<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ModDefinition = "pub", "mod", Identifier, ModItemsOrSemi => ActionFn(440);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant41(__symbols);
        let __sym2 = __pop_Variant10(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action440::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (4, 89)
    }
    pub(crate) fn __reduce182<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ModDefinition = "mod", Identifier, ModItemsOrSemi => ActionFn(441);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant41(__symbols);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action441::<>(input, intr, errs, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 89)
    }
    pub(crate) fn __reduce183<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ModItemsOrSemi = "{", "}" => ActionFn(408);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action408::<>(input, intr, errs, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant41(__nt), __end));
        (2, 90)
    }
    pub(crate) fn __reduce184<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ModItemsOrSemi = "{", Item+, "}" => ActionFn(409);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant36(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action409::<>(input, intr, errs, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant41(__nt), __end));
        (3, 90)
    }
    pub(crate) fn __reduce185<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ModItemsOrSemi = ";" => ActionFn(11);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action11::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant41(__nt), __end));
        (1, 90)
    }
    pub(crate) fn __reduce186<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op2 = "-" => ActionFn(78);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action78::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant42(__nt), __end));
        (1, 91)
    }
    pub(crate) fn __reduce187<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op2 = "!" => ActionFn(79);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action79::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant42(__nt), __end));
        (1, 91)
    }
    pub(crate) fn __reduce188<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op3 = "*" => ActionFn(74);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action74::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant43(__nt), __end));
        (1, 92)
    }
    pub(crate) fn __reduce189<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op3 = "/" => ActionFn(75);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action75::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant43(__nt), __end));
        (1, 92)
    }
    pub(crate) fn __reduce190<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op3 = "%" => ActionFn(76);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action76::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant43(__nt), __end));
        (1, 92)
    }
    pub(crate) fn __reduce191<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op4 = "+" => ActionFn(71);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action71::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant43(__nt), __end));
        (1, 93)
    }
    pub(crate) fn __reduce192<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op4 = "-" => ActionFn(72);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action72::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant43(__nt), __end));
        (1, 93)
    }
    pub(crate) fn __reduce193<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op6 = "<" => ActionFn(62);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action62::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant43(__nt), __end));
        (1, 94)
    }
    pub(crate) fn __reduce194<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op6 = ">" => ActionFn(63);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action63::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant43(__nt), __end));
        (1, 94)
    }
    pub(crate) fn __reduce195<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op6 = "<=" => ActionFn(64);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action64::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant43(__nt), __end));
        (1, 94)
    }
    pub(crate) fn __reduce196<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op6 = ">=" => ActionFn(65);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action65::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant43(__nt), __end));
        (1, 94)
    }
    pub(crate) fn __reduce197<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op7 = "==" => ActionFn(59);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action59::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant43(__nt), __end));
        (1, 95)
    }
    pub(crate) fn __reduce198<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op7 = "!=" => ActionFn(60);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action60::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant43(__nt), __end));
        (1, 95)
    }
    pub(crate) fn __reduce199<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // OpAnd = "&" => ActionFn(57);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action57::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant43(__nt), __end));
        (1, 96)
    }
    pub(crate) fn __reduce200<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // OpAssign = "+=" => ActionFn(47);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action47::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant43(__nt), __end));
        (1, 97)
    }
    pub(crate) fn __reduce201<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // OpAssign = "-=" => ActionFn(48);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action48::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant43(__nt), __end));
        (1, 97)
    }
    pub(crate) fn __reduce202<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // OpAssign = "*=" => ActionFn(49);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action49::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant43(__nt), __end));
        (1, 97)
    }
    pub(crate) fn __reduce203<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // OpAssign = "/=" => ActionFn(50);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action50::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant43(__nt), __end));
        (1, 97)
    }
    pub(crate) fn __reduce204<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // OpAssign = "%=" => ActionFn(51);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action51::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant43(__nt), __end));
        (1, 97)
    }
    pub(crate) fn __reduce205<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // OpAssign = "&=" => ActionFn(52);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action52::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant43(__nt), __end));
        (1, 97)
    }
    pub(crate) fn __reduce206<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // OpAssign = "|=" => ActionFn(53);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action53::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant43(__nt), __end));
        (1, 97)
    }
    pub(crate) fn __reduce207<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // OpOr = "|" => ActionFn(55);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action55::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant43(__nt), __end));
        (1, 98)
    }
    pub(crate) fn __reduce208<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Path = Identifier => ActionFn(234);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action234::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 99)
    }
    pub(crate) fn __reduce209<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Path = Identifier, ("::" <Identifier>)+ => ActionFn(235);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action235::<>(input, intr, errs, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (2, 99)
    }
    pub(crate) fn __reduce210<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Program =  => ActionFn(410);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action410::<>(input, intr, errs, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (0, 100)
    }
    pub(crate) fn __reduce211<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Program = Item+ => ActionFn(411);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action411::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 100)
    }
    pub(crate) fn __reduce212<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Spanned<IsOp> = IsOp => ActionFn(335);
        let __sym0 = __pop_Variant35(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action335::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 101)
    }
    pub(crate) fn __reduce213<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Spanned<Op2> = Op2 => ActionFn(336);
        let __sym0 = __pop_Variant42(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action336::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant46(__nt), __end));
        (1, 102)
    }
    pub(crate) fn __reduce214<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Spanned<Op3> = Op3 => ActionFn(337);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action337::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (1, 103)
    }
    pub(crate) fn __reduce215<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Spanned<Op4> = Op4 => ActionFn(338);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action338::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (1, 104)
    }
    pub(crate) fn __reduce216<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Spanned<Op6> = Op6 => ActionFn(339);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action339::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (1, 105)
    }
    pub(crate) fn __reduce217<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Spanned<Op7> = Op7 => ActionFn(340);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action340::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (1, 106)
    }
    pub(crate) fn __reduce218<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Spanned<OpAnd> = OpAnd => ActionFn(341);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action341::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (1, 107)
    }
    pub(crate) fn __reduce219<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Spanned<OpAssign> = OpAssign => ActionFn(342);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action342::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (1, 108)
    }
    pub(crate) fn __reduce220<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Spanned<OpOr> = OpOr => ActionFn(343);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action343::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (1, 109)
    }
    pub(crate) fn __reduce221<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Stmt = Item => ActionFn(344);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action344::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant48(__nt), __end));
        (1, 110)
    }
    pub(crate) fn __reduce222<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Stmt = "let", Identifier, ":", Type, "=", Expr, ";" => ActionFn(345);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant6(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant8(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action345::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant48(__nt), __end));
        (7, 110)
    }
    pub(crate) fn __reduce223<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Stmt = "let", Identifier, "=", Expr, ";" => ActionFn(346);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant6(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action346::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant48(__nt), __end));
        (5, 110)
    }
    pub(crate) fn __reduce224<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Stmt = "return", Expr, ";" => ActionFn(400);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action400::<>(input, intr, errs, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant48(__nt), __end));
        (3, 110)
    }
    pub(crate) fn __reduce225<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Stmt = "return", ";" => ActionFn(401);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action401::<>(input, intr, errs, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant48(__nt), __end));
        (2, 110)
    }
    pub(crate) fn __reduce226<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Stmt = "break", Expr, ";" => ActionFn(402);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action402::<>(input, intr, errs, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant48(__nt), __end));
        (3, 110)
    }
    pub(crate) fn __reduce227<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Stmt = "break", ";" => ActionFn(403);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action403::<>(input, intr, errs, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant48(__nt), __end));
        (2, 110)
    }
    pub(crate) fn __reduce228<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Stmt = "continue", ";" => ActionFn(349);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action349::<>(input, intr, errs, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant48(__nt), __end));
        (2, 110)
    }
    pub(crate) fn __reduce229<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Stmt = "continue" => ActionFn(350);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action350::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant48(__nt), __end));
        (1, 110)
    }
    pub(crate) fn __reduce230<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Stmt = ExprWithoutBlock, ";" => ActionFn(351);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action351::<>(input, intr, errs, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant48(__nt), __end));
        (2, 110)
    }
    pub(crate) fn __reduce231<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Stmt = ExprWithBlock, ";" => ActionFn(352);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action352::<>(input, intr, errs, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant48(__nt), __end));
        (2, 110)
    }
    pub(crate) fn __reduce232<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Stmt = ExprWithBlock => ActionFn(353);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action353::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant48(__nt), __end));
        (1, 110)
    }
    pub(crate) fn __reduce233<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Stmt* =  => ActionFn(126);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action126::<>(input, intr, errs, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant49(__nt), __end));
        (0, 111)
    }
    pub(crate) fn __reduce234<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Stmt* = Stmt+ => ActionFn(127);
        let __sym0 = __pop_Variant49(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action127::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant49(__nt), __end));
        (1, 111)
    }
    pub(crate) fn __reduce235<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Stmt+ = Stmt => ActionFn(154);
        let __sym0 = __pop_Variant48(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action154::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant49(__nt), __end));
        (1, 112)
    }
    pub(crate) fn __reduce236<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Stmt+ = Stmt+, Stmt => ActionFn(155);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant48(__symbols);
        let __sym0 = __pop_Variant49(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action155::<>(input, intr, errs, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant49(__nt), __end));
        (2, 112)
    }
    pub(crate) fn __reduce237<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StructDefinition = "pub", "struct", Identifier, "{", Comma<StructField>, "}" => ActionFn(442);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant32(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant10(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action442::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (6, 113)
    }
    pub(crate) fn __reduce238<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StructDefinition = "struct", Identifier, "{", Comma<StructField>, "}" => ActionFn(443);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant32(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action443::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (5, 113)
    }
    pub(crate) fn __reduce239<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StructField = "pub", Identifier, ":", Type => ActionFn(444);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant8(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action444::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (4, 114)
    }
    pub(crate) fn __reduce240<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StructField = Identifier, ":", Type => ActionFn(445);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant8(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action445::<>(input, intr, errs, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (3, 114)
    }
    pub(crate) fn __reduce241<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StructField = "pub", Identifier, ":", Type, "=", Expr => ActionFn(446);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant6(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant8(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action446::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (6, 114)
    }
    pub(crate) fn __reduce242<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StructField = Identifier, ":", Type, "=", Expr => ActionFn(447);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant6(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant8(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action447::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (5, 114)
    }
    pub(crate) fn __reduce243<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StructField = "pub", Identifier, "=", Expr => ActionFn(448);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant6(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action448::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (4, 114)
    }
    pub(crate) fn __reduce244<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StructField = Identifier, "=", Expr => ActionFn(449);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action449::<>(input, intr, errs, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (3, 114)
    }
    pub(crate) fn __reduce245<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StructField? = StructField => ActionFn(194);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action194::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant50(__nt), __end));
        (1, 115)
    }
    pub(crate) fn __reduce246<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StructField? =  => ActionFn(195);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action195::<>(input, intr, errs, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant50(__nt), __end));
        (0, 115)
    }
    pub(crate) fn __reduce247<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Type = "(", Many0<",", Type>, ")" => ActionFn(357);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant38(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action357::<>(input, intr, errs, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (3, 116)
    }
    pub(crate) fn __reduce248<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Type = Many1<"+", Path> => ActionFn(358);
        let __sym0 = __pop_Variant39(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action358::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 116)
    }
    pub(crate) fn __reduce249<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Type = error => ActionFn(359);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action359::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 116)
    }
    pub(crate) fn __reduce250<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Type? = Type => ActionFn(167);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action167::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 117)
    }
    pub(crate) fn __reduce251<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Type? =  => ActionFn(168);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action168::<>(input, intr, errs, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (0, 117)
    }
    pub(crate) fn __reduce252<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UnOpExpr<Op2, Expr0> = Spanned<Op2>, UnOpExpr<Op2, Expr0> => ActionFn(360);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant46(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action360::<>(input, intr, errs, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 118)
    }
    pub(crate) fn __reduce253<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UnOpExpr<Op2, Expr0> = Expr0 => ActionFn(102);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action102::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 118)
    }
    pub(crate) fn __reduce254<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Vis = "pub" => ActionFn(367);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action367::<>(input, intr, errs, __sym0);
        __symbols.push((__start, __Symbol::Variant51(__nt), __end));
        (1, 119)
    }
    pub(crate) fn __reduce255<
        'input,
    >(
        input: &'input str,
        intr: &Interner,
        errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Vis =  => ActionFn(368);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action368::<>(input, intr, errs, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant51(__nt), __end));
        (0, 119)
    }
}
pub use self::__parse__Program::ProgramParser;

#[allow(unused_variables)]
fn __action0<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Program, usize),
) -> Program
{
    __0
}

#[allow(unused_variables)]
fn __action1<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, items, _): (usize, ::std::vec::Vec<Item>, usize),
) -> Program
{
    Program { items }
}

#[allow(unused_variables)]
fn __action2<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, pb, _): (usize, ::std::option::Option<(usize, usize)>, usize),
) -> Visibility
{
    match pb {
        Some((l, r)) => Visibility::Pub(Span{l,r}),
        None => Visibility::Private,
    }
}

#[allow(unused_variables)]
fn __action3<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, n, _): (usize, &'input str, usize),
    (_, r, _): (usize, usize, usize),
) -> Identifier
{
    Identifier::new(l, r, intr.get_or_intern(n))
}

#[allow(unused_variables)]
fn __action4<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, one, _): (usize, Identifier, usize),
    (_, v, _): (usize, ::std::vec::Vec<Identifier>, usize),
) -> Path
{
    {
        let mut v = v;
        v.insert(0, one);

        Path {
            items: v
        }
    }
}

#[allow(unused_variables)]
fn __action5<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Item, usize),
) -> Item
{
    __0
}

#[allow(unused_variables)]
fn __action6<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Item, usize),
) -> Item
{
    __0
}

#[allow(unused_variables)]
fn __action7<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Item, usize),
) -> Item
{
    __0
}

#[allow(unused_variables)]
fn __action8<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Item, usize),
) -> Item
{
    __0
}

#[allow(unused_variables)]
fn __action9<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Item, usize),
) -> Item
{
    __0
}

#[allow(unused_variables)]
fn __action10<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, _, _): (usize, Token<'input>, usize),
    (_, __0, _): (usize, ::std::vec::Vec<Item>, usize),
    (_, _, _): (usize, Token<'input>, usize),
) -> Vec<Item>
{
    __0
}

#[allow(unused_variables)]
fn __action11<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Token<'input>, usize),
) -> Vec<Item>
{
    Vec::with_capacity(0)
}

#[allow(unused_variables)]
fn __action12<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, vis, _): (usize, Visibility, usize),
    (_, _, _): (usize, Token<'input>, usize),
    (_, name, _): (usize, Identifier, usize),
    (_, items, _): (usize, Vec<Item>, usize),
    (_, r, _): (usize, usize, usize),
) -> Item
{
    {
        let inline = items.capacity() != 0;
        Item {
            name,
            vis,
            kind: ItemKind::Mod(Mod {
                items,
                inline,
            }),
            span: Span{l,r},
        }
    }
}

#[allow(unused_variables)]
fn __action13<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, vis, _): (usize, Visibility, usize),
    (_, _, _): (usize, Token<'input>, usize),
    (_, name, _): (usize, Identifier, usize),
    (_, _, _): (usize, Token<'input>, usize),
    (_, members, _): (usize, Vec<StructField>, usize),
    (_, _, _): (usize, Token<'input>, usize),
    (_, r, _): (usize, usize, usize),
) -> Item
{
    {
        Item {
            name,
            vis,
            kind: ItemKind::Struct(Struct {
                members
            }),
            span: Span{l,r},
        }
    }
}

#[allow(unused_variables)]
fn __action14<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, vis, _): (usize, Visibility, usize),
    (_, b, _): (usize, ::std::option::Option<(usize, usize)>, usize),
    (_, _, _): (usize, Token<'input>, usize),
    (_, name, _): (usize, Identifier, usize),
    (_, bounds, _): (usize, ::std::option::Option<Type>, usize),
    (_, _, _): (usize, Token<'input>, usize),
    (_, members, _): (usize, Vec<StructField>, usize),
    (_, _, _): (usize, Token<'input>, usize),
    (_, r, _): (usize, usize, usize),
) -> Item
{
    {
        let bounds = if let Some(ty) = bounds {
            ClassBounds::Ty(ty)
        } else {
            ClassBounds::Default
        };
        
        Item {
            name,
            vis,
            kind: ItemKind::Class(Class {
                builtin: b.map(|(l, r)| Span{l,r}), 
                bounds, 
                members
            }),
            span: Span{l,r},
        }
    }
}

#[allow(unused_variables)]
fn __action15<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, vis, _): (usize, Visibility, usize),
    (_, _, _): (usize, Token<'input>, usize),
    (_, name, _): (usize, Identifier, usize),
    (_, bounds, _): (usize, ::std::option::Option<Type>, usize),
    (_, _, _): (usize, Token<'input>, usize),
    (_, variants, _): (usize, Vec<BranchVariant>, usize),
    (_, _, _): (usize, Token<'input>, usize),
    (_, r, _): (usize, usize, usize),
) -> Item
{
    {
        let bounds = if let Some(ty) = bounds {
            ClassBounds::Ty(ty)
        } else {
            ClassBounds::Default
        };
        
        Item {
            name,
            vis,
            kind: ItemKind::Branch(Branch {
                bounds, 
                variants
            }),
            span: Span{l,r},
        }
    }
}

#[allow(unused_variables)]
fn __action16<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, name, _): (usize, Identifier, usize),
    (_, _, _): (usize, Token<'input>, usize),
    (_, members, _): (usize, Vec<StructField>, usize),
    (_, _, _): (usize, Token<'input>, usize),
    (_, r, _): (usize, usize, usize),
) -> BranchVariant
{
    {
        BranchVariant {
            span: Span{l,r},
            name,
            members,
        }
    }
}

#[allow(unused_variables)]
fn __action17<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, vis, _): (usize, Visibility, usize),
    (_, name, _): (usize, Identifier, usize),
    (_, _, _): (usize, Token<'input>, usize),
    (_, ty, _): (usize, Type, usize),
) -> StructField
{
    StructField{name, ty, vis, default: None}
}

#[allow(unused_variables)]
fn __action18<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, vis, _): (usize, Visibility, usize),
    (_, name, _): (usize, Identifier, usize),
    (_, l, _): (usize, usize, usize),
    (_, ty, _): (usize, ::std::option::Option<Type>, usize),
    (_, r, _): (usize, usize, usize),
    (_, _, _): (usize, Token<'input>, usize),
    (_, default, _): (usize, Expr, usize),
) -> StructField
{
    {
        let ty = if let Some(ty) = ty {
            ty
        } else {
            Type::new(l, r, TypeKind::Infer)
        };
        StructField{name, ty, vis, default: Some(bx(default))}
    }
}

#[allow(unused_variables)]
fn __action19<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, vis, _): (usize, Visibility, usize),
    (_, _, _): (usize, Token<'input>, usize),
    (_, name, _): (usize, Identifier, usize),
    (_, _, _): (usize, Token<'input>, usize),
    (_, params, _): (usize, Vec<FnParam>, usize),
    (_, _, _): (usize, Token<'input>, usize),
    (_, retty, _): (usize, ::std::option::Option<Type>, usize),
    (_, block, _): (usize, Option<Block>, usize),
    (_, r, _): (usize, usize, usize),
) -> Item
{
    {
        let ret = if let Some(ty) = retty {
            FnReturn::Ty(ty)
        } else {
            FnReturn::Default
        };

        let sig = FnSig {
            params,
            ret
        };

        Item {
            name,
            vis,
            kind: ItemKind::Fn(sig, block),
            span: Span{l,r},
        }
    }
}

#[allow(unused_variables)]
fn __action20<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, name, _): (usize, Identifier, usize),
    (_, _, _): (usize, Token<'input>, usize),
    (_, ty, _): (usize, Type, usize),
) -> FnParam
{
    FnParam{name, ty}
}

#[allow(unused_variables)]
fn __action21<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, _, _): (usize, Token<'input>, usize),
    (_, s, _): (usize, ::std::vec::Vec<Stmt>, usize),
    (_, e, _): (usize, ::std::option::Option<(usize, Expr, usize)>, usize),
    (_, _, _): (usize, Token<'input>, usize),
    (_, r, _): (usize, usize, usize),
) -> Block
{
    {
        let mut s = s;
        if let Some((l, e, r)) = e {
            s.push(Stmt::new(l, r, StmtKind::Expr(bx(e))));
        }
        Block::new(l, r, s)
    }
}

#[allow(unused_variables)]
fn __action22<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Block, usize),
) -> Option<Block>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action23<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Token<'input>, usize),
) -> Option<Block>
{
    None
}

#[allow(unused_variables)]
fn __action24<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Expr, usize),
    (_, _, _): (usize, Token<'input>, usize),
) -> Option<Expr>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action25<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, ::std::option::Option<Token<'input>>, usize),
) -> Option<Expr>
{
    None
}

#[allow(unused_variables)]
fn __action26<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, item, _): (usize, Item, usize),
    (_, r, _): (usize, usize, usize),
) -> Stmt
{
    Stmt::new(l, r, StmtKind::Item(bx(item)))
}

#[allow(unused_variables)]
fn __action27<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, _, _): (usize, Token<'input>, usize),
    (_, id, _): (usize, Identifier, usize),
    (_, ty, _): (usize, ::std::option::Option<Type>, usize),
    (_, _, _): (usize, Token<'input>, usize),
    (_, e, _): (usize, Expr, usize),
    (_, _, _): (usize, Token<'input>, usize),
    (_, r, _): (usize, usize, usize),
) -> Stmt
{
    Stmt::new(l, r, StmtKind::Let(id, box_opt(ty), bx(e)))
}

#[allow(unused_variables)]
fn __action28<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, _, _): (usize, Token<'input>, usize),
    (_, e, _): (usize, ::std::option::Option<Expr>, usize),
    (_, _, _): (usize, Token<'input>, usize),
    (_, r, _): (usize, usize, usize),
) -> Stmt
{
    Stmt::new(l, r, StmtKind::Ret(box_opt(e)))
}

#[allow(unused_variables)]
fn __action29<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, _, _): (usize, Token<'input>, usize),
    (_, e, _): (usize, ::std::option::Option<Expr>, usize),
    (_, _, _): (usize, Token<'input>, usize),
    (_, r, _): (usize, usize, usize),
) -> Stmt
{
    Stmt::new(l, r, StmtKind::Break(box_opt(e)))
}

#[allow(unused_variables)]
fn __action30<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, _, _): (usize, Token<'input>, usize),
    (_, _, _): (usize, ::std::option::Option<Token<'input>>, usize),
    (_, r, _): (usize, usize, usize),
) -> Stmt
{
    Stmt::new(l, r, StmtKind::Continue)
}

#[allow(unused_variables)]
fn __action31<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, e, _): (usize, Expr, usize),
    (_, _, _): (usize, Token<'input>, usize),
    (_, r, _): (usize, usize, usize),
) -> Stmt
{
    {
        Stmt::new(l, r, StmtKind::Semi(bx(e)))
    }
}

#[allow(unused_variables)]
fn __action32<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, e, _): (usize, Expr, usize),
    (_, semi, _): (usize, ::std::option::Option<Token<'input>>, usize),
    (_, r, _): (usize, usize, usize),
) -> Stmt
{
    match semi {
        Some(_) => Stmt::new(l, r, StmtKind::Semi(bx(e))),
        None => Stmt::new(l, r, StmtKind::Expr(bx(e))),
    }
}

#[allow(unused_variables)]
fn __action33<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Expr, usize),
) -> Expr
{
    __0
}

#[allow(unused_variables)]
fn __action34<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Expr, usize),
) -> Expr
{
    __0
}

#[allow(unused_variables)]
fn __action35<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Expr, usize),
) -> Expr
{
    __0
}

#[allow(unused_variables)]
fn __action36<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Expr, usize),
) -> Expr
{
    __0
}

#[allow(unused_variables)]
fn __action37<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Expr, usize),
) -> Expr
{
    __0
}

#[allow(unused_variables)]
fn __action38<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, e, _): (usize, Block, usize),
    (_, r, _): (usize, usize, usize),
) -> Expr
{
    Expr::new(l, r, ExprKind::Block(e))
}

#[allow(unused_variables)]
fn __action39<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, _, _): (usize, Token<'input>, usize),
    (_, cond, _): (usize, Expr, usize),
    (_, iftrue, _): (usize, Block, usize),
    (_, r, _): (usize, usize, usize),
) -> Expr
{
    {
        Expr::new(l, r, ExprKind::If(bx(cond), iftrue, None))
    }
}

#[allow(unused_variables)]
fn __action40<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, _, _): (usize, Token<'input>, usize),
    (_, cond, _): (usize, Expr, usize),
    (_, iftrue, _): (usize, Block, usize),
    (_, _, _): (usize, Token<'input>, usize),
    (_, iffalse, _): (usize, Expr, usize),
    (_, r, _): (usize, usize, usize),
) -> Expr
{
    {
        Expr::new(l, r, ExprKind::If(bx(cond), iftrue, Some(bx(iffalse))))
    }
}

#[allow(unused_variables)]
fn __action41<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, _, _): (usize, Token<'input>, usize),
    (_, block, _): (usize, Block, usize),
    (_, r, _): (usize, usize, usize),
) -> Expr
{
    Expr::new(l, r, ExprKind::Loop(block))
}

#[allow(unused_variables)]
fn __action42<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, _, _): (usize, Token<'input>, usize),
    (_, cond, _): (usize, Expr, usize),
    (_, block, _): (usize, Block, usize),
    (_, r, _): (usize, usize, usize),
) -> Expr
{
    Expr::new(l, r, ExprKind::While(bx(cond), block))
}

#[allow(unused_variables)]
fn __action43<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Expr, usize),
) -> Expr
{
    __0
}

#[allow(unused_variables)]
fn __action44<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, lo, _): (usize, usize, usize),
    (_, lhs, _): (usize, Expr, usize),
    (_, l, _): (usize, usize, usize),
    (_, _, _): (usize, Token<'input>, usize),
    (_, r, _): (usize, usize, usize),
    (_, rhs, _): (usize, Expr, usize),
    (_, ro, _): (usize, usize, usize),
) -> Expr
{
    Expr::new(lo, ro, ExprKind::Assign(Span{l,r}, bx(lhs), bx(rhs)))
}

#[allow(unused_variables)]
fn __action45<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, lhs, _): (usize, Expr, usize),
    (_, op, _): (usize, Spanned<BinOp>, usize),
    (_, rhs, _): (usize, Expr, usize),
    (_, r, _): (usize, usize, usize),
) -> Expr
{
    Expr::new(l, r, ExprKind::AssignOp(op, bx(lhs), bx(rhs)))
}

#[allow(unused_variables)]
fn __action46<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Expr, usize),
) -> Expr
{
    __0
}

#[allow(unused_variables)]
fn __action47<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Token<'input>, usize),
) -> BinOp
{
    BinOp::Add
}

#[allow(unused_variables)]
fn __action48<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Token<'input>, usize),
) -> BinOp
{
    BinOp::Sub
}

#[allow(unused_variables)]
fn __action49<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Token<'input>, usize),
) -> BinOp
{
    BinOp::Mul
}

#[allow(unused_variables)]
fn __action50<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Token<'input>, usize),
) -> BinOp
{
    BinOp::Div
}

#[allow(unused_variables)]
fn __action51<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Token<'input>, usize),
) -> BinOp
{
    BinOp::Rem
}

#[allow(unused_variables)]
fn __action52<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Token<'input>, usize),
) -> BinOp
{
    BinOp::Rem
}

#[allow(unused_variables)]
fn __action53<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Token<'input>, usize),
) -> BinOp
{
    BinOp::Rem
}

#[allow(unused_variables)]
fn __action54<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Expr, usize),
) -> Expr
{
    __0
}

#[allow(unused_variables)]
fn __action55<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Token<'input>, usize),
) -> BinOp
{
    BinOp::Or
}

#[allow(unused_variables)]
fn __action56<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Expr, usize),
) -> Expr
{
    __0
}

#[allow(unused_variables)]
fn __action57<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Token<'input>, usize),
) -> BinOp
{
    BinOp::And
}

#[allow(unused_variables)]
fn __action58<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Expr, usize),
) -> Expr
{
    __0
}

#[allow(unused_variables)]
fn __action59<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Token<'input>, usize),
) -> BinOp
{
    BinOp::Eq
}

#[allow(unused_variables)]
fn __action60<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Token<'input>, usize),
) -> BinOp
{
    BinOp::Ne
}

#[allow(unused_variables)]
fn __action61<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Expr, usize),
) -> Expr
{
    __0
}

#[allow(unused_variables)]
fn __action62<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Token<'input>, usize),
) -> BinOp
{
    BinOp::Lt
}

#[allow(unused_variables)]
fn __action63<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Token<'input>, usize),
) -> BinOp
{
    BinOp::Gt
}

#[allow(unused_variables)]
fn __action64<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Token<'input>, usize),
) -> BinOp
{
    BinOp::Le
}

#[allow(unused_variables)]
fn __action65<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Token<'input>, usize),
) -> BinOp
{
    BinOp::Ge
}

#[allow(unused_variables)]
fn __action66<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, e, _): (usize, Expr, usize),
    (_, op, _): (usize, Spanned<IsOpKind>, usize),
    (_, ty, _): (usize, Type, usize),
    (_, r, _): (usize, usize, usize),
) -> Expr
{
    Expr::new(l, r, ExprKind::Is(op, bx(e), bx(ty)))
}

#[allow(unused_variables)]
fn __action67<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Expr, usize),
) -> Expr
{
    __0
}

#[allow(unused_variables)]
fn __action68<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Token<'input>, usize),
    (_, __1, _): (usize, Token<'input>, usize),
) -> IsOpKind
{
    IsOpKind::NotIs
}

#[allow(unused_variables)]
fn __action69<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Token<'input>, usize),
) -> IsOpKind
{
    IsOpKind::Is
}

#[allow(unused_variables)]
fn __action70<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Expr, usize),
) -> Expr
{
    __0
}

#[allow(unused_variables)]
fn __action71<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Token<'input>, usize),
) -> BinOp
{
    BinOp::Add
}

#[allow(unused_variables)]
fn __action72<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Token<'input>, usize),
) -> BinOp
{
    BinOp::Sub
}

#[allow(unused_variables)]
fn __action73<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Expr, usize),
) -> Expr
{
    __0
}

#[allow(unused_variables)]
fn __action74<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Token<'input>, usize),
) -> BinOp
{
    BinOp::Mul
}

#[allow(unused_variables)]
fn __action75<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Token<'input>, usize),
) -> BinOp
{
    BinOp::Div
}

#[allow(unused_variables)]
fn __action76<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Token<'input>, usize),
) -> BinOp
{
    BinOp::Rem
}

#[allow(unused_variables)]
fn __action77<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Expr, usize),
) -> Expr
{
    __0
}

#[allow(unused_variables)]
fn __action78<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Token<'input>, usize),
) -> UnOpKind
{
    UnOpKind::Neg
}

#[allow(unused_variables)]
fn __action79<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Token<'input>, usize),
) -> UnOpKind
{
    UnOpKind::Not
}

#[allow(unused_variables)]
fn __action80<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, name, _): (usize, Path, usize),
    (_, _, _): (usize, Token<'input>, usize),
    (_, exprs, _): (usize, Vec<Expr>, usize),
    (_, _, _): (usize, Token<'input>, usize),
    (_, r, _): (usize, usize, usize),
) -> Expr
{
    {
        Expr::new(l, r, ExprKind::Call(name, exprs))
    }
}

#[allow(unused_variables)]
fn __action81<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, lit, _): (usize, Lit, usize),
    (_, r, _): (usize, usize, usize),
) -> Expr
{
    Expr::new(l, r, ExprKind::Lit(lit))
}

#[allow(unused_variables)]
fn __action82<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, ident, _): (usize, Identifier, usize),
    (_, r, _): (usize, usize, usize),
) -> Expr
{
    Expr::new(l, r, ExprKind::Variable(ident))
}

#[allow(unused_variables)]
fn __action83<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, e, _): (usize, Expr, usize),
    (_, discriminator, _): (usize, ::std::option::Option<Path>, usize),
    (_, _, _): (usize, Token<'input>, usize),
    (_, field, _): (usize, Identifier, usize),
    (_, r, _): (usize, usize, usize),
) -> Expr
{
    Expr::new(l, r, ExprKind::FieldAccess(bx(e), discriminator, field))
}

#[allow(unused_variables)]
fn __action84<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Expr, usize),
) -> Expr
{
    __0
}

#[allow(unused_variables)]
fn __action85<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, _, _): (usize, Token<'input>, usize),
    (_, exprs, _): (usize, Vec<Expr>, usize),
    (_, _, _): (usize, Token<'input>, usize),
    (_, r, _): (usize, usize, usize),
) -> Expr
{
    {
        Expr::new(l, r, if exprs.len() == 1 {
            let mut exprs = exprs;
            ExprKind::Paren(bx(exprs.remove(0)))
        } else {
            ExprKind::Tuple(exprs)
        })
    }
}

#[allow(unused_variables)]
fn __action86<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, err, _): (usize, __lalrpop_util::ErrorRecovery<usize, Token<'input>, ParserError>, usize),
    (_, r, _): (usize, usize, usize),
) -> Expr
{
    { errs.push(err); Expr::new(l, r, ExprKind::Err) }
}

#[allow(unused_variables)]
fn __action87<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Token<'input>, usize),
) -> Lit
{
    Lit::Bool(true)
}

#[allow(unused_variables)]
fn __action88<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Token<'input>, usize),
) -> Lit
{
    Lit::Bool(false)
}

#[allow(unused_variables)]
fn __action89<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, s, _): (usize, &'input str, usize),
) -> Lit
{
    Lit::String(s.to_string())
}

#[allow(unused_variables)]
fn __action90<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, tok, _): (usize, &'input str, usize),
    (_, r, _): (usize, usize, usize),
) -> Lit
{
    {
        let s: String = tok.chars().filter(|v| *v != '_').collect();
        match i32::from_str(&s) {
            Ok(i) => Lit::Int(i),
            Err(_) => {
                errs.push(ErrorRecovery {
                    error: ParseError::User{ 
                        error: ParserError::IntTooBig(Span{l,r})
                    },
                    dropped_tokens: vec![(l, Token::IntLiteral(tok.clone()), r)]
                });

                Lit::Err
            }
        }
    }
}

#[allow(unused_variables)]
fn __action91<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, _, _): (usize, Token<'input>, usize),
    (_, tys, _): (usize, Vec<Type>, usize),
    (_, _, _): (usize, Token<'input>, usize),
    (_, r, _): (usize, usize, usize),
) -> Type
{
    {
        if tys.is_empty() {
            Type::new(l, r, TypeKind::Unit)
        } else {
            Type::new(l, r, TypeKind::Tuple(tys))
        }
    }
}

#[allow(unused_variables)]
fn __action92<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, ty, _): (usize, Vec<Path>, usize),
    (_, r, _): (usize, usize, usize),
) -> Type
{
    {
        if ty.len() == 1 {
            let mut ty = ty;
            Type::new(l, r, TypeKind::Named(ty.remove(0)))
        } else {
            Type::new(l, r, TypeKind::And(ty))
        }
    }
}

#[allow(unused_variables)]
fn __action93<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, err, _): (usize, __lalrpop_util::ErrorRecovery<usize, Token<'input>, ParserError>, usize),
    (_, r, _): (usize, usize, usize),
) -> Type
{
    { errs.push(err); Type::new(l, r, TypeKind::Err) }
}

#[allow(unused_variables)]
fn __action94<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, e, _): (usize, Path, usize),
    (_, v, _): (usize, ::std::vec::Vec<Path>, usize),
) -> Vec<Path>
{
    {
        let mut v = v;
        v.insert(0, e);
        v
    }
}

#[allow(unused_variables)]
fn __action95<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, v, _): (usize, ::std::vec::Vec<Type>, usize),
    (_, e, _): (usize, ::std::option::Option<Type>, usize),
) -> Vec<Type>
{
    match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

#[allow(unused_variables)]
fn __action96<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, e, _): (usize, Expr, usize),
    (_, v, _): (usize, ::std::vec::Vec<Expr>, usize),
) -> Vec<Expr>
{
    {
        let mut v = v;
        v.insert(0, e);
        v
    }
}

#[allow(unused_variables)]
fn __action97<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Path, usize),
) -> ::std::option::Option<Path>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action98<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::option::Option<Path>
{
    None
}

#[allow(unused_variables)]
fn __action99<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, _, _): (usize, Token<'input>, usize),
    (_, __0, _): (usize, Path, usize),
) -> Path
{
    __0
}

#[allow(unused_variables)]
fn __action100<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Vec<Expr>, usize),
) -> Vec<Expr>
{
    __0
}

#[allow(unused_variables)]
fn __action101<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, op, _): (usize, Spanned<UnOpKind>, usize),
    (_, rhs, _): (usize, Expr, usize),
    (_, r, _): (usize, usize, usize),
) -> Expr
{
    Expr::new(l, r, ExprKind::UnOp(op, bx(rhs)))
}

#[allow(unused_variables)]
fn __action102<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Expr, usize),
) -> Expr
{
    __0
}

#[allow(unused_variables)]
fn __action103<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, lhs, _): (usize, Expr, usize),
    (_, op, _): (usize, Spanned<BinOp>, usize),
    (_, rhs, _): (usize, Expr, usize),
    (_, r, _): (usize, usize, usize),
) -> Expr
{
    Expr::new(l, r, ExprKind::BinOp(op, bx(lhs), bx(rhs)))
}

#[allow(unused_variables)]
fn __action104<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Expr, usize),
) -> Expr
{
    __0
}

#[allow(unused_variables)]
fn __action105<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, lhs, _): (usize, Expr, usize),
    (_, op, _): (usize, Spanned<BinOp>, usize),
    (_, rhs, _): (usize, Expr, usize),
    (_, r, _): (usize, usize, usize),
) -> Expr
{
    Expr::new(l, r, ExprKind::BinOp(op, bx(lhs), bx(rhs)))
}

#[allow(unused_variables)]
fn __action106<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Expr, usize),
) -> Expr
{
    __0
}

#[allow(unused_variables)]
fn __action107<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, val, _): (usize, IsOpKind, usize),
    (_, r, _): (usize, usize, usize),
) -> Spanned<IsOpKind>
{
    Spanned::new(l, r, val)
}

#[allow(unused_variables)]
fn __action108<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, lhs, _): (usize, Expr, usize),
    (_, op, _): (usize, Spanned<BinOp>, usize),
    (_, rhs, _): (usize, Expr, usize),
    (_, r, _): (usize, usize, usize),
) -> Expr
{
    Expr::new(l, r, ExprKind::BinOp(op, bx(lhs), bx(rhs)))
}

#[allow(unused_variables)]
fn __action109<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Expr, usize),
) -> Expr
{
    __0
}

#[allow(unused_variables)]
fn __action110<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, lhs, _): (usize, Expr, usize),
    (_, op, _): (usize, Spanned<BinOp>, usize),
    (_, rhs, _): (usize, Expr, usize),
    (_, r, _): (usize, usize, usize),
) -> Expr
{
    Expr::new(l, r, ExprKind::BinOp(op, bx(lhs), bx(rhs)))
}

#[allow(unused_variables)]
fn __action111<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Expr, usize),
) -> Expr
{
    __0
}

#[allow(unused_variables)]
fn __action112<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, lhs, _): (usize, Expr, usize),
    (_, op, _): (usize, Spanned<BinOp>, usize),
    (_, rhs, _): (usize, Expr, usize),
    (_, r, _): (usize, usize, usize),
) -> Expr
{
    Expr::new(l, r, ExprKind::BinOp(op, bx(lhs), bx(rhs)))
}

#[allow(unused_variables)]
fn __action113<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Expr, usize),
) -> Expr
{
    __0
}

#[allow(unused_variables)]
fn __action114<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, lhs, _): (usize, Expr, usize),
    (_, op, _): (usize, Spanned<BinOp>, usize),
    (_, rhs, _): (usize, Expr, usize),
    (_, r, _): (usize, usize, usize),
) -> Expr
{
    Expr::new(l, r, ExprKind::BinOp(op, bx(lhs), bx(rhs)))
}

#[allow(unused_variables)]
fn __action115<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Expr, usize),
) -> Expr
{
    __0
}

#[allow(unused_variables)]
fn __action116<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, val, _): (usize, BinOp, usize),
    (_, r, _): (usize, usize, usize),
) -> Spanned<BinOp>
{
    Spanned::new(l, r, val)
}

#[allow(unused_variables)]
fn __action117<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Expr, usize),
) -> Expr
{
    __0
}

#[allow(unused_variables)]
fn __action118<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Expr, usize),
) -> Expr
{
    __0
}

#[allow(unused_variables)]
fn __action119<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Expr, usize),
) -> ::std::option::Option<Expr>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action120<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::option::Option<Expr>
{
    None
}

#[allow(unused_variables)]
fn __action121<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Token<'input>, usize),
) -> ::std::option::Option<Token<'input>>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action122<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::option::Option<Token<'input>>
{
    None
}

#[allow(unused_variables)]
fn __action123<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, (usize, Expr, usize), usize),
) -> ::std::option::Option<(usize, Expr, usize)>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action124<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::option::Option<(usize, Expr, usize)>
{
    None
}

#[allow(unused_variables)]
fn __action125<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, usize, usize),
    (_, __1, _): (usize, Expr, usize),
    (_, __2, _): (usize, usize, usize),
) -> (usize, Expr, usize)
{
    (__0, __1, __2)
}

#[allow(unused_variables)]
fn __action126<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::vec::Vec<Stmt>
{
    vec![]
}

#[allow(unused_variables)]
fn __action127<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, v, _): (usize, ::std::vec::Vec<Stmt>, usize),
) -> ::std::vec::Vec<Stmt>
{
    v
}

#[allow(unused_variables)]
fn __action128<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Vec<FnParam>, usize),
) -> Vec<FnParam>
{
    __0
}

#[allow(unused_variables)]
fn __action129<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Vec<BranchVariant>, usize),
) -> Vec<BranchVariant>
{
    __0
}

#[allow(unused_variables)]
fn __action130<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Type, usize),
) -> ::std::option::Option<Type>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action131<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::option::Option<Type>
{
    None
}

#[allow(unused_variables)]
fn __action132<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, _, _): (usize, Token<'input>, usize),
    (_, __0, _): (usize, Type, usize),
) -> Type
{
    __0
}

#[allow(unused_variables)]
fn __action133<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, (usize, usize), usize),
) -> ::std::option::Option<(usize, usize)>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action134<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::option::Option<(usize, usize)>
{
    None
}

#[allow(unused_variables)]
fn __action135<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, usize, usize),
    (_, _, _): (usize, Token<'input>, usize),
    (_, __1, _): (usize, usize, usize),
) -> (usize, usize)
{
    (__0, __1)
}

#[allow(unused_variables)]
fn __action136<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Vec<StructField>, usize),
) -> Vec<StructField>
{
    __0
}

#[allow(unused_variables)]
fn __action137<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::vec::Vec<Identifier>
{
    vec![]
}

#[allow(unused_variables)]
fn __action138<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, v, _): (usize, ::std::vec::Vec<Identifier>, usize),
) -> ::std::vec::Vec<Identifier>
{
    v
}

#[allow(unused_variables)]
fn __action139<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, _, _): (usize, Token<'input>, usize),
    (_, __0, _): (usize, Identifier, usize),
) -> Identifier
{
    __0
}

#[allow(unused_variables)]
fn __action140<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, (usize, usize), usize),
) -> ::std::option::Option<(usize, usize)>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action141<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::option::Option<(usize, usize)>
{
    None
}

#[allow(unused_variables)]
fn __action142<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, usize, usize),
    (_, _, _): (usize, Token<'input>, usize),
    (_, __1, _): (usize, usize, usize),
) -> (usize, usize)
{
    (__0, __1)
}

#[allow(unused_variables)]
fn __action143<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> usize
{
    __lookbehind.clone()
}

#[allow(unused_variables)]
fn __action144<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> usize
{
    __lookahead.clone()
}

#[allow(unused_variables)]
fn __action145<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::vec::Vec<Item>
{
    vec![]
}

#[allow(unused_variables)]
fn __action146<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, v, _): (usize, ::std::vec::Vec<Item>, usize),
) -> ::std::vec::Vec<Item>
{
    v
}

#[allow(unused_variables)]
fn __action147<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Item, usize),
) -> ::std::vec::Vec<Item>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action148<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, v, _): (usize, ::std::vec::Vec<Item>, usize),
    (_, e, _): (usize, Item, usize),
) -> ::std::vec::Vec<Item>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action149<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Identifier, usize),
) -> ::std::vec::Vec<Identifier>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action150<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, v, _): (usize, ::std::vec::Vec<Identifier>, usize),
    (_, e, _): (usize, Identifier, usize),
) -> ::std::vec::Vec<Identifier>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action151<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, v, _): (usize, ::std::vec::Vec<StructField>, usize),
    (_, e, _): (usize, ::std::option::Option<StructField>, usize),
) -> Vec<StructField>
{
    match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

#[allow(unused_variables)]
fn __action152<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, v, _): (usize, ::std::vec::Vec<BranchVariant>, usize),
    (_, e, _): (usize, ::std::option::Option<BranchVariant>, usize),
) -> Vec<BranchVariant>
{
    match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

#[allow(unused_variables)]
fn __action153<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, v, _): (usize, ::std::vec::Vec<FnParam>, usize),
    (_, e, _): (usize, ::std::option::Option<FnParam>, usize),
) -> Vec<FnParam>
{
    match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

#[allow(unused_variables)]
fn __action154<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Stmt, usize),
) -> ::std::vec::Vec<Stmt>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action155<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, v, _): (usize, ::std::vec::Vec<Stmt>, usize),
    (_, e, _): (usize, Stmt, usize),
) -> ::std::vec::Vec<Stmt>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action156<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, val, _): (usize, BinOp, usize),
    (_, r, _): (usize, usize, usize),
) -> Spanned<BinOp>
{
    Spanned::new(l, r, val)
}

#[allow(unused_variables)]
fn __action157<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, val, _): (usize, BinOp, usize),
    (_, r, _): (usize, usize, usize),
) -> Spanned<BinOp>
{
    Spanned::new(l, r, val)
}

#[allow(unused_variables)]
fn __action158<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, val, _): (usize, BinOp, usize),
    (_, r, _): (usize, usize, usize),
) -> Spanned<BinOp>
{
    Spanned::new(l, r, val)
}

#[allow(unused_variables)]
fn __action159<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, val, _): (usize, BinOp, usize),
    (_, r, _): (usize, usize, usize),
) -> Spanned<BinOp>
{
    Spanned::new(l, r, val)
}

#[allow(unused_variables)]
fn __action160<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, val, _): (usize, BinOp, usize),
    (_, r, _): (usize, usize, usize),
) -> Spanned<BinOp>
{
    Spanned::new(l, r, val)
}

#[allow(unused_variables)]
fn __action161<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, val, _): (usize, BinOp, usize),
    (_, r, _): (usize, usize, usize),
) -> Spanned<BinOp>
{
    Spanned::new(l, r, val)
}

#[allow(unused_variables)]
fn __action162<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, l, _): (usize, usize, usize),
    (_, val, _): (usize, UnOpKind, usize),
    (_, r, _): (usize, usize, usize),
) -> Spanned<UnOpKind>
{
    Spanned::new(l, r, val)
}

#[allow(unused_variables)]
fn __action163<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, v, _): (usize, ::std::vec::Vec<Expr>, usize),
    (_, e, _): (usize, ::std::option::Option<Expr>, usize),
) -> Vec<Expr>
{
    match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

#[allow(unused_variables)]
fn __action164<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::vec::Vec<Expr>
{
    vec![]
}

#[allow(unused_variables)]
fn __action165<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, v, _): (usize, ::std::vec::Vec<Expr>, usize),
) -> ::std::vec::Vec<Expr>
{
    v
}

#[allow(unused_variables)]
fn __action166<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, _, _): (usize, Token<'input>, usize),
    (_, __0, _): (usize, Expr, usize),
) -> Expr
{
    __0
}

#[allow(unused_variables)]
fn __action167<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Type, usize),
) -> ::std::option::Option<Type>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action168<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::option::Option<Type>
{
    None
}

#[allow(unused_variables)]
fn __action169<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::vec::Vec<Type>
{
    vec![]
}

#[allow(unused_variables)]
fn __action170<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, v, _): (usize, ::std::vec::Vec<Type>, usize),
) -> ::std::vec::Vec<Type>
{
    v
}

#[allow(unused_variables)]
fn __action171<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Type, usize),
    (_, _, _): (usize, Token<'input>, usize),
) -> Type
{
    __0
}

#[allow(unused_variables)]
fn __action172<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::vec::Vec<Path>
{
    vec![]
}

#[allow(unused_variables)]
fn __action173<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, v, _): (usize, ::std::vec::Vec<Path>, usize),
) -> ::std::vec::Vec<Path>
{
    v
}

#[allow(unused_variables)]
fn __action174<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, _, _): (usize, Token<'input>, usize),
    (_, __0, _): (usize, Path, usize),
) -> Path
{
    __0
}

#[allow(unused_variables)]
fn __action175<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Path, usize),
) -> ::std::vec::Vec<Path>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action176<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, v, _): (usize, ::std::vec::Vec<Path>, usize),
    (_, e, _): (usize, Path, usize),
) -> ::std::vec::Vec<Path>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action177<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Type, usize),
) -> ::std::vec::Vec<Type>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action178<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, v, _): (usize, ::std::vec::Vec<Type>, usize),
    (_, e, _): (usize, Type, usize),
) -> ::std::vec::Vec<Type>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action179<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Expr, usize),
) -> ::std::vec::Vec<Expr>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action180<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, v, _): (usize, ::std::vec::Vec<Expr>, usize),
    (_, e, _): (usize, Expr, usize),
) -> ::std::vec::Vec<Expr>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action181<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::vec::Vec<Expr>
{
    vec![]
}

#[allow(unused_variables)]
fn __action182<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, v, _): (usize, ::std::vec::Vec<Expr>, usize),
) -> ::std::vec::Vec<Expr>
{
    v
}

#[allow(unused_variables)]
fn __action183<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Expr, usize),
    (_, _, _): (usize, Token<'input>, usize),
) -> Expr
{
    __0
}

#[allow(unused_variables)]
fn __action184<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, FnParam, usize),
) -> ::std::option::Option<FnParam>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action185<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::option::Option<FnParam>
{
    None
}

#[allow(unused_variables)]
fn __action186<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::vec::Vec<FnParam>
{
    vec![]
}

#[allow(unused_variables)]
fn __action187<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, v, _): (usize, ::std::vec::Vec<FnParam>, usize),
) -> ::std::vec::Vec<FnParam>
{
    v
}

#[allow(unused_variables)]
fn __action188<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, FnParam, usize),
    (_, _, _): (usize, Token<'input>, usize),
) -> FnParam
{
    __0
}

#[allow(unused_variables)]
fn __action189<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, BranchVariant, usize),
) -> ::std::option::Option<BranchVariant>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action190<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::option::Option<BranchVariant>
{
    None
}

#[allow(unused_variables)]
fn __action191<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::vec::Vec<BranchVariant>
{
    vec![]
}

#[allow(unused_variables)]
fn __action192<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, v, _): (usize, ::std::vec::Vec<BranchVariant>, usize),
) -> ::std::vec::Vec<BranchVariant>
{
    v
}

#[allow(unused_variables)]
fn __action193<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, BranchVariant, usize),
    (_, _, _): (usize, Token<'input>, usize),
) -> BranchVariant
{
    __0
}

#[allow(unused_variables)]
fn __action194<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, StructField, usize),
) -> ::std::option::Option<StructField>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action195<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::option::Option<StructField>
{
    None
}

#[allow(unused_variables)]
fn __action196<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::vec::Vec<StructField>
{
    vec![]
}

#[allow(unused_variables)]
fn __action197<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, v, _): (usize, ::std::vec::Vec<StructField>, usize),
) -> ::std::vec::Vec<StructField>
{
    v
}

#[allow(unused_variables)]
fn __action198<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, StructField, usize),
    (_, _, _): (usize, Token<'input>, usize),
) -> StructField
{
    __0
}

#[allow(unused_variables)]
fn __action199<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, StructField, usize),
) -> ::std::vec::Vec<StructField>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action200<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, v, _): (usize, ::std::vec::Vec<StructField>, usize),
    (_, e, _): (usize, StructField, usize),
) -> ::std::vec::Vec<StructField>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action201<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, BranchVariant, usize),
) -> ::std::vec::Vec<BranchVariant>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action202<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, v, _): (usize, ::std::vec::Vec<BranchVariant>, usize),
    (_, e, _): (usize, BranchVariant, usize),
) -> ::std::vec::Vec<BranchVariant>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action203<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, FnParam, usize),
) -> ::std::vec::Vec<FnParam>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action204<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, v, _): (usize, ::std::vec::Vec<FnParam>, usize),
    (_, e, _): (usize, FnParam, usize),
) -> ::std::vec::Vec<FnParam>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action205<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, __0, _): (usize, Expr, usize),
) -> ::std::vec::Vec<Expr>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action206<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    (_, v, _): (usize, ::std::vec::Vec<Expr>, usize),
    (_, e, _): (usize, Expr, usize),
) -> ::std::vec::Vec<Expr>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action207<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
) -> Option<Expr>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action121(
        input,
        intr,
        errs,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action25(
        input,
        intr,
        errs,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action208<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Option<Expr>
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action122(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action25(
        input,
        intr,
        errs,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action209<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Token<'input>, usize),
    __3: (usize, usize, usize),
) -> Stmt
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action121(
        input,
        intr,
        errs,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action30(
        input,
        intr,
        errs,
        __0,
        __1,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
fn __action210<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, usize, usize),
) -> Stmt
{
    let __start0 = __1.2.clone();
    let __end0 = __2.0.clone();
    let __temp0 = __action122(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action30(
        input,
        intr,
        errs,
        __0,
        __1,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
fn __action211<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Expr, usize),
    __2: (usize, Token<'input>, usize),
    __3: (usize, usize, usize),
) -> Stmt
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action121(
        input,
        intr,
        errs,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action32(
        input,
        intr,
        errs,
        __0,
        __1,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
fn __action212<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Expr, usize),
    __2: (usize, usize, usize),
) -> Stmt
{
    let __start0 = __1.2.clone();
    let __end0 = __2.0.clone();
    let __temp0 = __action122(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action32(
        input,
        intr,
        errs,
        __0,
        __1,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
fn __action213<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, Path, usize),
) -> ::std::vec::Vec<Path>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action174(
        input,
        intr,
        errs,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action175(
        input,
        intr,
        errs,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action214<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, ::std::vec::Vec<Path>, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Path, usize),
) -> ::std::vec::Vec<Path>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action174(
        input,
        intr,
        errs,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action176(
        input,
        intr,
        errs,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action215<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Path, usize),
) -> Vec<Path>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action172(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action94(
        input,
        intr,
        errs,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action216<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Path, usize),
    __1: (usize, ::std::vec::Vec<Path>, usize),
) -> Vec<Path>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action173(
        input,
        intr,
        errs,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action94(
        input,
        intr,
        errs,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action217<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, Expr, usize),
) -> ::std::vec::Vec<Expr>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action166(
        input,
        intr,
        errs,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action179(
        input,
        intr,
        errs,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action218<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, ::std::vec::Vec<Expr>, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Expr, usize),
) -> ::std::vec::Vec<Expr>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action166(
        input,
        intr,
        errs,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action180(
        input,
        intr,
        errs,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action219<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Expr, usize),
) -> Vec<Expr>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action164(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action96(
        input,
        intr,
        errs,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action220<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Expr, usize),
    __1: (usize, ::std::vec::Vec<Expr>, usize),
) -> Vec<Expr>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action165(
        input,
        intr,
        errs,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action96(
        input,
        intr,
        errs,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action221<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, Type, usize),
) -> ::std::option::Option<Type>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action132(
        input,
        intr,
        errs,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action130(
        input,
        intr,
        errs,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action222<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Visibility, usize),
    __2: (usize, Token<'input>, usize),
    __3: (usize, Identifier, usize),
    __4: (usize, Token<'input>, usize),
    __5: (usize, Type, usize),
    __6: (usize, Token<'input>, usize),
    __7: (usize, Vec<BranchVariant>, usize),
    __8: (usize, Token<'input>, usize),
    __9: (usize, usize, usize),
) -> Item
{
    let __start0 = __4.0.clone();
    let __end0 = __5.2.clone();
    let __temp0 = __action221(
        input,
        intr,
        errs,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action15(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __6,
        __7,
        __8,
        __9,
    )
}

#[allow(unused_variables)]
fn __action223<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Visibility, usize),
    __2: (usize, Token<'input>, usize),
    __3: (usize, Identifier, usize),
    __4: (usize, Token<'input>, usize),
    __5: (usize, Vec<BranchVariant>, usize),
    __6: (usize, Token<'input>, usize),
    __7: (usize, usize, usize),
) -> Item
{
    let __start0 = __3.2.clone();
    let __end0 = __4.0.clone();
    let __temp0 = __action131(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action15(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
fn __action224<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Visibility, usize),
    __2: (usize, ::std::option::Option<(usize, usize)>, usize),
    __3: (usize, Token<'input>, usize),
    __4: (usize, Identifier, usize),
    __5: (usize, Token<'input>, usize),
    __6: (usize, Type, usize),
    __7: (usize, Token<'input>, usize),
    __8: (usize, Vec<StructField>, usize),
    __9: (usize, Token<'input>, usize),
    __10: (usize, usize, usize),
) -> Item
{
    let __start0 = __5.0.clone();
    let __end0 = __6.2.clone();
    let __temp0 = __action221(
        input,
        intr,
        errs,
        __5,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action14(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __7,
        __8,
        __9,
        __10,
    )
}

#[allow(unused_variables)]
fn __action225<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Visibility, usize),
    __2: (usize, ::std::option::Option<(usize, usize)>, usize),
    __3: (usize, Token<'input>, usize),
    __4: (usize, Identifier, usize),
    __5: (usize, Token<'input>, usize),
    __6: (usize, Vec<StructField>, usize),
    __7: (usize, Token<'input>, usize),
    __8: (usize, usize, usize),
) -> Item
{
    let __start0 = __4.2.clone();
    let __end0 = __5.0.clone();
    let __temp0 = __action131(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action14(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __5,
        __6,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
fn __action226<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Visibility, usize),
    __2: (usize, Token<'input>, usize),
    __3: (usize, Identifier, usize),
    __4: (usize, Token<'input>, usize),
    __5: (usize, Vec<FnParam>, usize),
    __6: (usize, Token<'input>, usize),
    __7: (usize, Token<'input>, usize),
    __8: (usize, Type, usize),
    __9: (usize, Option<Block>, usize),
    __10: (usize, usize, usize),
) -> Item
{
    let __start0 = __7.0.clone();
    let __end0 = __8.2.clone();
    let __temp0 = __action221(
        input,
        intr,
        errs,
        __7,
        __8,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action19(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __temp0,
        __9,
        __10,
    )
}

#[allow(unused_variables)]
fn __action227<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Visibility, usize),
    __2: (usize, Token<'input>, usize),
    __3: (usize, Identifier, usize),
    __4: (usize, Token<'input>, usize),
    __5: (usize, Vec<FnParam>, usize),
    __6: (usize, Token<'input>, usize),
    __7: (usize, Option<Block>, usize),
    __8: (usize, usize, usize),
) -> Item
{
    let __start0 = __6.2.clone();
    let __end0 = __7.0.clone();
    let __temp0 = __action131(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action19(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __temp0,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
fn __action228<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Identifier, usize),
    __3: (usize, Token<'input>, usize),
    __4: (usize, Type, usize),
    __5: (usize, Token<'input>, usize),
    __6: (usize, Expr, usize),
    __7: (usize, Token<'input>, usize),
    __8: (usize, usize, usize),
) -> Stmt
{
    let __start0 = __3.0.clone();
    let __end0 = __4.2.clone();
    let __temp0 = __action221(
        input,
        intr,
        errs,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action27(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __temp0,
        __5,
        __6,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
fn __action229<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Identifier, usize),
    __3: (usize, Token<'input>, usize),
    __4: (usize, Expr, usize),
    __5: (usize, Token<'input>, usize),
    __6: (usize, usize, usize),
) -> Stmt
{
    let __start0 = __2.2.clone();
    let __end0 = __3.0.clone();
    let __temp0 = __action131(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action27(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __temp0,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
fn __action230<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Visibility, usize),
    __1: (usize, Identifier, usize),
    __2: (usize, usize, usize),
    __3: (usize, Token<'input>, usize),
    __4: (usize, Type, usize),
    __5: (usize, usize, usize),
    __6: (usize, Token<'input>, usize),
    __7: (usize, Expr, usize),
) -> StructField
{
    let __start0 = __3.0.clone();
    let __end0 = __4.2.clone();
    let __temp0 = __action221(
        input,
        intr,
        errs,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action18(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __temp0,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
fn __action231<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Visibility, usize),
    __1: (usize, Identifier, usize),
    __2: (usize, usize, usize),
    __3: (usize, usize, usize),
    __4: (usize, Token<'input>, usize),
    __5: (usize, Expr, usize),
) -> StructField
{
    let __start0 = __2.2.clone();
    let __end0 = __3.0.clone();
    let __temp0 = __action131(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action18(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __temp0,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
fn __action232<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, Identifier, usize),
) -> ::std::vec::Vec<Identifier>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action139(
        input,
        intr,
        errs,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action149(
        input,
        intr,
        errs,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action233<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, ::std::vec::Vec<Identifier>, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Identifier, usize),
) -> ::std::vec::Vec<Identifier>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action139(
        input,
        intr,
        errs,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action150(
        input,
        intr,
        errs,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action234<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Identifier, usize),
) -> Path
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action137(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action4(
        input,
        intr,
        errs,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action235<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Identifier, usize),
    __1: (usize, ::std::vec::Vec<Identifier>, usize),
) -> Path
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action138(
        input,
        intr,
        errs,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action4(
        input,
        intr,
        errs,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action236<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, Path, usize),
) -> ::std::option::Option<Path>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action99(
        input,
        intr,
        errs,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action97(
        input,
        intr,
        errs,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action237<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Expr, usize),
    __2: (usize, Token<'input>, usize),
    __3: (usize, Path, usize),
    __4: (usize, Token<'input>, usize),
    __5: (usize, Identifier, usize),
    __6: (usize, usize, usize),
) -> Expr
{
    let __start0 = __2.0.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action236(
        input,
        intr,
        errs,
        __2,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action83(
        input,
        intr,
        errs,
        __0,
        __1,
        __temp0,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
fn __action238<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Expr, usize),
    __2: (usize, Token<'input>, usize),
    __3: (usize, Identifier, usize),
    __4: (usize, usize, usize),
) -> Expr
{
    let __start0 = __1.2.clone();
    let __end0 = __2.0.clone();
    let __temp0 = __action98(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action83(
        input,
        intr,
        errs,
        __0,
        __1,
        __temp0,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action239<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Token<'input>, usize),
) -> (usize, usize)
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action135(
        input,
        intr,
        errs,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action240<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Token<'input>, usize),
) -> (usize, usize)
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action142(
        input,
        intr,
        errs,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action241<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Expr, usize),
) -> (usize, Expr, usize)
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action125(
        input,
        intr,
        errs,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action242<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Expr, usize),
    __2: (usize, Spanned<BinOp>, usize),
    __3: (usize, Expr, usize),
) -> Expr
{
    let __start0 = __3.2.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action103(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action243<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Expr, usize),
    __2: (usize, Spanned<BinOp>, usize),
    __3: (usize, Expr, usize),
) -> Expr
{
    let __start0 = __3.2.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action105(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action244<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Expr, usize),
    __2: (usize, Spanned<BinOp>, usize),
    __3: (usize, Expr, usize),
) -> Expr
{
    let __start0 = __3.2.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action108(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action245<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Expr, usize),
    __2: (usize, Spanned<BinOp>, usize),
    __3: (usize, Expr, usize),
) -> Expr
{
    let __start0 = __3.2.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action110(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action246<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Expr, usize),
    __2: (usize, Spanned<BinOp>, usize),
    __3: (usize, Expr, usize),
) -> Expr
{
    let __start0 = __3.2.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action112(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action247<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Expr, usize),
    __2: (usize, Spanned<BinOp>, usize),
    __3: (usize, Expr, usize),
) -> Expr
{
    let __start0 = __3.2.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action114(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action248<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, ::std::vec::Vec<Stmt>, usize),
    __3: (usize, ::std::option::Option<(usize, Expr, usize)>, usize),
    __4: (usize, Token<'input>, usize),
) -> Block
{
    let __start0 = __4.2.clone();
    let __end0 = __4.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action21(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action249<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Block, usize),
) -> Expr
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action38(
        input,
        intr,
        errs,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action250<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Visibility, usize),
    __2: (usize, Token<'input>, usize),
    __3: (usize, Identifier, usize),
    __4: (usize, Token<'input>, usize),
    __5: (usize, Type, usize),
    __6: (usize, Token<'input>, usize),
    __7: (usize, Vec<BranchVariant>, usize),
    __8: (usize, Token<'input>, usize),
) -> Item
{
    let __start0 = __8.2.clone();
    let __end0 = __8.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action222(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action251<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Visibility, usize),
    __2: (usize, Token<'input>, usize),
    __3: (usize, Identifier, usize),
    __4: (usize, Token<'input>, usize),
    __5: (usize, Vec<BranchVariant>, usize),
    __6: (usize, Token<'input>, usize),
) -> Item
{
    let __start0 = __6.2.clone();
    let __end0 = __6.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action223(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action252<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Identifier, usize),
    __2: (usize, Token<'input>, usize),
    __3: (usize, Vec<StructField>, usize),
    __4: (usize, Token<'input>, usize),
) -> BranchVariant
{
    let __start0 = __4.2.clone();
    let __end0 = __4.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action16(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action253<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Path, usize),
    __2: (usize, Token<'input>, usize),
    __3: (usize, Vec<Expr>, usize),
    __4: (usize, Token<'input>, usize),
) -> Expr
{
    let __start0 = __4.2.clone();
    let __end0 = __4.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action80(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action254<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Visibility, usize),
    __2: (usize, ::std::option::Option<(usize, usize)>, usize),
    __3: (usize, Token<'input>, usize),
    __4: (usize, Identifier, usize),
    __5: (usize, Token<'input>, usize),
    __6: (usize, Type, usize),
    __7: (usize, Token<'input>, usize),
    __8: (usize, Vec<StructField>, usize),
    __9: (usize, Token<'input>, usize),
) -> Item
{
    let __start0 = __9.2.clone();
    let __end0 = __9.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action224(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
        __9,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action255<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Visibility, usize),
    __2: (usize, ::std::option::Option<(usize, usize)>, usize),
    __3: (usize, Token<'input>, usize),
    __4: (usize, Identifier, usize),
    __5: (usize, Token<'input>, usize),
    __6: (usize, Vec<StructField>, usize),
    __7: (usize, Token<'input>, usize),
) -> Item
{
    let __start0 = __7.2.clone();
    let __end0 = __7.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action225(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action256<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Lit, usize),
) -> Expr
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action81(
        input,
        intr,
        errs,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action257<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Identifier, usize),
) -> Expr
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action82(
        input,
        intr,
        errs,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action258<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Expr, usize),
    __2: (usize, Token<'input>, usize),
    __3: (usize, Path, usize),
    __4: (usize, Token<'input>, usize),
    __5: (usize, Identifier, usize),
) -> Expr
{
    let __start0 = __5.2.clone();
    let __end0 = __5.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action237(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action259<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Expr, usize),
    __2: (usize, Token<'input>, usize),
    __3: (usize, Identifier, usize),
) -> Expr
{
    let __start0 = __3.2.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action238(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action260<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Vec<Expr>, usize),
    __3: (usize, Token<'input>, usize),
) -> Expr
{
    let __start0 = __3.2.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action85(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action261<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, __lalrpop_util::ErrorRecovery<usize, Token<'input>, ParserError>, usize),
) -> Expr
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action86(
        input,
        intr,
        errs,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action262<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Expr, usize),
    __2: (usize, usize, usize),
    __3: (usize, Token<'input>, usize),
    __4: (usize, Expr, usize),
) -> Expr
{
    let __start0 = __3.2.clone();
    let __end0 = __4.0.clone();
    let __start1 = __4.2.clone();
    let __end1 = __4.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action143(
        input,
        intr,
        errs,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action44(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __4,
        __temp1,
    )
}

#[allow(unused_variables)]
fn __action263<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Expr, usize),
    __2: (usize, Spanned<BinOp>, usize),
    __3: (usize, Expr, usize),
) -> Expr
{
    let __start0 = __3.2.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action45(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action264<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Expr, usize),
    __2: (usize, Spanned<IsOpKind>, usize),
    __3: (usize, Type, usize),
) -> Expr
{
    let __start0 = __3.2.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action66(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action265<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Visibility, usize),
    __2: (usize, Token<'input>, usize),
    __3: (usize, Identifier, usize),
    __4: (usize, Token<'input>, usize),
    __5: (usize, Vec<FnParam>, usize),
    __6: (usize, Token<'input>, usize),
    __7: (usize, Token<'input>, usize),
    __8: (usize, Type, usize),
    __9: (usize, Option<Block>, usize),
) -> Item
{
    let __start0 = __9.2.clone();
    let __end0 = __9.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action226(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
        __9,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action266<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Visibility, usize),
    __2: (usize, Token<'input>, usize),
    __3: (usize, Identifier, usize),
    __4: (usize, Token<'input>, usize),
    __5: (usize, Vec<FnParam>, usize),
    __6: (usize, Token<'input>, usize),
    __7: (usize, Option<Block>, usize),
) -> Item
{
    let __start0 = __7.2.clone();
    let __end0 = __7.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action227(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action267<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
) -> Identifier
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action3(
        input,
        intr,
        errs,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action268<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Expr, usize),
    __3: (usize, Block, usize),
) -> Expr
{
    let __start0 = __3.2.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action39(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action269<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Expr, usize),
    __3: (usize, Block, usize),
    __4: (usize, Token<'input>, usize),
    __5: (usize, Expr, usize),
) -> Expr
{
    let __start0 = __5.2.clone();
    let __end0 = __5.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action40(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action270<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, &'input str, usize),
) -> Lit
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action90(
        input,
        intr,
        errs,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action271<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Block, usize),
) -> Expr
{
    let __start0 = __2.2.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action41(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action272<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Expr, usize),
    __3: (usize, Block, usize),
) -> Expr
{
    let __start0 = __3.2.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action42(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action273<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Visibility, usize),
    __2: (usize, Token<'input>, usize),
    __3: (usize, Identifier, usize),
    __4: (usize, Vec<Item>, usize),
) -> Item
{
    let __start0 = __4.2.clone();
    let __end0 = __4.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action12(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action274<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, IsOpKind, usize),
) -> Spanned<IsOpKind>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action107(
        input,
        intr,
        errs,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action275<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, UnOpKind, usize),
) -> Spanned<UnOpKind>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action162(
        input,
        intr,
        errs,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action276<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, BinOp, usize),
) -> Spanned<BinOp>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action161(
        input,
        intr,
        errs,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action277<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, BinOp, usize),
) -> Spanned<BinOp>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action160(
        input,
        intr,
        errs,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action278<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, BinOp, usize),
) -> Spanned<BinOp>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action159(
        input,
        intr,
        errs,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action279<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, BinOp, usize),
) -> Spanned<BinOp>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action158(
        input,
        intr,
        errs,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action280<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, BinOp, usize),
) -> Spanned<BinOp>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action157(
        input,
        intr,
        errs,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action281<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, BinOp, usize),
) -> Spanned<BinOp>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action116(
        input,
        intr,
        errs,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action282<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, BinOp, usize),
) -> Spanned<BinOp>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action156(
        input,
        intr,
        errs,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action283<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Item, usize),
) -> Stmt
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action26(
        input,
        intr,
        errs,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action284<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Identifier, usize),
    __3: (usize, Token<'input>, usize),
    __4: (usize, Type, usize),
    __5: (usize, Token<'input>, usize),
    __6: (usize, Expr, usize),
    __7: (usize, Token<'input>, usize),
) -> Stmt
{
    let __start0 = __7.2.clone();
    let __end0 = __7.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action228(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action285<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Identifier, usize),
    __3: (usize, Token<'input>, usize),
    __4: (usize, Expr, usize),
    __5: (usize, Token<'input>, usize),
) -> Stmt
{
    let __start0 = __5.2.clone();
    let __end0 = __5.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action229(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action286<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, ::std::option::Option<Expr>, usize),
    __3: (usize, Token<'input>, usize),
) -> Stmt
{
    let __start0 = __3.2.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action28(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action287<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, ::std::option::Option<Expr>, usize),
    __3: (usize, Token<'input>, usize),
) -> Stmt
{
    let __start0 = __3.2.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action29(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action288<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Token<'input>, usize),
) -> Stmt
{
    let __start0 = __2.2.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action209(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action289<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Token<'input>, usize),
) -> Stmt
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action210(
        input,
        intr,
        errs,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action290<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Expr, usize),
    __2: (usize, Token<'input>, usize),
) -> Stmt
{
    let __start0 = __2.2.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action31(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action291<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Expr, usize),
    __2: (usize, Token<'input>, usize),
) -> Stmt
{
    let __start0 = __2.2.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action211(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action292<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Expr, usize),
) -> Stmt
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action212(
        input,
        intr,
        errs,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action293<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Visibility, usize),
    __2: (usize, Token<'input>, usize),
    __3: (usize, Identifier, usize),
    __4: (usize, Token<'input>, usize),
    __5: (usize, Vec<StructField>, usize),
    __6: (usize, Token<'input>, usize),
) -> Item
{
    let __start0 = __6.2.clone();
    let __end0 = __6.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action13(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action294<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Visibility, usize),
    __1: (usize, Identifier, usize),
    __2: (usize, usize, usize),
    __3: (usize, Token<'input>, usize),
    __4: (usize, Type, usize),
    __5: (usize, Token<'input>, usize),
    __6: (usize, Expr, usize),
) -> StructField
{
    let __start0 = __4.2.clone();
    let __end0 = __5.0.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action230(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
fn __action295<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Visibility, usize),
    __1: (usize, Identifier, usize),
    __2: (usize, usize, usize),
    __3: (usize, Token<'input>, usize),
    __4: (usize, Expr, usize),
) -> StructField
{
    let __start0 = __2.2.clone();
    let __end0 = __3.0.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action231(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __temp0,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action296<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Vec<Type>, usize),
    __3: (usize, Token<'input>, usize),
) -> Type
{
    let __start0 = __3.2.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action91(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action297<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Vec<Path>, usize),
) -> Type
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action92(
        input,
        intr,
        errs,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action298<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, __lalrpop_util::ErrorRecovery<usize, Token<'input>, ParserError>, usize),
) -> Type
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action93(
        input,
        intr,
        errs,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action299<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, usize, usize),
    __1: (usize, Spanned<UnOpKind>, usize),
    __2: (usize, Expr, usize),
) -> Expr
{
    let __start0 = __2.2.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action143(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action101(
        input,
        intr,
        errs,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action300<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
) -> (usize, usize)
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action239(
        input,
        intr,
        errs,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action301<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
) -> (usize, usize)
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action240(
        input,
        intr,
        errs,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action302<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Expr, usize),
) -> (usize, Expr, usize)
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action241(
        input,
        intr,
        errs,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action303<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Expr, usize),
    __1: (usize, Spanned<BinOp>, usize),
    __2: (usize, Expr, usize),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action242(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action304<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Expr, usize),
    __1: (usize, Spanned<BinOp>, usize),
    __2: (usize, Expr, usize),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action243(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action305<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Expr, usize),
    __1: (usize, Spanned<BinOp>, usize),
    __2: (usize, Expr, usize),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action244(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action306<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Expr, usize),
    __1: (usize, Spanned<BinOp>, usize),
    __2: (usize, Expr, usize),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action245(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action307<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Expr, usize),
    __1: (usize, Spanned<BinOp>, usize),
    __2: (usize, Expr, usize),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action246(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action308<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Expr, usize),
    __1: (usize, Spanned<BinOp>, usize),
    __2: (usize, Expr, usize),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action247(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action309<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, ::std::vec::Vec<Stmt>, usize),
    __2: (usize, ::std::option::Option<(usize, Expr, usize)>, usize),
    __3: (usize, Token<'input>, usize),
) -> Block
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action248(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action310<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Block, usize),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action249(
        input,
        intr,
        errs,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action311<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Visibility, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Identifier, usize),
    __3: (usize, Token<'input>, usize),
    __4: (usize, Type, usize),
    __5: (usize, Token<'input>, usize),
    __6: (usize, Vec<BranchVariant>, usize),
    __7: (usize, Token<'input>, usize),
) -> Item
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action250(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
fn __action312<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Visibility, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Identifier, usize),
    __3: (usize, Token<'input>, usize),
    __4: (usize, Vec<BranchVariant>, usize),
    __5: (usize, Token<'input>, usize),
) -> Item
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action251(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
fn __action313<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Identifier, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Vec<StructField>, usize),
    __3: (usize, Token<'input>, usize),
) -> BranchVariant
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action252(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action314<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Path, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Vec<Expr>, usize),
    __3: (usize, Token<'input>, usize),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action253(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action315<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Visibility, usize),
    __1: (usize, ::std::option::Option<(usize, usize)>, usize),
    __2: (usize, Token<'input>, usize),
    __3: (usize, Identifier, usize),
    __4: (usize, Token<'input>, usize),
    __5: (usize, Type, usize),
    __6: (usize, Token<'input>, usize),
    __7: (usize, Vec<StructField>, usize),
    __8: (usize, Token<'input>, usize),
) -> Item
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action254(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
fn __action316<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Visibility, usize),
    __1: (usize, ::std::option::Option<(usize, usize)>, usize),
    __2: (usize, Token<'input>, usize),
    __3: (usize, Identifier, usize),
    __4: (usize, Token<'input>, usize),
    __5: (usize, Vec<StructField>, usize),
    __6: (usize, Token<'input>, usize),
) -> Item
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action255(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
fn __action317<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Lit, usize),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action256(
        input,
        intr,
        errs,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action318<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Identifier, usize),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action257(
        input,
        intr,
        errs,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action319<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Expr, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Path, usize),
    __3: (usize, Token<'input>, usize),
    __4: (usize, Identifier, usize),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action258(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action320<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Expr, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Identifier, usize),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action259(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action321<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, Vec<Expr>, usize),
    __2: (usize, Token<'input>, usize),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action260(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action322<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, __lalrpop_util::ErrorRecovery<usize, Token<'input>, ParserError>, usize),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action261(
        input,
        intr,
        errs,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action323<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Expr, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Expr, usize),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __start1 = __0.2.clone();
    let __end1 = __1.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action144(
        input,
        intr,
        errs,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action262(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __temp1,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action324<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Expr, usize),
    __1: (usize, Spanned<BinOp>, usize),
    __2: (usize, Expr, usize),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action263(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action325<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Expr, usize),
    __1: (usize, Spanned<IsOpKind>, usize),
    __2: (usize, Type, usize),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action264(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action326<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Visibility, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Identifier, usize),
    __3: (usize, Token<'input>, usize),
    __4: (usize, Vec<FnParam>, usize),
    __5: (usize, Token<'input>, usize),
    __6: (usize, Token<'input>, usize),
    __7: (usize, Type, usize),
    __8: (usize, Option<Block>, usize),
) -> Item
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action265(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
fn __action327<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Visibility, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Identifier, usize),
    __3: (usize, Token<'input>, usize),
    __4: (usize, Vec<FnParam>, usize),
    __5: (usize, Token<'input>, usize),
    __6: (usize, Option<Block>, usize),
) -> Item
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action266(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
fn __action328<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, &'input str, usize),
) -> Identifier
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action267(
        input,
        intr,
        errs,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action329<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, Expr, usize),
    __2: (usize, Block, usize),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action268(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action330<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, Expr, usize),
    __2: (usize, Block, usize),
    __3: (usize, Token<'input>, usize),
    __4: (usize, Expr, usize),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action269(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action331<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, &'input str, usize),
) -> Lit
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action270(
        input,
        intr,
        errs,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action332<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, Block, usize),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action271(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action333<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, Expr, usize),
    __2: (usize, Block, usize),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action272(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action334<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Visibility, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Identifier, usize),
    __3: (usize, Vec<Item>, usize),
) -> Item
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action273(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action335<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, IsOpKind, usize),
) -> Spanned<IsOpKind>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action274(
        input,
        intr,
        errs,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action336<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, UnOpKind, usize),
) -> Spanned<UnOpKind>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action275(
        input,
        intr,
        errs,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action337<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, BinOp, usize),
) -> Spanned<BinOp>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action276(
        input,
        intr,
        errs,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action338<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, BinOp, usize),
) -> Spanned<BinOp>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action277(
        input,
        intr,
        errs,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action339<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, BinOp, usize),
) -> Spanned<BinOp>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action278(
        input,
        intr,
        errs,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action340<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, BinOp, usize),
) -> Spanned<BinOp>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action279(
        input,
        intr,
        errs,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action341<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, BinOp, usize),
) -> Spanned<BinOp>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action280(
        input,
        intr,
        errs,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action342<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, BinOp, usize),
) -> Spanned<BinOp>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action281(
        input,
        intr,
        errs,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action343<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, BinOp, usize),
) -> Spanned<BinOp>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action282(
        input,
        intr,
        errs,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action344<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Item, usize),
) -> Stmt
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action283(
        input,
        intr,
        errs,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action345<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, Identifier, usize),
    __2: (usize, Token<'input>, usize),
    __3: (usize, Type, usize),
    __4: (usize, Token<'input>, usize),
    __5: (usize, Expr, usize),
    __6: (usize, Token<'input>, usize),
) -> Stmt
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action284(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
fn __action346<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, Identifier, usize),
    __2: (usize, Token<'input>, usize),
    __3: (usize, Expr, usize),
    __4: (usize, Token<'input>, usize),
) -> Stmt
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action285(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action347<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, ::std::option::Option<Expr>, usize),
    __2: (usize, Token<'input>, usize),
) -> Stmt
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action286(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action348<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, ::std::option::Option<Expr>, usize),
    __2: (usize, Token<'input>, usize),
) -> Stmt
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action287(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action349<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, Token<'input>, usize),
) -> Stmt
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action288(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action350<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
) -> Stmt
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action289(
        input,
        intr,
        errs,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action351<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Expr, usize),
    __1: (usize, Token<'input>, usize),
) -> Stmt
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action290(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action352<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Expr, usize),
    __1: (usize, Token<'input>, usize),
) -> Stmt
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action291(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action353<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Expr, usize),
) -> Stmt
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action292(
        input,
        intr,
        errs,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action354<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Visibility, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Identifier, usize),
    __3: (usize, Token<'input>, usize),
    __4: (usize, Vec<StructField>, usize),
    __5: (usize, Token<'input>, usize),
) -> Item
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action293(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
fn __action355<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Visibility, usize),
    __1: (usize, Identifier, usize),
    __2: (usize, Token<'input>, usize),
    __3: (usize, Type, usize),
    __4: (usize, Token<'input>, usize),
    __5: (usize, Expr, usize),
) -> StructField
{
    let __start0 = __1.2.clone();
    let __end0 = __2.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action294(
        input,
        intr,
        errs,
        __0,
        __1,
        __temp0,
        __2,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
fn __action356<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Visibility, usize),
    __1: (usize, Identifier, usize),
    __2: (usize, Token<'input>, usize),
    __3: (usize, Expr, usize),
) -> StructField
{
    let __start0 = __1.2.clone();
    let __end0 = __2.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action295(
        input,
        intr,
        errs,
        __0,
        __1,
        __temp0,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action357<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, Vec<Type>, usize),
    __2: (usize, Token<'input>, usize),
) -> Type
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action296(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action358<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Vec<Path>, usize),
) -> Type
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action297(
        input,
        intr,
        errs,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action359<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, __lalrpop_util::ErrorRecovery<usize, Token<'input>, ParserError>, usize),
) -> Type
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action298(
        input,
        intr,
        errs,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action360<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Spanned<UnOpKind>, usize),
    __1: (usize, Expr, usize),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action144(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action299(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action361<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
) -> ::std::option::Option<(usize, usize)>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action300(
        input,
        intr,
        errs,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action133(
        input,
        intr,
        errs,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action362<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Visibility, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Token<'input>, usize),
    __3: (usize, Identifier, usize),
    __4: (usize, Token<'input>, usize),
    __5: (usize, Type, usize),
    __6: (usize, Token<'input>, usize),
    __7: (usize, Vec<StructField>, usize),
    __8: (usize, Token<'input>, usize),
) -> Item
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action361(
        input,
        intr,
        errs,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action315(
        input,
        intr,
        errs,
        __0,
        __temp0,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
fn __action363<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Visibility, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Identifier, usize),
    __3: (usize, Token<'input>, usize),
    __4: (usize, Type, usize),
    __5: (usize, Token<'input>, usize),
    __6: (usize, Vec<StructField>, usize),
    __7: (usize, Token<'input>, usize),
) -> Item
{
    let __start0 = __0.2.clone();
    let __end0 = __1.0.clone();
    let __temp0 = __action134(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action315(
        input,
        intr,
        errs,
        __0,
        __temp0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
fn __action364<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Visibility, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Token<'input>, usize),
    __3: (usize, Identifier, usize),
    __4: (usize, Token<'input>, usize),
    __5: (usize, Vec<StructField>, usize),
    __6: (usize, Token<'input>, usize),
) -> Item
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action361(
        input,
        intr,
        errs,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action316(
        input,
        intr,
        errs,
        __0,
        __temp0,
        __2,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
fn __action365<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Visibility, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Identifier, usize),
    __3: (usize, Token<'input>, usize),
    __4: (usize, Vec<StructField>, usize),
    __5: (usize, Token<'input>, usize),
) -> Item
{
    let __start0 = __0.2.clone();
    let __end0 = __1.0.clone();
    let __temp0 = __action134(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action316(
        input,
        intr,
        errs,
        __0,
        __temp0,
        __1,
        __2,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
fn __action366<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
) -> ::std::option::Option<(usize, usize)>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action301(
        input,
        intr,
        errs,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action140(
        input,
        intr,
        errs,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action367<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
) -> Visibility
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action366(
        input,
        intr,
        errs,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action2(
        input,
        intr,
        errs,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action368<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Visibility
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action141(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action2(
        input,
        intr,
        errs,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action369<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Expr, usize),
) -> ::std::option::Option<(usize, Expr, usize)>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action302(
        input,
        intr,
        errs,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action123(
        input,
        intr,
        errs,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action370<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, ::std::vec::Vec<Stmt>, usize),
    __2: (usize, Expr, usize),
    __3: (usize, Token<'input>, usize),
) -> Block
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action369(
        input,
        intr,
        errs,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action309(
        input,
        intr,
        errs,
        __0,
        __1,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
fn __action371<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, ::std::vec::Vec<Stmt>, usize),
    __2: (usize, Token<'input>, usize),
) -> Block
{
    let __start0 = __1.2.clone();
    let __end0 = __2.0.clone();
    let __temp0 = __action124(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action309(
        input,
        intr,
        errs,
        __0,
        __1,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
fn __action372<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, BranchVariant, usize),
    __1: (usize, Token<'input>, usize),
) -> ::std::vec::Vec<BranchVariant>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action193(
        input,
        intr,
        errs,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action201(
        input,
        intr,
        errs,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action373<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, ::std::vec::Vec<BranchVariant>, usize),
    __1: (usize, BranchVariant, usize),
    __2: (usize, Token<'input>, usize),
) -> ::std::vec::Vec<BranchVariant>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action193(
        input,
        intr,
        errs,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action202(
        input,
        intr,
        errs,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action374<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, ::std::option::Option<BranchVariant>, usize),
) -> Vec<BranchVariant>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action191(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action152(
        input,
        intr,
        errs,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action375<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, ::std::vec::Vec<BranchVariant>, usize),
    __1: (usize, ::std::option::Option<BranchVariant>, usize),
) -> Vec<BranchVariant>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action192(
        input,
        intr,
        errs,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action152(
        input,
        intr,
        errs,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action376<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Expr, usize),
    __1: (usize, Token<'input>, usize),
) -> ::std::vec::Vec<Expr>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action183(
        input,
        intr,
        errs,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action205(
        input,
        intr,
        errs,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action377<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, ::std::vec::Vec<Expr>, usize),
    __1: (usize, Expr, usize),
    __2: (usize, Token<'input>, usize),
) -> ::std::vec::Vec<Expr>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action183(
        input,
        intr,
        errs,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action206(
        input,
        intr,
        errs,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action378<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, ::std::option::Option<Expr>, usize),
) -> Vec<Expr>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action181(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action163(
        input,
        intr,
        errs,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action379<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, ::std::vec::Vec<Expr>, usize),
    __1: (usize, ::std::option::Option<Expr>, usize),
) -> Vec<Expr>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action182(
        input,
        intr,
        errs,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action163(
        input,
        intr,
        errs,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action380<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, FnParam, usize),
    __1: (usize, Token<'input>, usize),
) -> ::std::vec::Vec<FnParam>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action188(
        input,
        intr,
        errs,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action203(
        input,
        intr,
        errs,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action381<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, ::std::vec::Vec<FnParam>, usize),
    __1: (usize, FnParam, usize),
    __2: (usize, Token<'input>, usize),
) -> ::std::vec::Vec<FnParam>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action188(
        input,
        intr,
        errs,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action204(
        input,
        intr,
        errs,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action382<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, ::std::option::Option<FnParam>, usize),
) -> Vec<FnParam>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action186(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action153(
        input,
        intr,
        errs,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action383<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, ::std::vec::Vec<FnParam>, usize),
    __1: (usize, ::std::option::Option<FnParam>, usize),
) -> Vec<FnParam>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action187(
        input,
        intr,
        errs,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action153(
        input,
        intr,
        errs,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action384<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, StructField, usize),
    __1: (usize, Token<'input>, usize),
) -> ::std::vec::Vec<StructField>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action198(
        input,
        intr,
        errs,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action199(
        input,
        intr,
        errs,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action385<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, ::std::vec::Vec<StructField>, usize),
    __1: (usize, StructField, usize),
    __2: (usize, Token<'input>, usize),
) -> ::std::vec::Vec<StructField>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action198(
        input,
        intr,
        errs,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action200(
        input,
        intr,
        errs,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action386<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, ::std::option::Option<StructField>, usize),
) -> Vec<StructField>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action196(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action151(
        input,
        intr,
        errs,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action387<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, ::std::vec::Vec<StructField>, usize),
    __1: (usize, ::std::option::Option<StructField>, usize),
) -> Vec<StructField>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action197(
        input,
        intr,
        errs,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action151(
        input,
        intr,
        errs,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action388<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Type, usize),
    __1: (usize, Token<'input>, usize),
) -> ::std::vec::Vec<Type>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action171(
        input,
        intr,
        errs,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action177(
        input,
        intr,
        errs,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action389<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, ::std::vec::Vec<Type>, usize),
    __1: (usize, Type, usize),
    __2: (usize, Token<'input>, usize),
) -> ::std::vec::Vec<Type>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action171(
        input,
        intr,
        errs,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action178(
        input,
        intr,
        errs,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action390<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, ::std::option::Option<Type>, usize),
) -> Vec<Type>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action169(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action95(
        input,
        intr,
        errs,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action391<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, ::std::vec::Vec<Type>, usize),
    __1: (usize, ::std::option::Option<Type>, usize),
) -> Vec<Type>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action170(
        input,
        intr,
        errs,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action95(
        input,
        intr,
        errs,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action392<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, BranchVariant, usize),
) -> Vec<BranchVariant>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action189(
        input,
        intr,
        errs,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action374(
        input,
        intr,
        errs,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action393<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Vec<BranchVariant>
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action190(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action374(
        input,
        intr,
        errs,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action394<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, ::std::vec::Vec<BranchVariant>, usize),
    __1: (usize, BranchVariant, usize),
) -> Vec<BranchVariant>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action189(
        input,
        intr,
        errs,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action375(
        input,
        intr,
        errs,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action395<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, ::std::vec::Vec<BranchVariant>, usize),
) -> Vec<BranchVariant>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action190(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action375(
        input,
        intr,
        errs,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action396<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Expr, usize),
) -> Vec<Expr>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action119(
        input,
        intr,
        errs,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action378(
        input,
        intr,
        errs,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action397<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Vec<Expr>
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action120(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action378(
        input,
        intr,
        errs,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action398<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, ::std::vec::Vec<Expr>, usize),
    __1: (usize, Expr, usize),
) -> Vec<Expr>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action119(
        input,
        intr,
        errs,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action379(
        input,
        intr,
        errs,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action399<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, ::std::vec::Vec<Expr>, usize),
) -> Vec<Expr>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action120(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action379(
        input,
        intr,
        errs,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action400<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, Expr, usize),
    __2: (usize, Token<'input>, usize),
) -> Stmt
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action119(
        input,
        intr,
        errs,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action347(
        input,
        intr,
        errs,
        __0,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
fn __action401<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, Token<'input>, usize),
) -> Stmt
{
    let __start0 = __0.2.clone();
    let __end0 = __1.0.clone();
    let __temp0 = __action120(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action347(
        input,
        intr,
        errs,
        __0,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action402<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, Expr, usize),
    __2: (usize, Token<'input>, usize),
) -> Stmt
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action119(
        input,
        intr,
        errs,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action348(
        input,
        intr,
        errs,
        __0,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
fn __action403<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, Token<'input>, usize),
) -> Stmt
{
    let __start0 = __0.2.clone();
    let __end0 = __1.0.clone();
    let __temp0 = __action120(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action348(
        input,
        intr,
        errs,
        __0,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action404<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, FnParam, usize),
) -> Vec<FnParam>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action184(
        input,
        intr,
        errs,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action382(
        input,
        intr,
        errs,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action405<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Vec<FnParam>
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action185(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action382(
        input,
        intr,
        errs,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action406<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, ::std::vec::Vec<FnParam>, usize),
    __1: (usize, FnParam, usize),
) -> Vec<FnParam>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action184(
        input,
        intr,
        errs,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action383(
        input,
        intr,
        errs,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action407<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, ::std::vec::Vec<FnParam>, usize),
) -> Vec<FnParam>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action185(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action383(
        input,
        intr,
        errs,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action408<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, Token<'input>, usize),
) -> Vec<Item>
{
    let __start0 = __0.2.clone();
    let __end0 = __1.0.clone();
    let __temp0 = __action145(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action10(
        input,
        intr,
        errs,
        __0,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action409<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, ::std::vec::Vec<Item>, usize),
    __2: (usize, Token<'input>, usize),
) -> Vec<Item>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action146(
        input,
        intr,
        errs,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action10(
        input,
        intr,
        errs,
        __0,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
fn __action410<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Program
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action145(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action1(
        input,
        intr,
        errs,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action411<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, ::std::vec::Vec<Item>, usize),
) -> Program
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action146(
        input,
        intr,
        errs,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action1(
        input,
        intr,
        errs,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action412<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, Expr, usize),
    __2: (usize, Token<'input>, usize),
) -> Block
{
    let __start0 = __0.2.clone();
    let __end0 = __1.0.clone();
    let __temp0 = __action126(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action370(
        input,
        intr,
        errs,
        __0,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action413<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, ::std::vec::Vec<Stmt>, usize),
    __2: (usize, Expr, usize),
    __3: (usize, Token<'input>, usize),
) -> Block
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action127(
        input,
        intr,
        errs,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action370(
        input,
        intr,
        errs,
        __0,
        __temp0,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action414<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, Token<'input>, usize),
) -> Block
{
    let __start0 = __0.2.clone();
    let __end0 = __1.0.clone();
    let __temp0 = __action126(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action371(
        input,
        intr,
        errs,
        __0,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action415<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, ::std::vec::Vec<Stmt>, usize),
    __2: (usize, Token<'input>, usize),
) -> Block
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action127(
        input,
        intr,
        errs,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action371(
        input,
        intr,
        errs,
        __0,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
fn __action416<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, StructField, usize),
) -> Vec<StructField>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action194(
        input,
        intr,
        errs,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action386(
        input,
        intr,
        errs,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action417<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Vec<StructField>
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action195(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action386(
        input,
        intr,
        errs,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action418<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, ::std::vec::Vec<StructField>, usize),
    __1: (usize, StructField, usize),
) -> Vec<StructField>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action194(
        input,
        intr,
        errs,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action387(
        input,
        intr,
        errs,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action419<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, ::std::vec::Vec<StructField>, usize),
) -> Vec<StructField>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action195(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action387(
        input,
        intr,
        errs,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action420<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Type, usize),
) -> Vec<Type>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action167(
        input,
        intr,
        errs,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action390(
        input,
        intr,
        errs,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action421<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Vec<Type>
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action168(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action390(
        input,
        intr,
        errs,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action422<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, ::std::vec::Vec<Type>, usize),
    __1: (usize, Type, usize),
) -> Vec<Type>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action167(
        input,
        intr,
        errs,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action391(
        input,
        intr,
        errs,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action423<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, ::std::vec::Vec<Type>, usize),
) -> Vec<Type>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action168(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action391(
        input,
        intr,
        errs,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action424<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Identifier, usize),
    __3: (usize, Token<'input>, usize),
    __4: (usize, Type, usize),
    __5: (usize, Token<'input>, usize),
    __6: (usize, Vec<BranchVariant>, usize),
    __7: (usize, Token<'input>, usize),
) -> Item
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action367(
        input,
        intr,
        errs,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action311(
        input,
        intr,
        errs,
        __temp0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
fn __action425<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, Identifier, usize),
    __2: (usize, Token<'input>, usize),
    __3: (usize, Type, usize),
    __4: (usize, Token<'input>, usize),
    __5: (usize, Vec<BranchVariant>, usize),
    __6: (usize, Token<'input>, usize),
) -> Item
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action368(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action311(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
fn __action426<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Identifier, usize),
    __3: (usize, Token<'input>, usize),
    __4: (usize, Vec<BranchVariant>, usize),
    __5: (usize, Token<'input>, usize),
) -> Item
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action367(
        input,
        intr,
        errs,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action312(
        input,
        intr,
        errs,
        __temp0,
        __1,
        __2,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
fn __action427<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, Identifier, usize),
    __2: (usize, Token<'input>, usize),
    __3: (usize, Vec<BranchVariant>, usize),
    __4: (usize, Token<'input>, usize),
) -> Item
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action368(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action312(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action428<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Token<'input>, usize),
    __3: (usize, Identifier, usize),
    __4: (usize, Token<'input>, usize),
    __5: (usize, Type, usize),
    __6: (usize, Token<'input>, usize),
    __7: (usize, Vec<StructField>, usize),
    __8: (usize, Token<'input>, usize),
) -> Item
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action367(
        input,
        intr,
        errs,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action362(
        input,
        intr,
        errs,
        __temp0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
fn __action429<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Identifier, usize),
    __3: (usize, Token<'input>, usize),
    __4: (usize, Type, usize),
    __5: (usize, Token<'input>, usize),
    __6: (usize, Vec<StructField>, usize),
    __7: (usize, Token<'input>, usize),
) -> Item
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action368(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action362(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
fn __action430<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Identifier, usize),
    __3: (usize, Token<'input>, usize),
    __4: (usize, Type, usize),
    __5: (usize, Token<'input>, usize),
    __6: (usize, Vec<StructField>, usize),
    __7: (usize, Token<'input>, usize),
) -> Item
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action367(
        input,
        intr,
        errs,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action363(
        input,
        intr,
        errs,
        __temp0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
fn __action431<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, Identifier, usize),
    __2: (usize, Token<'input>, usize),
    __3: (usize, Type, usize),
    __4: (usize, Token<'input>, usize),
    __5: (usize, Vec<StructField>, usize),
    __6: (usize, Token<'input>, usize),
) -> Item
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action368(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action363(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
fn __action432<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Token<'input>, usize),
    __3: (usize, Identifier, usize),
    __4: (usize, Token<'input>, usize),
    __5: (usize, Vec<StructField>, usize),
    __6: (usize, Token<'input>, usize),
) -> Item
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action367(
        input,
        intr,
        errs,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action364(
        input,
        intr,
        errs,
        __temp0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
fn __action433<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Identifier, usize),
    __3: (usize, Token<'input>, usize),
    __4: (usize, Vec<StructField>, usize),
    __5: (usize, Token<'input>, usize),
) -> Item
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action368(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action364(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
fn __action434<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Identifier, usize),
    __3: (usize, Token<'input>, usize),
    __4: (usize, Vec<StructField>, usize),
    __5: (usize, Token<'input>, usize),
) -> Item
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action367(
        input,
        intr,
        errs,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action365(
        input,
        intr,
        errs,
        __temp0,
        __1,
        __2,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
fn __action435<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, Identifier, usize),
    __2: (usize, Token<'input>, usize),
    __3: (usize, Vec<StructField>, usize),
    __4: (usize, Token<'input>, usize),
) -> Item
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action368(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action365(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action436<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Identifier, usize),
    __3: (usize, Token<'input>, usize),
    __4: (usize, Vec<FnParam>, usize),
    __5: (usize, Token<'input>, usize),
    __6: (usize, Token<'input>, usize),
    __7: (usize, Type, usize),
    __8: (usize, Option<Block>, usize),
) -> Item
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action367(
        input,
        intr,
        errs,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action326(
        input,
        intr,
        errs,
        __temp0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
fn __action437<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, Identifier, usize),
    __2: (usize, Token<'input>, usize),
    __3: (usize, Vec<FnParam>, usize),
    __4: (usize, Token<'input>, usize),
    __5: (usize, Token<'input>, usize),
    __6: (usize, Type, usize),
    __7: (usize, Option<Block>, usize),
) -> Item
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action368(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action326(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
fn __action438<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Identifier, usize),
    __3: (usize, Token<'input>, usize),
    __4: (usize, Vec<FnParam>, usize),
    __5: (usize, Token<'input>, usize),
    __6: (usize, Option<Block>, usize),
) -> Item
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action367(
        input,
        intr,
        errs,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action327(
        input,
        intr,
        errs,
        __temp0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
fn __action439<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, Identifier, usize),
    __2: (usize, Token<'input>, usize),
    __3: (usize, Vec<FnParam>, usize),
    __4: (usize, Token<'input>, usize),
    __5: (usize, Option<Block>, usize),
) -> Item
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action368(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action327(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
fn __action440<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Identifier, usize),
    __3: (usize, Vec<Item>, usize),
) -> Item
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action367(
        input,
        intr,
        errs,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action334(
        input,
        intr,
        errs,
        __temp0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action441<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, Identifier, usize),
    __2: (usize, Vec<Item>, usize),
) -> Item
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action368(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action334(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action442<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Identifier, usize),
    __3: (usize, Token<'input>, usize),
    __4: (usize, Vec<StructField>, usize),
    __5: (usize, Token<'input>, usize),
) -> Item
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action367(
        input,
        intr,
        errs,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action354(
        input,
        intr,
        errs,
        __temp0,
        __1,
        __2,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
fn __action443<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, Identifier, usize),
    __2: (usize, Token<'input>, usize),
    __3: (usize, Vec<StructField>, usize),
    __4: (usize, Token<'input>, usize),
) -> Item
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action368(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action354(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action444<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, Identifier, usize),
    __2: (usize, Token<'input>, usize),
    __3: (usize, Type, usize),
) -> StructField
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action367(
        input,
        intr,
        errs,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action17(
        input,
        intr,
        errs,
        __temp0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action445<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Identifier, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Type, usize),
) -> StructField
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action368(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action17(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
fn __action446<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, Identifier, usize),
    __2: (usize, Token<'input>, usize),
    __3: (usize, Type, usize),
    __4: (usize, Token<'input>, usize),
    __5: (usize, Expr, usize),
) -> StructField
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action367(
        input,
        intr,
        errs,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action355(
        input,
        intr,
        errs,
        __temp0,
        __1,
        __2,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
fn __action447<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Identifier, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Type, usize),
    __3: (usize, Token<'input>, usize),
    __4: (usize, Expr, usize),
) -> StructField
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action368(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action355(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action448<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Token<'input>, usize),
    __1: (usize, Identifier, usize),
    __2: (usize, Token<'input>, usize),
    __3: (usize, Expr, usize),
) -> StructField
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action367(
        input,
        intr,
        errs,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action356(
        input,
        intr,
        errs,
        __temp0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
fn __action449<
    'input,
>(
    input: &'input str,
    intr: &Interner,
    errs: &mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>,
    __0: (usize, Identifier, usize),
    __1: (usize, Token<'input>, usize),
    __2: (usize, Expr, usize),
) -> StructField
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action368(
        input,
        intr,
        errs,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action356(
        input,
        intr,
        errs,
        __temp0,
        __0,
        __1,
        __2,
    )
}

pub trait __ToTriple<'input, > {
    fn to_triple(value: Self) -> Result<(usize,Token<'input>,usize), __lalrpop_util::ParseError<usize, Token<'input>, ParserError>>;
}

impl<'input, > __ToTriple<'input, > for (usize, Token<'input>, usize) {
    fn to_triple(value: Self) -> Result<(usize,Token<'input>,usize), __lalrpop_util::ParseError<usize, Token<'input>, ParserError>> {
        Ok(value)
    }
}
impl<'input, > __ToTriple<'input, > for Result<(usize, Token<'input>, usize), ParserError> {
    fn to_triple(value: Self) -> Result<(usize,Token<'input>,usize), __lalrpop_util::ParseError<usize, Token<'input>, ParserError>> {
        match value {
            Ok(v) => Ok(v),
            Err(error) => Err(__lalrpop_util::ParseError::User { error }),
        }
    }
}
