// auto-generated: "lalrpop 0.19.0"
// sha256: e1fb6adfaf32962dc28974bea042195b13fc9569a3192236771e3c8f28fc
use std::str::FromStr;
use lalrpop_util::{ParseError, ErrorRecovery};
use hlcl_ast::{*, id::AstId, BinOpKind as BinOp};
use hlcl_span::*;
use hlcl_span::kw::Interner;
use super::{util::*, lexer::Token, err::ParserError};
#[allow(unused_extern_crates)]
extern crate lalrpop_util as __lalrpop_util;
#[allow(unused_imports)]
use self::__lalrpop_util::state_machine as __state_machine;

#[cfg_attr(rustfmt, rustfmt_skip)]
mod __parse__Program {
#![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens)]

use std::str::FromStr;
use lalrpop_util::{ParseError, ErrorRecovery};
use hlcl_ast::{*, id::AstId, BinOpKind as BinOp};
use hlcl_span::*;
use hlcl_span::kw::Interner;
use super::super::{util::*, lexer::Token, err::ParserError};
#[allow(unused_extern_crates)]
extern crate lalrpop_util as __lalrpop_util;
#[allow(unused_imports)]
use self::__lalrpop_util::state_machine as __state_machine;
use super::__ToTriple;
#[allow(dead_code)]
pub enum __Symbol<'input>
 {
Variant0(Token<'input>),
Variant1(&'input str),
Variant2(__lalrpop_util::ErrorRecovery<usize, Token<'input>, ParserError>),
Variant3(::std::option::Option<Token<'input>>),
Variant4(Path),
Variant5(::std::vec::Vec<Path>),
Variant6(Expr),
Variant7(::std::vec::Vec<Expr>),
Variant8(UseTree),
Variant9(::std::vec::Vec<UseTree>),
Variant10(Type),
Variant11(::std::option::Option<Type>),
Variant12(Identifier),
Variant13(::std::vec::Vec<Identifier>),
Variant14((usize, usize)),
Variant15(::std::option::Option<(usize, usize)>),
Variant16((usize, Expr, usize)),
Variant17(::std::option::Option<(usize, Expr, usize)>),
Variant18(BranchVariant),
Variant19(::std::vec::Vec<BranchVariant>),
Variant20(FnParam),
Variant21(::std::vec::Vec<FnParam>),
Variant22(StructField),
Variant23(::std::vec::Vec<StructField>),
Variant24(::std::vec::Vec<Type>),
Variant25(usize),
Variant26(Block),
Variant27(Option<Block>),
Variant28(Item),
Variant29(::std::option::Option<BranchVariant>),
Variant30(Vec<BranchVariant>),
Variant31(Vec<Expr>),
Variant32(Vec<FnParam>),
Variant33(Vec<StructField>),
Variant34(Disambiguator),
Variant35(::std::option::Option<Disambiguator>),
Variant36(::std::option::Option<Expr>),
Variant37(::std::option::Option<FnParam>),
Variant38((Vec<FnParam>, ::std::option::Option<Type>, Option<Block>)),
Variant39(IsOpKind),
Variant40(::std::vec::Vec<Item>),
Variant41(Lit),
Variant42(Vec<Type>),
Variant43(Vec<Path>),
Variant44(Option<Expr>),
Variant45(Vec<Item>),
Variant46(UnOpKind),
Variant47(BinOp),
Variant48(Program),
Variant49(Spanned<IsOpKind>),
Variant50(Spanned<UnOpKind>),
Variant51(Spanned<BinOp>),
Variant52(Stmt),
Variant53(::std::vec::Vec<Stmt>),
Variant54(::std::option::Option<StructField>),
Variant55(Visibility),
}
const __ACTION: &[i16] = &[
// State 0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-274,0,-274,-274,0,0,0,0,0,0,-274,-274,0,0,0,0,-274,113,0,-274,0,0,-274,0,0,0,0,0,0,0,0,0,
// State 1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-274,0,-274,-274,0,0,0,0,0,0,-274,-274,0,0,0,0,-274,113,0,-274,0,0,-274,0,0,0,0,0,0,0,0,0,
// State 2
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,0,0,0,
// State 3
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,0,0,0,
// State 4
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,0,0,0,
// State 5
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,0,0,0,
// State 6
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,0,0,0,
// State 7
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,0,0,121,
// State 8
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,0,0,0,
// State 9
0,0,0,0,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 10
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,
// State 11
0,0,0,0,0,0,0,0,0,0,0,0,0,-258,0,0,0,0,0,0,0,20,-258,0,0,0,0,0,0,0,0,0,0,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-258,0,0,0,0,
// State 12
130,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,0,0,131,
// State 13
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-162,117,0,0,0,
// State 14
130,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,0,0,131,
// State 15
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,113,0,0,0,0,0,0,0,0,0,-174,-274,0,0,0,
// State 16
0,0,0,0,0,0,0,0,-170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,0,0,0,
// State 17
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-274,0,-274,-274,0,0,0,0,0,0,-274,-274,0,0,0,0,-274,113,0,-274,0,0,-274,0,0,0,0,144,0,0,0,0,
// State 18
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,113,0,0,0,0,0,0,0,0,0,-174,-274,0,0,0,
// State 19
0,0,0,0,0,0,0,0,0,147,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,0,0,0,117,0,0,0,
// State 20
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,0,0,0,
// State 21
-181,-181,0,0,-181,-181,-181,0,-181,0,-181,35,-181,-181,0,-181,0,0,0,-181,0,36,-181,-181,-181,-181,-181,-181,-181,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-181,0,0,0,0,0,0,0,0,0,0,-181,-181,-181,-181,0,0,0,0,
// State 22
130,0,0,0,0,0,0,23,-178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,0,0,131,
// State 23
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-164,117,0,0,0,
// State 24
130,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,0,0,131,
// State 25
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,113,0,0,0,0,0,0,0,0,0,-174,-274,0,0,0,
// State 26
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,113,0,0,0,0,0,0,0,0,0,-176,-274,0,0,0,
// State 27
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,0,0,0,
// State 28
0,0,0,0,0,0,0,0,-172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,0,0,0,
// State 29
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-274,0,-274,-274,0,0,0,0,0,0,-274,-274,0,0,0,0,-274,113,0,-274,0,0,-274,0,0,0,0,163,0,0,0,0,
// State 30
0,0,0,0,0,0,0,0,0,166,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,0,0,0,117,0,0,0,
// State 31
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,0,0,0,
// State 32
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,0,0,121,
// State 33
-183,-183,0,0,-183,-183,-183,0,-183,0,-183,35,-183,-183,0,-183,0,0,0,-183,0,46,-183,-183,-183,-183,-183,-183,-183,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-183,0,0,0,0,0,0,0,0,0,0,-183,-183,-183,-183,0,0,0,0,
// State 34
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,0,0,0,
// State 35
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,0,0,0,
// State 36
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-162,117,0,0,0,
// State 37
130,0,0,0,0,0,0,23,-180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,0,0,131,
// State 38
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,113,0,0,0,0,0,0,0,0,0,-174,-274,0,0,0,
// State 39
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,113,0,0,0,0,0,0,0,0,0,-174,-274,0,0,0,
// State 40
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,181,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0,0,0,0,0,0,0,
// State 41
130,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,0,0,131,
// State 42
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,0,0,121,
// State 43
0,0,0,0,0,0,0,0,0,0,0,0,0,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,0,0,0,0,
// State 44
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,0,0,0,
// State 45
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,0,0,0,
// State 46
-9,-9,0,0,-9,-9,-9,0,-9,0,-9,-9,-9,-9,0,-9,0,0,0,-9,0,36,-9,-9,-9,-9,-9,-9,-9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-9,0,0,0,0,0,0,0,0,0,0,-9,-9,-9,-9,0,0,0,0,
// State 47
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,113,0,0,0,0,0,0,0,0,0,-174,-274,0,0,0,
// State 48
130,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,0,0,131,
// State 49
130,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,0,0,131,
// State 50
211,0,0,0,0,0,0,68,0,0,0,0,0,0,212,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-274,69,-274,-274,0,213,0,0,0,214,-274,-274,70,0,71,72,-274,113,73,-274,0,215,-274,74,51,0,0,216,117,217,218,219,
// State 51
0,0,0,0,0,0,0,0,0,0,0,0,0,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,221,0,0,0,0,
// State 52
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,117,0,0,121,
// State 53
-11,-11,0,0,-11,-11,-11,0,-11,0,-11,-11,-11,-11,0,-11,0,0,0,-11,0,36,-11,-11,-11,-11,-11,-11,-11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-11,0,0,0,0,0,0,0,0,0,0,-11,-11,-11,-11,0,0,0,0,
// State 54
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,181,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0,0,0,0,0,0,0,
// State 55
-120,-120,0,229,-120,-120,-120,0,-120,230,-120,-120,-120,-120,-120,-120,0,0,231,-120,0,0,-120,-120,-120,-120,-120,-120,-120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-120,0,0,0,0,0,0,0,0,0,0,-120,-120,-120,-120,0,0,0,0,
// State 56
-121,-121,0,0,-121,-121,-121,0,-121,0,-121,233,-121,-121,234,-121,0,0,0,-121,0,0,-121,-121,-121,-121,-121,-121,-121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-121,0,0,0,0,0,0,0,0,0,0,-121,-121,-121,-121,0,0,0,0,
// State 57
0,-124,0,0,-124,-124,-124,0,-124,0,-124,0,-124,-124,0,-124,0,0,0,-124,0,0,-124,236,237,-124,-124,238,239,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-124,-124,-124,-124,0,0,0,0,
// State 58
0,241,0,0,-125,-125,-125,0,-125,0,-125,0,-125,-125,0,-125,0,0,0,-125,0,0,-125,0,0,-125,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-125,-125,-125,-125,0,0,0,0,
// State 59
0,0,0,0,-126,244,-126,0,-126,0,-126,0,-126,-126,0,-126,0,0,0,-126,0,0,-126,0,0,-126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-126,-126,-126,-126,0,0,0,0,
// State 60
0,0,0,0,-127,0,-127,0,-127,0,-127,0,-127,-127,0,-127,0,0,0,-127,0,0,-127,0,0,-127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-127,246,-127,-127,0,0,0,0,
// State 61
-256,-256,0,-256,-256,-256,-256,0,-256,-256,-256,-256,-256,-256,-256,-256,83,83,-256,-256,0,0,-256,-256,-256,-256,-256,-256,-256,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-256,0,0,0,0,0,0,0,0,0,0,-256,-256,-256,-256,0,0,0,0,
// State 62
249,-72,0,0,-72,-72,-72,0,-72,0,-72,0,-72,-72,0,-72,0,0,0,-72,0,0,-72,-72,-72,-72,-72,-72,-72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,0,0,0,0,0,0,0,0,0,0,-72,-72,-72,-72,0,0,0,0,
// State 63
0,0,0,0,252,0,253,0,-118,0,254,0,255,-118,0,256,0,0,0,257,0,0,-118,0,0,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-118,0,258,-118,0,0,0,0,
// State 64
-110,-110,0,-110,-110,-110,-110,88,-110,-110,-110,-110,-110,-110,-110,-110,-110,-110,-110,-110,0,36,-110,-110,-110,-110,-110,-110,-110,-110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-110,0,0,0,0,0,0,0,0,0,0,-110,-110,-110,-110,0,0,0,0,
// State 65
211,0,0,0,0,0,0,68,0,0,0,0,0,0,212,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,0,0,0,0,0,0,0,0,0,0,0,215,0,0,0,0,0,0,117,217,218,219,
// State 66
211,0,0,0,0,0,0,68,0,0,0,0,0,0,212,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-274,69,-274,-274,0,213,0,0,0,214,-274,-274,70,0,71,72,-274,113,73,-274,0,215,-274,74,51,0,0,266,117,217,218,219,
// State 67
211,0,0,0,0,0,0,68,0,0,0,0,0,0,212,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,0,0,70,0,0,72,0,0,0,0,0,215,0,74,51,0,0,0,117,217,218,219,
// State 68
211,0,0,0,0,0,0,68,0,0,0,0,0,0,212,0,0,0,0,0,0,0,271,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,0,0,70,0,0,72,0,0,0,0,0,215,0,74,51,0,0,0,117,217,218,219,
// State 69
211,0,0,0,0,0,0,68,0,0,0,0,0,0,212,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,0,0,70,0,0,72,0,0,0,0,0,215,0,74,51,0,0,0,117,217,218,219,
// State 70
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,0,0,0,
// State 71
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0,0,0,0,0,0,0,
// State 72
211,0,0,0,0,0,0,68,0,0,0,0,0,0,212,0,0,0,0,0,0,0,276,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,0,0,70,0,0,72,0,0,0,0,0,215,0,74,51,0,0,0,117,217,218,219,
// State 73
211,0,0,0,0,0,0,68,0,0,0,0,0,0,212,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,0,0,70,0,0,72,0,0,0,0,0,215,0,74,51,0,0,0,117,217,218,219,
// State 74
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,278,117,0,0,121,
// State 75
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,280,117,0,0,121,
// State 76
211,0,0,0,0,0,0,68,0,0,0,0,0,0,212,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,0,0,0,0,0,0,0,0,0,0,0,215,0,0,0,0,0,0,117,217,218,219,
// State 77
211,0,0,0,0,0,0,68,0,0,0,0,0,0,212,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,0,0,0,0,0,0,0,0,0,0,0,215,0,0,0,0,0,0,117,217,218,219,
// State 78
211,0,0,0,0,0,0,68,0,0,0,0,0,0,212,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,0,0,0,0,0,0,0,0,0,0,0,215,0,0,0,0,0,0,117,217,218,219,
// State 79
211,0,0,0,0,0,0,68,0,0,0,0,0,0,212,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,0,0,0,0,0,0,0,0,0,0,0,215,0,0,0,0,0,0,117,217,218,219,
// State 80
211,0,0,0,0,0,0,68,0,0,0,0,0,0,212,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,0,0,0,0,0,0,0,0,0,0,0,215,0,0,0,0,0,0,117,217,218,219,
// State 81
211,0,0,0,0,0,0,68,0,0,0,0,0,0,212,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,0,0,0,0,0,0,0,0,0,0,0,215,0,0,0,0,0,0,117,217,218,219,
// State 82
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,0,0,0,
// State 83
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,0,0,0,
// State 84
130,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,0,0,131,
// State 85
211,0,0,0,0,0,0,68,0,0,0,0,0,0,212,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,0,0,0,0,0,0,0,0,0,0,0,215,0,0,0,0,0,0,117,217,218,219,
// State 86
211,0,0,0,0,0,0,68,0,0,0,0,0,0,212,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,0,0,0,0,0,0,0,0,0,0,0,215,0,0,0,0,0,0,117,217,218,219,
// State 87
211,0,0,0,0,0,0,68,-166,0,0,0,0,0,212,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,0,0,70,0,0,72,0,0,0,0,0,215,0,74,51,0,0,0,117,217,218,219,
// State 88
0,0,0,0,0,0,0,0,-185,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 89
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0,0,0,0,0,0,0,
// State 90
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0,0,0,0,0,0,0,
// State 91
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,301,117,0,0,121,
// State 92
249,-71,0,0,-71,-71,-71,0,-71,0,-71,0,-71,-71,0,-71,0,0,0,-71,0,0,-71,-71,-71,-71,-71,-71,-71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,0,0,0,0,0,0,0,0,0,0,-71,-71,-71,-71,0,0,0,0,
// State 93
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,0,0,0,
// State 94
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-101,-101,0,0,0,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 95
211,0,0,0,0,0,0,68,-166,0,0,0,0,0,212,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,0,0,70,0,0,72,0,0,0,0,0,215,0,74,51,0,0,0,117,217,218,219,
// State 96
211,0,0,0,0,0,0,68,-168,0,0,0,0,0,212,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,0,0,70,0,0,72,0,0,0,0,0,215,0,74,51,0,0,0,117,217,218,219,
// State 97
211,0,0,0,0,0,0,68,0,0,0,0,0,0,212,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,0,0,70,0,0,72,0,0,0,0,0,215,0,74,51,0,0,0,117,217,218,219,
// State 98
130,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,0,0,131,
// State 99
211,0,0,0,0,0,0,68,0,0,0,0,0,0,212,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,0,0,70,0,0,72,0,0,0,0,0,215,0,74,51,0,0,0,117,217,218,219,
// State 100
211,0,0,0,0,0,0,68,0,0,0,0,0,0,212,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,0,0,70,0,0,72,0,0,0,0,0,215,0,74,51,0,0,0,117,217,218,219,
// State 101
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0,0,0,0,0,0,0,0,0,51,0,0,0,0,0,0,0,
// State 102
211,0,0,0,0,0,0,68,0,0,0,0,0,0,212,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,0,0,70,0,0,72,0,0,0,0,0,215,0,74,51,0,0,0,117,217,218,219,
// State 103
-149,0,0,0,0,0,0,-149,0,0,0,0,0,0,-149,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-149,-149,-149,-149,0,-149,0,0,0,-149,-149,-149,-149,0,-149,-149,-149,-149,-149,-149,0,-149,-149,-149,-149,0,0,-149,-149,-149,-149,-149,
// State 104
-148,0,0,0,0,0,0,-148,0,0,0,0,0,0,-148,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-148,-148,-148,-148,0,-148,0,0,0,-148,-148,-148,-148,0,-148,-148,-148,-148,-148,-148,0,-148,-148,-148,-148,0,0,-148,-148,-148,-148,-148,
// State 105
-150,0,0,0,0,0,0,-150,0,0,0,0,0,0,-150,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-150,-150,-150,-150,0,-150,0,0,0,-150,-150,-150,-150,0,-150,-150,-150,-150,-150,-150,0,-150,-150,-150,-150,0,0,-150,-150,-150,-150,-150,
// State 106
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-153,0,-153,-153,0,0,0,0,0,0,-153,-153,0,0,0,0,-153,-153,0,-153,0,0,-153,0,0,0,0,-153,0,0,0,0,
// State 107
-146,0,0,0,0,0,0,-146,0,0,0,0,0,0,-146,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-146,-146,-146,-146,0,-146,0,0,0,-146,-146,-146,-146,0,-146,-146,-146,-146,-146,-146,0,-146,-146,-146,-146,0,0,-146,-146,-146,-146,-146,
// State 108
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 109
-147,0,0,0,0,0,0,-147,0,0,0,0,0,0,-147,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-147,-147,-147,-147,0,-147,0,0,0,-147,-147,-147,-147,0,-147,-147,-147,-147,-147,-147,0,-147,-147,-147,-147,0,0,-147,-147,-147,-147,-147,
// State 110
-145,0,0,0,0,0,0,-145,0,0,0,0,0,0,-145,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-145,-145,-145,-145,0,-145,0,0,0,-145,-145,-145,-145,0,-145,-145,-145,-145,-145,-145,0,-145,-145,-145,-145,0,0,-145,-145,-145,-145,-145,
// State 111
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,115,4,0,0,0,0,0,0,5,5,0,0,0,0,6,0,0,7,0,0,8,0,0,0,0,0,0,0,0,0,
// State 112
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-273,0,-273,-273,0,0,0,0,0,0,-273,-273,0,0,0,0,-273,0,0,-273,0,0,-273,0,0,0,0,0,-273,0,0,0,
// State 113
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-154,0,-154,-154,0,0,0,0,0,0,-154,-154,0,0,0,0,-154,-154,0,-154,0,0,-154,0,0,0,0,-154,0,0,0,0,
// State 114
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 115
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,
// State 116
-140,-140,0,-140,-140,-140,-140,-140,-140,-140,-140,-140,-140,-140,-140,-140,-140,-140,-140,-140,-140,-140,-140,-140,-140,-140,-140,-140,-140,-140,0,0,0,-140,0,0,0,0,0,0,0,0,0,0,0,0,0,-140,0,0,0,0,0,0,0,0,0,0,-140,-140,-140,-140,0,0,0,0,
// State 117
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,
// State 118
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,0,0,0,0,0,0,0,
// State 119
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 120
0,0,0,0,0,0,0,0,0,0,0,0,0,-272,0,0,0,0,0,0,0,0,-272,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-272,0,0,0,0,
// State 121
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,0,0,0,0,0,
// State 122
-139,0,0,0,0,0,0,-139,0,0,0,0,0,0,-139,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-139,-139,-139,-139,0,-139,0,0,0,-139,-139,-139,-139,0,-139,-139,-139,-139,-139,-139,0,-139,-139,-139,-139,0,0,-139,-139,-139,-139,-139,
// State 123
-190,0,0,0,0,0,0,-190,0,0,0,0,0,0,-190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-190,-190,-190,-190,0,-190,0,0,0,-190,-190,-190,-190,0,-190,-190,-190,-190,-190,-190,0,-190,-190,-190,-190,0,0,-190,-190,-190,-190,-190,
// State 124
-193,0,0,0,0,0,0,-193,0,0,0,0,0,0,-193,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-193,-193,-193,-193,0,-193,0,0,0,-193,-193,-193,-193,0,-193,-193,-193,-193,-193,-193,0,-193,-193,-193,-193,0,0,-193,-193,-193,-193,-193,
// State 125
0,0,0,0,0,0,0,0,0,0,0,0,0,-259,0,0,0,0,0,0,0,31,-259,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-259,0,0,0,0,
// State 126
-257,0,0,0,0,0,0,-257,0,0,0,0,0,0,-257,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-257,-257,-257,-257,0,-257,0,0,0,-257,-257,-257,-257,0,-257,-257,-257,-257,-257,-257,0,-257,-257,-257,-257,0,0,-257,-257,-257,-257,-257,
// State 127
-251,-251,0,0,-251,-251,-251,0,-251,0,-251,0,-251,-251,0,-251,0,0,0,-251,0,0,-251,-251,-251,-251,-251,-251,-251,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-251,0,0,0,0,0,0,0,0,0,0,-251,-251,-251,-251,0,0,0,0,
// State 128
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,
// State 129
-249,-249,0,0,-249,-249,-249,0,-249,0,-249,0,-249,-249,0,-249,0,0,0,-249,0,0,-249,-249,-249,-249,-249,-249,-249,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-249,0,0,0,0,0,0,0,0,0,0,-249,-249,-249,-249,0,0,0,0,
// State 130
-252,-252,0,0,-252,-252,-252,0,-252,0,-252,0,-252,-252,0,-252,0,0,0,-252,0,0,-252,-252,-252,-252,-252,-252,-252,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-252,0,0,0,0,0,0,0,0,0,0,-252,-252,-252,-252,0,0,0,0,
// State 131
0,0,0,0,0,0,0,0,0,0,0,0,0,153,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-161,0,0,0,0,
// State 132
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,0,0,0,0,
// State 133
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,0,0,0,0,0,0,0,
// State 134
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-97,0,0,0,0,
// State 135
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,
// State 136
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,158,0,0,0,0,
// State 137
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-100,0,0,0,0,
// State 138
0,0,0,0,0,0,0,0,0,0,0,0,0,159,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-173,0,0,0,0,
// State 139
0,0,0,0,0,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 140
0,0,0,0,0,0,0,0,-169,0,0,0,0,162,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 141
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 142
0,0,0,0,0,0,0,0,-99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 143
-191,0,0,0,0,0,0,-191,0,0,0,0,0,0,-191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-191,-191,-191,-191,0,-191,0,0,0,-191,-191,-191,-191,0,-191,-191,-191,-191,-191,-191,0,-191,-191,-191,-191,0,0,-191,-191,-191,-191,-191,
// State 144
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,0,0,0,0,
// State 145
-29,-29,0,0,-29,-29,-29,-29,-29,0,-29,-29,-29,-29,0,-29,-29,-29,0,-29,0,-29,-29,-29,-29,-29,-29,-29,-29,0,0,0,0,-29,0,0,0,0,0,0,0,0,0,0,0,0,0,-29,0,0,0,0,0,0,0,0,0,0,-29,-29,-29,-29,0,0,0,0,
// State 146
0,0,0,0,0,0,0,0,0,0,0,0,0,-262,0,0,0,0,0,0,0,0,-262,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-262,0,0,0,0,
// State 147
0,0,0,0,0,0,0,0,0,0,0,0,0,-260,0,0,0,0,0,0,0,0,-260,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-260,0,0,0,0,
// State 148
-182,-182,0,0,-182,-182,-182,0,-182,0,-182,45,-182,-182,0,-182,0,0,0,-182,0,0,-182,-182,-182,-182,-182,-182,-182,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-182,0,0,0,0,0,0,0,0,0,0,-182,-182,-182,-182,0,0,0,0,
// State 149
0,0,0,0,0,0,0,0,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 150
0,0,0,0,0,0,0,0,-177,0,0,0,0,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 151
0,0,0,0,0,0,0,0,0,0,0,0,0,173,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-163,0,0,0,0,
// State 152
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-43,-43,0,0,0,
// State 153
-87,0,0,0,0,0,0,-87,0,0,0,0,0,0,-87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-87,-87,-87,-87,0,-87,0,0,0,-87,-87,-87,-87,0,-87,-87,-87,-87,-87,-87,0,-87,-87,-87,-87,0,0,-87,-87,-87,-87,-87,
// State 154
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,
// State 155
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,175,0,0,0,0,
// State 156
0,0,0,0,0,0,0,0,0,0,0,0,0,177,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-175,0,0,0,0,
// State 157
-96,0,0,0,0,0,0,-96,0,0,0,0,0,0,-96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-96,-96,-96,-96,0,-96,0,0,0,-96,-96,-96,-96,0,-96,-96,-96,-96,-96,-96,0,-96,-96,-96,-96,0,0,-96,-96,-96,-96,-96,
// State 158
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-58,0,0,0,0,0,0,0,0,0,-58,-58,0,0,0,
// State 159
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 160
0,0,0,0,0,0,0,0,-171,0,0,0,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 161
0,0,0,0,0,0,0,0,-53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-53,0,0,0,
// State 162
-192,0,0,0,0,0,0,-192,0,0,0,0,0,0,-192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-192,-192,-192,-192,0,-192,0,0,0,-192,-192,-192,-192,0,-192,-192,-192,-192,-192,-192,0,-192,-192,-192,-192,0,0,-192,-192,-192,-192,-192,
// State 163
-245,0,0,0,0,0,0,-245,0,0,0,0,0,0,-245,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-245,-245,-245,-245,0,-245,0,0,0,-245,-245,-245,-245,0,-245,-245,-245,-245,-245,-245,0,-245,-245,-245,-245,0,0,-245,-245,-245,-245,-245,
// State 164
-30,-30,0,0,-30,-30,-30,-30,-30,0,-30,-30,-30,-30,0,-30,-30,-30,0,-30,0,-30,-30,-30,-30,-30,-30,-30,-30,0,0,0,0,-30,0,0,0,0,0,0,0,0,0,0,0,0,0,-30,0,0,0,0,0,0,0,0,0,0,-30,-30,-30,-30,0,0,0,0,
// State 165
0,0,0,0,0,0,0,0,0,0,0,0,0,-263,0,0,0,0,0,0,0,0,-263,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-263,0,0,0,0,
// State 166
0,0,0,0,0,0,0,0,0,0,0,0,0,-261,0,0,0,0,0,0,0,0,-261,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-261,0,0,0,0,
// State 167
-184,-184,0,0,-184,-184,-184,0,-184,0,-184,45,-184,-184,0,-184,0,0,0,-184,0,0,-184,-184,-184,-184,-184,-184,-184,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-184,0,0,0,0,0,0,0,0,0,0,-184,-184,-184,-184,0,0,0,0,
// State 168
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,186,0,0,0,0,
// State 169
0,0,0,0,0,0,0,0,-179,0,0,0,0,187,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 170
-250,-250,0,0,-250,-250,-250,0,-250,0,-250,0,-250,-250,0,-250,0,0,0,-250,0,0,-250,-250,-250,-250,-250,-250,-250,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-250,0,0,0,0,0,0,0,0,0,0,-250,-250,-250,-250,0,0,0,0,
// State 171
-63,0,0,0,0,0,0,-63,-63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-63,0,0,-63,
// State 172
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-44,-44,0,0,0,
// State 173
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,188,0,0,0,0,
// State 174
-95,0,0,0,0,0,0,-95,0,0,0,0,0,0,-95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-95,-95,-95,-95,0,-95,0,0,0,-95,-95,-95,-95,0,-95,-95,-95,-95,-95,-95,0,-95,-95,-95,-95,0,0,-95,-95,-95,-95,-95,
// State 175
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,190,0,0,0,0,
// State 176
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-59,0,0,0,0,0,0,0,0,0,-59,-59,0,0,0,
// State 177
0,0,0,0,0,0,0,0,-54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-54,0,0,0,
// State 178
-84,0,0,0,0,0,0,-84,0,0,0,0,0,0,-84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-84,-84,-84,-84,0,-84,0,0,0,-84,-84,-84,-84,0,-84,-84,-84,-84,-84,-84,0,-84,-84,-84,-84,0,0,-84,-84,-84,-84,-84,
// State 179
-138,0,0,0,0,0,0,-138,0,0,0,0,0,0,-138,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-138,-138,-138,-138,0,-138,0,0,0,-138,-138,-138,-138,0,-138,-138,-138,-138,-138,-138,0,-138,-138,-138,-138,0,0,-138,-138,-138,-138,-138,
// State 180
-85,0,0,0,0,0,0,-85,0,0,0,0,0,0,-85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-85,-85,-85,-85,0,-85,0,0,0,-85,-85,-85,-85,0,-85,-85,-85,-85,-85,-85,0,-85,-85,-85,-85,0,0,-85,-85,-85,-85,-85,
// State 181
0,0,0,0,0,0,0,0,-134,0,0,0,0,-134,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 182
0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,222,0,0,0,0,
// State 183
0,0,0,0,0,0,0,0,0,0,0,0,0,-268,0,0,0,0,0,0,0,0,-268,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-268,0,0,0,0,
// State 184
-10,-10,0,0,-10,-10,-10,0,-10,0,-10,-10,-10,-10,0,-10,0,0,0,-10,0,46,-10,-10,-10,-10,-10,-10,-10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10,0,0,0,0,0,0,0,0,0,0,-10,-10,-10,-10,0,0,0,0,
// State 185
-86,0,0,0,0,0,0,-86,0,0,0,0,0,0,-86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-86,-86,-86,-86,0,-86,0,0,0,-86,-86,-86,-86,0,-86,-86,-86,-86,-86,-86,0,-86,-86,-86,-86,0,0,-86,-86,-86,-86,-86,
// State 186
-64,0,0,0,0,0,0,-64,-64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-64,0,0,-64,
// State 187
0,0,0,0,0,0,0,0,0,0,0,0,0,-88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-88,0,0,0,0,
// State 188
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,226,0,0,0,0,
// State 189
-94,0,0,0,0,0,0,-94,0,0,0,0,0,0,-94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-94,-94,-94,-94,0,-94,0,0,0,-94,-94,-94,-94,0,-94,-94,-94,-94,-94,-94,0,-94,-94,-94,-94,0,0,-94,-94,-94,-94,-94,
// State 190
0,0,0,0,0,0,0,0,0,0,0,0,0,-246,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-246,0,0,0,0,
// State 191
-83,0,0,0,0,0,0,-83,-83,0,0,0,0,-83,-83,0,0,0,0,0,0,0,-83,0,0,0,0,0,0,0,0,0,0,0,-83,-83,-83,-83,0,-83,0,0,0,-83,-83,-83,-83,0,-83,-83,-83,-83,-83,-83,0,-83,-83,-83,-83,0,0,-83,-83,-83,-83,-83,
// State 192
-131,0,0,0,0,0,0,-131,-131,0,0,0,0,-131,-131,0,0,0,0,0,0,0,-131,0,0,0,0,0,0,0,0,0,0,0,-131,-131,-131,-131,0,-131,0,0,0,-131,-131,-131,-131,0,-131,-131,-131,-131,-131,-131,0,-131,-131,-131,-131,0,0,-131,-131,-131,-131,-131,
// State 193
-113,-113,0,-113,-113,-113,-113,0,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,0,0,-113,-113,-113,-113,-113,-113,-113,-113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-113,0,0,0,0,0,0,0,0,0,0,-113,-113,-113,-113,0,0,0,0,
// State 194
0,0,0,0,0,0,0,0,-133,0,0,0,0,-133,0,0,0,0,0,0,0,0,-133,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-133,0,0,-133,0,0,0,0,
// State 195
-68,-68,0,-68,-68,-68,-68,0,-68,-68,-68,-68,-68,-68,-68,-68,0,0,-68,-68,0,0,-68,-68,-68,-68,-68,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,0,0,0,0,0,0,0,0,0,0,-68,-68,-68,-68,0,0,0,0,
// State 196
-70,-70,0,0,-70,-70,-70,0,-70,0,-70,-70,-70,-70,-70,-70,0,0,0,-70,0,0,-70,-70,-70,-70,-70,-70,-70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-70,0,0,0,0,0,0,0,0,0,0,-70,-70,-70,-70,0,0,0,0,
// State 197
-123,-123,0,0,-123,-123,-123,0,-123,0,-123,0,-123,-123,0,-123,0,0,0,-123,0,0,-123,-123,-123,-123,-123,-123,-123,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-123,0,0,0,0,0,0,0,0,0,0,-123,-123,-123,-123,0,0,0,0,
// State 198
0,-74,0,0,-74,-74,-74,0,-74,0,-74,0,-74,-74,0,-74,0,0,0,-74,0,0,-74,0,0,-74,-74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-74,-74,-74,-74,0,0,0,0,
// State 199
0,0,0,0,-76,-76,-76,0,-76,0,-76,0,-76,-76,0,-76,0,0,0,-76,0,0,-76,0,0,-76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-76,-76,-76,-76,0,0,0,0,
// State 200
0,0,0,0,-78,0,-78,0,-78,0,-78,0,-78,-78,0,-78,0,0,0,-78,0,0,-78,0,0,-78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-78,-78,-78,-78,0,0,0,0,
// State 201
-240,0,0,0,0,0,0,-240,0,0,0,0,0,0,-240,0,0,0,0,0,0,0,259,0,0,0,0,0,0,0,0,0,0,0,-240,-240,-240,-240,0,-240,0,0,0,-240,-240,-240,-240,0,-240,-240,-240,-240,-240,-240,0,-240,-240,-240,-240,0,0,-240,-240,-240,-240,-240,
// State 202
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,260,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,261,0,0,0,0,
// State 203
-130,0,0,0,0,0,0,-130,-130,0,0,0,0,-130,-130,0,0,0,0,0,0,0,-130,0,0,0,0,0,0,0,0,0,0,0,-130,-130,-130,-130,0,-130,0,0,0,-130,-130,-130,-130,0,-130,-130,-130,-130,-130,-130,0,-130,-130,-130,-130,0,0,-130,-130,-130,-130,-130,
// State 204
-229,0,0,0,0,0,0,-229,0,0,0,0,0,0,-229,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-229,-229,-229,-229,0,-229,0,0,0,-229,-229,-229,-229,0,-229,-229,-229,-229,-229,-229,0,-229,-229,-229,-229,0,0,-229,-229,-229,-229,-229,
// State 205
-109,-109,0,-109,-109,-109,-109,0,-109,-109,-109,-109,-109,-109,-109,-109,-109,-109,-109,-109,0,0,-109,-109,-109,-109,-109,-109,-109,-109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-109,0,0,0,0,0,0,0,0,0,0,-109,-109,-109,-109,0,0,0,0,
// State 206
-132,0,0,0,0,0,0,-132,-132,0,0,0,0,-132,-132,0,0,0,0,0,0,0,-132,0,0,0,0,0,0,0,0,0,0,0,-132,-132,-132,-132,0,-132,0,0,0,-132,-132,-132,-132,0,-132,-132,-132,-132,-132,-132,0,-132,-132,-132,-132,0,0,-132,-132,-132,-132,-132,
// State 207
-221,0,0,0,0,0,0,-221,0,0,0,0,0,0,-221,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-221,0,0,0,0,0,0,0,0,0,0,0,-221,0,0,0,0,0,0,-221,-221,-221,-221,
// State 208
-243,0,0,0,0,0,0,-243,0,0,0,0,0,0,-243,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-243,-243,-243,-243,0,-243,0,0,0,-243,-243,-243,-243,0,-243,-243,-243,-243,-243,-243,0,-243,-243,-243,-243,0,0,-243,-243,-243,-243,-243,
// State 209
-119,-119,0,-119,-119,-119,-119,0,-119,-119,-119,-119,-119,-119,-119,-119,0,0,-119,-119,0,0,-119,-119,-119,-119,-119,-119,-119,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-119,0,0,0,0,0,0,0,0,0,0,-119,-119,-119,-119,0,0,0,0,
// State 210
-195,0,0,0,0,0,0,-195,0,0,0,0,0,0,-195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-195,0,0,0,0,0,0,0,0,0,0,0,-195,0,0,0,0,0,0,-195,-195,-195,-195,
// State 211
-194,0,0,0,0,0,0,-194,0,0,0,0,0,0,-194,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-194,0,0,0,0,0,0,0,0,0,0,0,-194,0,0,0,0,0,0,-194,-194,-194,-194,
// State 212
-237,0,0,0,0,0,0,-237,0,0,0,0,0,0,-237,0,0,0,0,0,0,0,272,0,0,0,0,0,0,0,0,0,0,0,-237,-237,-237,-237,0,-237,0,0,0,-237,-237,-237,-237,0,-237,-237,-237,-237,-237,-237,0,-237,-237,-237,-237,0,0,-237,-237,-237,-237,-237,
// State 213
-156,-156,0,-156,-156,-156,-156,0,-156,-156,-156,-156,-156,-156,-156,-156,-156,-156,-156,-156,0,0,-156,-156,-156,-156,-156,-156,-156,-156,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-156,0,0,0,0,0,0,0,0,0,0,-156,-156,-156,-156,0,0,0,0,
// State 214
-155,-155,0,-155,-155,-155,-155,0,-155,-155,-155,-155,-155,-155,-155,-155,-155,-155,-155,-155,0,0,-155,-155,-155,-155,-155,-155,-155,-155,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-155,0,0,0,0,0,0,0,0,0,0,-155,-155,-155,-155,0,0,0,0,
// State 215
-81,0,0,0,0,0,0,-81,-81,0,0,0,0,-81,-81,0,0,0,0,0,0,0,-81,0,0,0,0,0,0,0,0,0,0,0,-81,-81,-81,-81,0,-81,0,-81,0,-81,-81,-81,-81,0,-81,-81,-81,-81,-81,-81,0,-81,-81,-81,-81,0,0,-81,-81,-81,-81,-81,
// State 216
-158,-158,0,-158,-158,-158,-158,0,-158,-158,-158,-158,-158,-158,-158,-158,-158,-158,-158,-158,0,0,-158,-158,-158,-158,-158,-158,-158,-158,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-158,0,0,0,0,0,0,0,0,0,0,-158,-158,-158,-158,0,0,0,0,
// State 217
-157,-157,0,-157,-157,-157,-157,0,-157,-157,-157,-157,-157,-157,-157,-157,-157,-157,-157,-157,0,0,-157,-157,-157,-157,-157,-157,-157,-157,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-157,0,0,0,0,0,0,0,0,0,0,-157,-157,-157,-157,0,0,0,0,
// State 218
-115,-115,0,-115,-115,-115,-115,0,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,0,0,-115,-115,-115,-115,-115,-115,-115,-115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-115,0,0,0,0,0,0,0,0,0,0,-115,-115,-115,-115,0,0,0,0,
// State 219
0,0,0,0,0,0,0,0,0,0,0,0,0,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,277,0,0,0,0,
// State 220
0,0,0,0,0,0,0,0,0,0,0,0,0,-270,0,0,0,0,0,0,0,0,-270,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-270,0,0,0,0,
// State 221
0,0,0,0,0,0,0,0,0,0,0,0,0,-269,0,0,0,0,0,0,0,0,-269,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-269,0,0,0,0,
// State 222
0,0,0,0,0,0,0,0,0,0,0,0,0,-21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-21,0,0,0,0,
// State 223
0,0,0,0,0,0,0,0,0,0,0,0,0,-264,0,0,0,0,0,0,0,0,-264,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-264,0,0,0,0,
// State 224
-12,-12,0,0,-12,-12,-12,0,-12,0,-12,-12,-12,-12,0,-12,0,0,0,-12,0,46,-12,-12,-12,-12,-12,-12,-12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-12,0,0,0,0,0,0,0,0,0,0,-12,-12,-12,-12,0,0,0,0,
// State 225
-93,0,0,0,0,0,0,-93,0,0,0,0,0,0,-93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-93,-93,-93,-93,0,-93,0,0,0,-93,-93,-93,-93,0,-93,-93,-93,-93,-93,-93,0,-93,-93,-93,-93,0,0,-93,-93,-93,-93,-93,
// State 226
-137,0,0,0,0,0,0,-137,0,0,0,0,0,0,-137,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-137,-137,-137,-137,0,-137,0,0,0,-137,-137,-137,-137,0,-137,-137,-137,-137,-137,-137,0,-137,-137,-137,-137,0,0,-137,-137,-137,-137,-137,
// State 227
-222,0,0,0,0,0,0,-222,0,0,0,0,0,0,-222,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-222,0,0,0,0,0,0,0,0,0,0,0,-222,0,0,0,0,0,0,-222,-222,-222,-222,
// State 228
-198,0,0,0,0,0,0,-198,0,0,0,0,0,0,-198,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-198,0,0,0,0,0,0,0,0,0,0,0,-198,0,0,0,0,0,0,-198,-198,-198,-198,
// State 229
-196,0,0,0,0,0,0,-196,0,0,0,0,0,0,-196,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-196,0,0,0,0,0,0,0,0,0,0,0,-196,0,0,0,0,0,0,-196,-196,-196,-196,
// State 230
-197,0,0,0,0,0,0,-197,0,0,0,0,0,0,-197,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-197,0,0,0,0,0,0,0,0,0,0,0,-197,0,0,0,0,0,0,-197,-197,-197,-197,
// State 231
-223,0,0,0,0,0,0,-223,0,0,0,0,0,0,-223,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-223,0,0,0,0,0,0,0,0,0,0,0,-223,0,0,0,0,0,0,-223,-223,-223,-223,
// State 232
-199,0,0,0,0,0,0,-199,0,0,0,0,0,0,-199,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-199,0,0,0,0,0,0,0,0,0,0,0,-199,0,0,0,0,0,0,-199,-199,-199,-199,
// State 233
-200,0,0,0,0,0,0,-200,0,0,0,0,0,0,-200,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-200,0,0,0,0,0,0,0,0,0,0,0,-200,0,0,0,0,0,0,-200,-200,-200,-200,
// State 234
-224,0,0,0,0,0,0,-224,0,0,0,0,0,0,-224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-224,0,0,0,0,0,0,0,0,0,0,0,-224,0,0,0,0,0,0,-224,-224,-224,-224,
// State 235
-201,0,0,0,0,0,0,-201,0,0,0,0,0,0,-201,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-201,0,0,0,0,0,0,0,0,0,0,0,-201,0,0,0,0,0,0,-201,-201,-201,-201,
// State 236
-203,0,0,0,0,0,0,-203,0,0,0,0,0,0,-203,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-203,0,0,0,0,0,0,0,0,0,0,0,-203,0,0,0,0,0,0,-203,-203,-203,-203,
// State 237
-202,0,0,0,0,0,0,-202,0,0,0,0,0,0,-202,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-202,0,0,0,0,0,0,0,0,0,0,0,-202,0,0,0,0,0,0,-202,-202,-202,-202,
// State 238
-204,0,0,0,0,0,0,-204,0,0,0,0,0,0,-204,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-204,0,0,0,0,0,0,0,0,0,0,0,-204,0,0,0,0,0,0,-204,-204,-204,-204,
// State 239
-225,0,0,0,0,0,0,-225,0,0,0,0,0,0,-225,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-225,0,0,0,0,0,0,0,0,0,0,0,-225,0,0,0,0,0,0,-225,-225,-225,-225,
// State 240
-206,0,0,0,0,0,0,-206,0,0,0,0,0,0,-206,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-206,0,0,0,0,0,0,0,0,0,0,0,-206,0,0,0,0,0,0,-206,-206,-206,-206,
// State 241
-205,0,0,0,0,0,0,-205,0,0,0,0,0,0,-205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-205,0,0,0,0,0,0,0,0,0,0,0,-205,0,0,0,0,0,0,-205,-205,-205,-205,
// State 242
-226,0,0,0,0,0,0,-226,0,0,0,0,0,0,-226,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-226,0,0,0,0,0,0,0,0,0,0,0,-226,0,0,0,0,0,0,-226,-226,-226,-226,
// State 243
-207,0,0,0,0,0,0,-207,0,0,0,0,0,0,-207,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-207,0,0,0,0,0,0,0,0,0,0,0,-207,0,0,0,0,0,0,-207,-207,-207,-207,
// State 244
-228,0,0,0,0,0,0,-228,0,0,0,0,0,0,-228,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-228,0,0,0,0,0,0,0,0,0,0,0,-228,0,0,0,0,0,0,-228,-228,-228,-228,
// State 245
-215,0,0,0,0,0,0,-215,0,0,0,0,0,0,-215,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-215,0,0,0,0,0,0,0,0,0,0,0,-215,0,0,0,0,0,0,-215,-215,-215,-215,
// State 246
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 247
-220,0,0,0,0,0,0,-220,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-220,0,0,-220,
// State 248
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,288,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 249
-144,0,0,0,0,0,0,-144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-144,0,0,-144,
// State 250
-227,0,0,0,0,0,0,-227,0,0,0,0,0,0,-227,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-227,0,0,0,0,0,0,0,0,0,0,0,-227,0,0,0,0,0,0,-227,-227,-227,-227,
// State 251
-212,0,0,0,0,0,0,-212,0,0,0,0,0,0,-212,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-212,0,0,0,0,0,0,0,0,0,0,0,-212,0,0,0,0,0,0,-212,-212,-212,-212,
// State 252
-213,0,0,0,0,0,0,-213,0,0,0,0,0,0,-213,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-213,0,0,0,0,0,0,0,0,0,0,0,-213,0,0,0,0,0,0,-213,-213,-213,-213,
// State 253
-210,0,0,0,0,0,0,-210,0,0,0,0,0,0,-210,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-210,0,0,0,0,0,0,0,0,0,0,0,-210,0,0,0,0,0,0,-210,-210,-210,-210,
// State 254
-208,0,0,0,0,0,0,-208,0,0,0,0,0,0,-208,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-208,0,0,0,0,0,0,0,0,0,0,0,-208,0,0,0,0,0,0,-208,-208,-208,-208,
// State 255
-209,0,0,0,0,0,0,-209,0,0,0,0,0,0,-209,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-209,0,0,0,0,0,0,0,0,0,0,0,-209,0,0,0,0,0,0,-209,-209,-209,-209,
// State 256
-211,0,0,0,0,0,0,-211,0,0,0,0,0,0,-211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-211,0,0,0,0,0,0,0,0,0,0,0,-211,0,0,0,0,0,0,-211,-211,-211,-211,
// State 257
-214,0,0,0,0,0,0,-214,0,0,0,0,0,0,-214,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-214,0,0,0,0,0,0,0,0,0,0,0,-214,0,0,0,0,0,0,-214,-214,-214,-214,
// State 258
-239,0,0,0,0,0,0,-239,0,0,0,0,0,0,-239,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-239,-239,-239,-239,0,-239,0,0,0,-239,-239,-239,-239,0,-239,-239,-239,-239,-239,-239,0,-239,-239,-239,-239,0,0,-239,-239,-239,-239,-239,
// State 259
-238,0,0,0,0,0,0,-238,0,0,0,0,0,0,-238,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-238,-238,-238,-238,0,-238,0,0,0,-238,-238,-238,-238,0,-238,-238,-238,-238,-238,-238,0,-238,-238,-238,-238,0,0,-238,-238,-238,-238,-238,
// State 260
-79,0,0,0,0,0,0,-79,-79,0,0,0,0,-79,-79,0,0,0,0,0,0,0,-79,0,0,0,0,0,0,0,0,0,0,0,-79,-79,-79,-79,0,-79,0,-79,0,-79,-79,-79,-79,0,-79,-79,-79,-79,-79,-79,0,-79,-79,-79,-79,0,0,-79,-79,-79,-79,-79,
// State 261
0,0,0,0,0,0,0,96,0,0,0,0,0,0,0,0,0,0,0,0,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 262
-255,-255,0,-255,-255,-255,-255,0,-255,-255,-255,-255,-255,-255,-255,-255,0,0,-255,-255,0,0,-255,-255,-255,-255,-255,-255,-255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-255,0,0,0,0,0,0,0,0,0,0,-255,-255,-255,-255,0,0,0,0,
// State 263
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,260,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,294,0,0,0,0,
// State 264
-244,0,0,0,0,0,0,-244,0,0,0,0,0,0,-244,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-244,-244,-244,-244,0,-244,0,0,0,-244,-244,-244,-244,0,-244,-244,-244,-244,-244,-244,0,-244,-244,-244,-244,0,0,-244,-244,-244,-244,-244,
// State 265
-82,0,0,0,0,0,0,-82,-82,0,0,0,0,-82,-82,0,0,0,0,0,0,0,-82,0,0,0,0,0,0,0,0,0,0,0,-82,-82,-82,-82,0,-82,0,-82,0,-82,-82,-82,-82,0,-82,-82,-82,-82,-82,-82,0,-82,-82,-82,-82,0,0,-82,-82,-82,-82,-82,
// State 266
0,0,0,0,0,0,0,0,-108,0,0,0,0,-108,0,0,0,0,0,0,0,0,-108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-108,0,0,0,0,0,0,0,
// State 267
0,0,0,0,0,0,0,0,-107,0,0,0,0,-107,0,0,0,0,0,0,0,0,-107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-107,0,0,0,0,0,0,0,
// State 268
0,0,0,0,0,0,0,0,296,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 269
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,297,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 270
-235,0,0,0,0,0,0,-235,0,0,0,0,0,0,-235,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-235,-235,-235,-235,0,-235,0,0,0,-235,-235,-235,-235,0,-235,-235,-235,-235,-235,-235,0,-235,-235,-235,-235,0,0,-235,-235,-235,-235,-235,
// State 271
-236,0,0,0,0,0,0,-236,0,0,0,0,0,0,-236,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-236,-236,-236,-236,0,-236,0,0,0,-236,-236,-236,-236,0,-236,-236,-236,-236,-236,-236,0,-236,-236,-236,-236,0,0,-236,-236,-236,-236,-236,
// State 272
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,0,0,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 273
-159,0,0,0,0,0,0,-159,-159,0,0,0,0,-159,-159,0,0,0,0,0,0,0,-159,0,0,0,0,0,0,0,0,0,0,0,-159,-159,-159,-159,0,-159,0,0,0,-159,-159,-159,-159,0,-159,-159,-159,-159,-159,-159,0,-159,-159,-159,-159,0,0,-159,-159,-159,-159,-159,
// State 274
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,299,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 275
-233,0,0,0,0,0,0,-233,0,0,0,0,0,0,-233,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-233,-233,-233,-233,0,-233,0,0,0,-233,-233,-233,-233,0,-233,-233,-233,-233,-233,-233,0,-233,-233,-233,-233,0,0,-233,-233,-233,-233,-233,
// State 276
0,0,0,0,0,0,0,0,0,0,0,0,0,-271,0,0,0,0,0,0,0,0,-271,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-271,0,0,0,0,
// State 277
0,0,0,0,0,0,0,0,0,0,0,0,0,-266,0,0,0,0,0,0,0,0,-266,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-266,0,0,0,0,
// State 278
0,0,0,0,0,0,0,0,0,0,0,0,0,-22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-22,0,0,0,0,
// State 279
0,0,0,0,0,0,0,0,0,0,0,0,0,-265,0,0,0,0,0,0,0,0,-265,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-265,0,0,0,0,
// State 280
-67,-67,0,-67,-67,-67,-67,0,-67,-67,-67,-67,-67,-67,-67,-67,0,0,-67,-67,0,0,-67,-67,-67,-67,-67,-67,-67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-67,0,0,0,0,0,0,0,0,0,0,-67,-67,-67,-67,0,0,0,0,
// State 281
-69,-69,0,0,-69,-69,-69,0,-69,0,-69,-69,-69,-69,-69,-69,0,0,0,-69,0,0,-69,-69,-69,-69,-69,-69,-69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-69,0,0,0,0,0,0,0,0,0,0,-69,-69,-69,-69,0,0,0,0,
// State 282
0,-73,0,0,-73,-73,-73,0,-73,0,-73,0,-73,-73,0,-73,0,0,0,-73,0,0,-73,0,0,-73,-73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-73,-73,-73,-73,0,0,0,0,
// State 283
0,0,0,0,-75,-75,-75,0,-75,0,-75,0,-75,-75,0,-75,0,0,0,-75,0,0,-75,0,0,-75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-75,-75,-75,-75,0,0,0,0,
// State 284
0,0,0,0,-77,0,-77,0,-77,0,-77,0,-77,-77,0,-77,0,0,0,-77,0,0,-77,0,0,-77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-77,-77,-77,-77,0,0,0,0,
// State 285
-112,-112,0,-112,-112,-112,-112,0,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,-112,0,0,-112,-112,-112,-112,-112,-112,-112,-112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-112,0,0,0,0,0,0,0,0,0,0,-112,-112,-112,-112,0,0,0,0,
// State 286
-122,-122,0,0,-122,-122,-122,0,-122,0,-122,0,-122,-122,0,-122,0,0,0,-122,0,0,-122,-122,-122,-122,-122,-122,-122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-122,0,0,0,0,0,0,0,0,0,0,-122,-122,-122,-122,0,0,0,0,
// State 287
-143,0,0,0,0,0,0,-143,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-143,0,0,-143,
// State 288
0,0,0,0,0,0,0,0,-117,0,0,0,0,-117,0,0,0,0,0,0,0,0,-117,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-117,0,0,-117,0,0,0,0,
// State 289
0,0,0,0,0,0,0,0,-116,0,0,0,0,-116,0,0,0,0,0,0,0,0,-116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-116,0,0,-116,0,0,0,0,
// State 290
0,0,0,0,0,0,0,0,306,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 291
0,0,0,0,0,0,0,0,-165,0,0,0,0,307,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 292
0,0,0,0,0,0,0,0,-98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 293
-80,0,0,0,0,0,0,-80,-80,0,0,0,0,-80,-80,0,0,0,0,0,0,0,-80,0,0,0,0,0,0,0,0,0,0,0,-80,-80,-80,-80,0,-80,0,-80,0,-80,-80,-80,-80,0,-80,-80,-80,-80,-80,-80,0,-80,-80,-80,-80,0,0,-80,-80,-80,-80,-80,
// State 294
0,0,0,0,0,0,0,0,-186,0,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 295
-114,-114,0,-114,-114,-114,-114,0,-114,-114,-114,-114,-114,-114,-114,-114,-114,-114,-114,-114,0,0,-114,-114,-114,-114,-114,-114,-114,-114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-114,0,0,0,0,0,0,0,0,0,0,-114,-114,-114,-114,0,0,0,0,
// State 296
-234,0,0,0,0,0,0,-234,0,0,0,0,0,0,-234,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-234,-234,-234,-234,0,-234,0,0,0,-234,-234,-234,-234,0,-234,-234,-234,-234,-234,-234,0,-234,-234,-234,-234,0,0,-234,-234,-234,-234,-234,
// State 297
-141,0,0,0,0,0,0,-141,-141,0,0,0,0,-141,-141,0,0,0,0,0,0,0,-141,0,0,0,0,0,0,0,0,0,0,0,-141,-141,-141,-141,0,-141,0,102,0,-141,-141,-141,-141,0,-141,-141,-141,-141,-141,-141,0,-141,-141,-141,-141,0,0,-141,-141,-141,-141,-141,
// State 298
-232,0,0,0,0,0,0,-232,0,0,0,0,0,0,-232,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-232,-232,-232,-232,0,-232,0,0,0,-232,-232,-232,-232,0,-232,-232,-232,-232,-232,-232,0,-232,-232,-232,-232,0,0,-232,-232,-232,-232,-232,
// State 299
-160,0,0,0,0,0,0,-160,-160,0,0,0,0,-160,-160,0,0,0,0,0,0,0,-160,0,0,0,0,0,0,0,0,0,0,0,-160,-160,-160,-160,0,-160,0,0,0,-160,-160,-160,-160,0,-160,-160,-160,-160,-160,-160,0,-160,-160,-160,-160,0,0,-160,-160,-160,-160,-160,
// State 300
0,0,0,0,0,0,0,0,0,0,0,0,0,-267,0,0,0,0,0,0,0,0,-267,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-267,0,0,0,0,
// State 301
-111,-111,0,-111,-111,-111,-111,0,-111,-111,-111,-111,-111,-111,-111,-111,-111,-111,-111,-111,0,0,-111,-111,-111,-111,-111,-111,-111,-111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-111,0,0,0,0,0,0,0,0,0,0,-111,-111,-111,-111,0,0,0,0,
// State 302
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-102,-102,0,0,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 303
0,0,0,0,0,0,0,0,311,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 304
0,0,0,0,0,0,0,0,-167,0,0,0,0,312,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 305
-91,-91,0,-91,-91,-91,-91,0,-91,-91,-91,-91,-91,-91,-91,-91,-91,-91,-91,-91,0,0,-91,-91,-91,-91,-91,-91,-91,-91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-91,0,0,0,0,0,0,0,0,0,0,-91,-91,-91,-91,0,0,0,0,
// State 306
-48,0,0,0,0,0,0,-48,-48,0,0,0,0,0,-48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-48,0,0,-48,0,0,-48,0,0,0,0,0,-48,0,-48,-48,0,0,0,-48,-48,-48,-48,
// State 307
0,0,0,0,0,0,0,0,-16,0,0,0,0,-16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 308
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 309
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,317,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 310
-92,-92,0,-92,-92,-92,-92,0,-92,-92,-92,-92,-92,-92,-92,-92,-92,-92,-92,-92,0,0,-92,-92,-92,-92,-92,-92,-92,-92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-92,0,0,0,0,0,0,0,0,0,0,-92,-92,-92,-92,0,0,0,0,
// State 311
-49,0,0,0,0,0,0,-49,-49,0,0,0,0,0,-49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-49,0,0,-49,0,0,-49,0,0,0,0,0,-49,0,-49,-49,0,0,0,-49,-49,-49,-49,
// State 312
0,0,0,0,0,0,0,0,-17,0,0,0,0,-17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 313
-106,0,0,0,0,0,0,-106,-106,0,0,0,0,-106,-106,0,0,0,0,0,0,0,-106,0,0,0,0,0,0,0,0,0,0,0,-106,-106,-106,-106,0,-106,0,0,0,-106,-106,-106,-106,0,-106,-106,-106,-106,-106,-106,0,-106,-106,-106,-106,0,0,-106,-106,-106,-106,-106,
// State 314
-142,0,0,0,0,0,0,-142,-142,0,0,0,0,-142,-142,0,0,0,0,0,0,0,-142,0,0,0,0,0,0,0,0,0,0,0,-142,-142,-142,-142,0,-142,0,0,0,-142,-142,-142,-142,0,-142,-142,-142,-142,-142,-142,0,-142,-142,-142,-142,0,0,-142,-142,-142,-142,-142,
// State 315
-105,0,0,0,0,0,0,-105,-105,0,0,0,0,-105,-105,0,0,0,0,0,0,0,-105,0,0,0,0,0,0,0,0,0,0,0,-105,-105,-105,-105,0,-105,0,0,0,-105,-105,-105,-105,0,-105,-105,-105,-105,-105,-105,0,-105,-105,-105,-105,0,0,-105,-105,-105,-105,-105,
// State 316
-231,0,0,0,0,0,0,-231,0,0,0,0,0,0,-231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-231,-231,-231,-231,0,-231,0,0,0,-231,-231,-231,-231,0,-231,-231,-231,-231,-231,-231,0,-231,-231,-231,-231,0,0,-231,-231,-231,-231,-231,
// State 317
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,319,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
// State 318
-230,0,0,0,0,0,0,-230,0,0,0,0,0,0,-230,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-230,-230,-230,-230,0,-230,0,0,0,-230,-230,-230,-230,0,-230,-230,-230,-230,-230,-230,0,-230,-230,-230,-230,0,0,-230,-230,-230,-230,-230,
];
fn __action(state: i16, integer: usize) -> i16 {
__ACTION[(state as usize) * 66 + integer]
}
const __EOF_ACTION: &[i16] = &[
// State 0
-218,
// State 1
-219,
// State 2
0,
// State 3
0,
// State 4
0,
// State 5
0,
// State 6
0,
// State 7
0,
// State 8
0,
// State 9
0,
// State 10
0,
// State 11
0,
// State 12
0,
// State 13
0,
// State 14
0,
// State 15
0,
// State 16
0,
// State 17
0,
// State 18
0,
// State 19
0,
// State 20
0,
// State 21
0,
// State 22
0,
// State 23
0,
// State 24
0,
// State 25
0,
// State 26
0,
// State 27
0,
// State 28
0,
// State 29
0,
// State 30
0,
// State 31
0,
// State 32
0,
// State 33
0,
// State 34
0,
// State 35
0,
// State 36
0,
// State 37
0,
// State 38
0,
// State 39
0,
// State 40
0,
// State 41
0,
// State 42
0,
// State 43
0,
// State 44
0,
// State 45
0,
// State 46
0,
// State 47
0,
// State 48
0,
// State 49
0,
// State 50
0,
// State 51
0,
// State 52
0,
// State 53
0,
// State 54
0,
// State 55
0,
// State 56
0,
// State 57
0,
// State 58
0,
// State 59
0,
// State 60
0,
// State 61
0,
// State 62
0,
// State 63
0,
// State 64
0,
// State 65
0,
// State 66
0,
// State 67
0,
// State 68
0,
// State 69
0,
// State 70
0,
// State 71
0,
// State 72
0,
// State 73
0,
// State 74
0,
// State 75
0,
// State 76
0,
// State 77
0,
// State 78
0,
// State 79
0,
// State 80
0,
// State 81
0,
// State 82
0,
// State 83
0,
// State 84
0,
// State 85
0,
// State 86
0,
// State 87
0,
// State 88
0,
// State 89
0,
// State 90
0,
// State 91
0,
// State 92
0,
// State 93
0,
// State 94
0,
// State 95
0,
// State 96
0,
// State 97
0,
// State 98
0,
// State 99
0,
// State 100
0,
// State 101
0,
// State 102
0,
// State 103
-149,
// State 104
-148,
// State 105
-150,
// State 106
-153,
// State 107
-146,
// State 108
-275,
// State 109
-147,
// State 110
-145,
// State 111
0,
// State 112
0,
// State 113
-154,
// State 114
0,
// State 115
0,
// State 116
0,
// State 117
0,
// State 118
0,
// State 119
0,
// State 120
0,
// State 121
0,
// State 122
-139,
// State 123
-190,
// State 124
-193,
// State 125
0,
// State 126
-257,
// State 127
0,
// State 128
0,
// State 129
0,
// State 130
0,
// State 131
0,
// State 132
0,
// State 133
0,
// State 134
0,
// State 135
0,
// State 136
0,
// State 137
0,
// State 138
0,
// State 139
0,
// State 140
0,
// State 141
0,
// State 142
0,
// State 143
-191,
// State 144
0,
// State 145
0,
// State 146
0,
// State 147
0,
// State 148
0,
// State 149
0,
// State 150
0,
// State 151
0,
// State 152
0,
// State 153
-87,
// State 154
0,
// State 155
0,
// State 156
0,
// State 157
-96,
// State 158
0,
// State 159
0,
// State 160
0,
// State 161
0,
// State 162
-192,
// State 163
-245,
// State 164
0,
// State 165
0,
// State 166
0,
// State 167
0,
// State 168
0,
// State 169
0,
// State 170
0,
// State 171
0,
// State 172
0,
// State 173
0,
// State 174
-95,
// State 175
0,
// State 176
0,
// State 177
0,
// State 178
-84,
// State 179
-138,
// State 180
-85,
// State 181
0,
// State 182
0,
// State 183
0,
// State 184
0,
// State 185
-86,
// State 186
0,
// State 187
0,
// State 188
0,
// State 189
-94,
// State 190
0,
// State 191
0,
// State 192
0,
// State 193
0,
// State 194
0,
// State 195
0,
// State 196
0,
// State 197
0,
// State 198
0,
// State 199
0,
// State 200
0,
// State 201
0,
// State 202
0,
// State 203
0,
// State 204
0,
// State 205
0,
// State 206
0,
// State 207
0,
// State 208
0,
// State 209
0,
// State 210
0,
// State 211
0,
// State 212
0,
// State 213
0,
// State 214
0,
// State 215
-81,
// State 216
0,
// State 217
0,
// State 218
0,
// State 219
0,
// State 220
0,
// State 221
0,
// State 222
0,
// State 223
0,
// State 224
0,
// State 225
-93,
// State 226
-137,
// State 227
0,
// State 228
0,
// State 229
0,
// State 230
0,
// State 231
0,
// State 232
0,
// State 233
0,
// State 234
0,
// State 235
0,
// State 236
0,
// State 237
0,
// State 238
0,
// State 239
0,
// State 240
0,
// State 241
0,
// State 242
0,
// State 243
0,
// State 244
0,
// State 245
0,
// State 246
0,
// State 247
0,
// State 248
0,
// State 249
0,
// State 250
0,
// State 251
0,
// State 252
0,
// State 253
0,
// State 254
0,
// State 255
0,
// State 256
0,
// State 257
0,
// State 258
0,
// State 259
0,
// State 260
-79,
// State 261
0,
// State 262
0,
// State 263
0,
// State 264
0,
// State 265
-82,
// State 266
0,
// State 267
0,
// State 268
0,
// State 269
0,
// State 270
0,
// State 271
0,
// State 272
0,
// State 273
0,
// State 274
0,
// State 275
0,
// State 276
0,
// State 277
0,
// State 278
0,
// State 279
0,
// State 280
0,
// State 281
0,
// State 282
0,
// State 283
0,
// State 284
0,
// State 285
0,
// State 286
0,
// State 287
0,
// State 288
0,
// State 289
0,
// State 290
0,
// State 291
0,
// State 292
0,
// State 293
-80,
// State 294
0,
// State 295
0,
// State 296
0,
// State 297
0,
// State 298
0,
// State 299
0,
// State 300
0,
// State 301
0,
// State 302
0,
// State 303
0,
// State 304
0,
// State 305
0,
// State 306
0,
// State 307
0,
// State 308
0,
// State 309
0,
// State 310
0,
// State 311
0,
// State 312
0,
// State 313
0,
// State 314
0,
// State 315
0,
// State 316
0,
// State 317
0,
// State 318
0,
];
fn __goto(state: i16, nt: usize) -> i16 {
match nt {
4 => match state {
33 => 167,
_ => 148,
},
7 => 294,
10 => match state {
51 => 219,
_ => 182,
},
15 => match state {
11 => 125,
46 => 184,
53 => 224,
64 => 261,
94 => 302,
_ => 33,
},
24 => 23,
27 => 96,
30 => 28,
33 => 26,
36 => 37,
39 => 55,
40 => 56,
41 => 57,
42 => 58,
43 => 59,
44 => 60,
45 => match state {
40 | 54 => 178,
71 => 273,
89 => 297,
90 => 299,
_ => 191,
},
46 => match state {
101 => 313,
_ => 192,
},
47 => match state {
54 => 226,
_ => 179,
},
48 => 103,
49 => match state {
23 => 151,
_ => 131,
},
51 => 193,
52 => 104,
53 => match state {
36 => 168,
_ => 132,
},
54 => match state {
95 => 303,
_ => 290,
},
55 => 139,
56 => match state {
18 => 144,
25 => 155,
38 => 173,
39 => 175,
47 => 188,
_ => 136,
},
57 => 246,
59 => 314,
60 => match state {
67 => 88,
69 => 89,
73 => 90,
68 => 269,
72 => 274,
96 => 304,
97 => 307,
99 => 309,
100 => 312,
102 => 317,
_ => 291,
},
61 => 61,
62 => match state {
85 => 288,
86 => 289,
_ => 194,
},
63 => match state {
76 => 280,
_ => 195,
},
64 => match state {
77 => 281,
_ => 196,
},
65 => 197,
66 => match state {
78 => 92,
_ => 62,
},
67 => match state {
79 => 282,
_ => 198,
},
68 => match state {
80 => 283,
_ => 199,
},
69 => match state {
81 => 284,
_ => 200,
},
70 => 63,
72 => match state {
50 | 66 => 201,
_ => 266,
},
73 => match state {
50 => 202,
66 => 263,
_ => 267,
},
74 => match state {
28 => 160,
_ => 140,
},
76 => 122,
77 => 105,
78 => match state {
4 => 9,
5 => 10,
7 | 32 | 42 | 52 | 74..=75 | 91 => 11,
34 => 46,
44 => 53,
50 | 65..=69 | 72..=73 | 76..=81 | 85..=87 | 95..=97 | 99..=100 | 102 => 64,
83 => 94,
2 => 115,
3 => 117,
6 => 118,
8 => 121,
13 | 23 | 36 => 133,
16 | 28 => 141,
19 | 35 => 145,
20 => 147,
27 => 159,
30 | 45 => 164,
31 => 166,
70 => 272,
82 => 285,
93 => 301,
_ => 21,
},
79 => match state {
101 => 315,
_ => 203,
},
80 => 247,
81 => match state {
1 | 29 => 113,
50 | 66 => 204,
_ => 106,
},
83 => match state {
17 => 29,
_ => 1,
},
84 => 205,
85 => 206,
86 => 134,
87 => 292,
88 => 142,
89 => 137,
90 => 149,
91 => 127,
92 => 268,
94 => 107,
95 => 123,
96 => 207,
97 => 227,
98 => 231,
99 => 234,
100 => 239,
101 => 242,
102 => 250,
103 => 244,
105 => 108,
106 => 84,
107 => 65,
108 => 76,
109 => 77,
110 => 78,
111 => 79,
112 => 80,
113 => 85,
114 => 81,
115 => match state {
66 => 264,
_ => 208,
},
117 => 66,
118 => 109,
119 => match state {
26 => 156,
_ => 138,
},
121 => match state {
12 => 128,
14 => 135,
22 => 150,
24 => 154,
37 => 169,
41 => 181,
48 => 190,
84 => 286,
98 => 308,
_ => 54,
},
123 => match state {
65 => 262,
_ => 209,
},
124 => 110,
125 => match state {
32 => 43,
42 => 51,
7 => 119,
75 | 91 => 278,
_ => 222,
},
126 => match state {
0..=1 | 17 | 29 | 50 | 66 => 111,
_ => 27,
},
_ => 0,
}
}
fn __expected_tokens(__state: i16) -> Vec<::std::string::String> {
const __TERMINAL: &[&str] = &[
r###""!""###,
r###""!=""###,
r###""#""###,
r###""%""###,
r###""%=""###,
r###""&""###,
r###""&=""###,
r###""(""###,
r###"")""###,
r###""*""###,
r###""*=""###,
r###""+""###,
r###""+=""###,
r###"",""###,
r###""-""###,
r###""-=""###,
r###"".""###,
r###"".""###,
r###""/""###,
r###""/=""###,
r###"":""###,
r###""::""###,
r###"";""###,
r###""<""###,
r###""<=""###,
r###""=""###,
r###""==""###,
r###"">""###,
r###"">=""###,
r###""@""###,
r###""[""###,
r###""]""###,
r###""^""###,
r###""as""###,
r###""branch""###,
r###""break""###,
r###""builtin""###,
r###""class""###,
r###""const""###,
r###""continue""###,
r###""do""###,
r###""else""###,
r###""enum""###,
r###""false""###,
r###""fn""###,
r###""fn""###,
r###""if""###,
r###""is""###,
r###""let""###,
r###""loop""###,
r###""mod""###,
r###""pub""###,
r###""return""###,
r###""struct""###,
r###""trait""###,
r###""true""###,
r###""use""###,
r###""while""###,
r###""{""###,
r###""|""###,
r###""|=""###,
r###""}""###,
r###"TokenIdentifier"###,
r###"TokenInt"###,
r###"TokenString"###,
];
__TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
let next_state = __action(__state, index);
if next_state == 0 {
None
} else {
Some(terminal.to_string())
}
}).collect()
}
pub struct __StateMachine<'input, '__1, '__2>
where 
{
input: &'input str,
intr: &'__1 Interner,
errs: &'__2 mut Vec<String>,
__phantom: ::std::marker::PhantomData<(&'input ())>,
}
impl<'input, '__1, '__2> __state_machine::ParserDefinition for __StateMachine<'input, '__1, '__2>
where 
{
type Location = usize;
type Error = ParserError;
type Token = Token<'input>;
type TokenIndex = usize;
type Symbol = __Symbol<'input>;
type Success = Program;
type StateIndex = i16;
type Action = i16;
type ReduceIndex = i16;
type NonterminalIndex = usize;

#[inline]
fn start_location(&self) -> Self::Location {
  Default::default()
}

#[inline]
fn start_state(&self) -> Self::StateIndex {
  0
}

#[inline]
fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
__token_to_integer(token, ::std::marker::PhantomData::<(&())>)
}

#[inline]
fn action(&self, state: i16, integer: usize) -> i16 {
__action(state, integer)
}

#[inline]
fn error_action(&self, state: i16) -> i16 {
__action(state, 66 - 1)
}

#[inline]
fn eof_action(&self, state: i16) -> i16 {
__EOF_ACTION[state as usize]
}

#[inline]
fn goto(&self, state: i16, nt: usize) -> i16 {
__goto(state, nt)
}

fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
__token_to_symbol(token_index, token, ::std::marker::PhantomData::<(&())>)
}

fn expected_tokens(&self, state: i16) -> Vec<String> {
__expected_tokens(state)
}

#[inline]
fn uses_error_recovery(&self) -> bool {
true
}

#[inline]
fn error_recovery_symbol(
&self,
recovery: __state_machine::ErrorRecovery<Self>,
) -> Self::Symbol {
__Symbol::Variant2(recovery)
}

fn reduce(
&mut self,
action: i16,
start_location: Option<&Self::Location>,
states: &mut Vec<i16>,
symbols: &mut Vec<__state_machine::SymbolTriple<Self>>,
) -> Option<__state_machine::ParseResult<Self>> {
__reduce(
self.input,
self.intr,
self.errs,
action,
start_location,
states,
symbols,
::std::marker::PhantomData::<(&())>,
)
}

fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
__simulate_reduce(action, ::std::marker::PhantomData::<(&())>)
}
}
fn __token_to_integer<
    'input,
>(
__token: &Token<'input>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> Option<usize>
{
match *__token {
Token::Exclamation if true => Some(0),
Token::BinOp(BinOp::Ne) if true => Some(1),
Token::Hash if true => Some(2),
Token::BinOp(BinOp::Rem) if true => Some(3),
Token::AssignOp(BinOp::Rem) if true => Some(4),
Token::BinOp(BinOp::And) if true => Some(5),
Token::AssignOp(BinOp::And) if true => Some(6),
Token::OpenParen if true => Some(7),
Token::CloseParen if true => Some(8),
Token::BinOp(BinOp::Mul) if true => Some(9),
Token::AssignOp(BinOp::Mul) if true => Some(10),
Token::BinOp(BinOp::Add) if true => Some(11),
Token::AssignOp(BinOp::Add) if true => Some(12),
Token::Comma if true => Some(13),
Token::BinOp(BinOp::Sub) if true => Some(14),
Token::AssignOp(BinOp::Sub) if true => Some(15),
Token::Dot if true => Some(16),
Token::Dot if true => Some(17),
Token::BinOp(BinOp::Div) if true => Some(18),
Token::AssignOp(BinOp::Div) if true => Some(19),
Token::Colon if true => Some(20),
Token::PathSeg if true => Some(21),
Token::Semicolon if true => Some(22),
Token::BinOp(BinOp::Lt) if true => Some(23),
Token::BinOp(BinOp::Le) if true => Some(24),
Token::Assign if true => Some(25),
Token::BinOp(BinOp::Eq) if true => Some(26),
Token::BinOp(BinOp::Gt) if true => Some(27),
Token::BinOp(BinOp::Ge) if true => Some(28),
Token::At if true => Some(29),
Token::OpenBracket if true => Some(30),
Token::CloseBracket if true => Some(31),
Token::Caret if true => Some(32),
Token::As if true => Some(33),
Token::Branch if true => Some(34),
Token::Break if true => Some(35),
Token::Builtin if true => Some(36),
Token::Class if true => Some(37),
Token::Const if true => Some(38),
Token::Continue if true => Some(39),
Token::Do if true => Some(40),
Token::Else if true => Some(41),
Token::Enum if true => Some(42),
Token::False if true => Some(43),
Token::Fn if true => Some(44),
Token::Fn if true => Some(45),
Token::If if true => Some(46),
Token::Is if true => Some(47),
Token::Let if true => Some(48),
Token::Loop if true => Some(49),
Token::Mod if true => Some(50),
Token::Pub if true => Some(51),
Token::Return if true => Some(52),
Token::Struct if true => Some(53),
Token::Trait if true => Some(54),
Token::True if true => Some(55),
Token::Use if true => Some(56),
Token::While if true => Some(57),
Token::OpenBlock if true => Some(58),
Token::BinOp(BinOp::Or) if true => Some(59),
Token::AssignOp(BinOp::Or) if true => Some(60),
Token::CloseBlock if true => Some(61),
Token::Identifier(_) if true => Some(62),
Token::IntLiteral(_) if true => Some(63),
Token::StringLiteral(_) if true => Some(64),
_ => None,
}
}
fn __token_to_symbol<
    'input,
>(
__token_index: usize,
__token: Token<'input>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> __Symbol<'input>
{
match __token_index {
0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 => __Symbol::Variant0(__token),
62 | 63 | 64 => match __token {
Token::Identifier(__tok0) | Token::IntLiteral(__tok0) | Token::StringLiteral(__tok0) if true => __Symbol::Variant1(__tok0),
_ => unreachable!(),
},
_ => unreachable!(),
}
}
fn __simulate_reduce<
    'input,
    '__1,
    '__2,
>(
__reduce_index: i16,
_: ::std::marker::PhantomData<(&'input ())>,
) -> __state_machine::SimulatedReduce<__StateMachine<'input, '__1, '__2>>
{
match __reduce_index {
0 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 0,
}
}
1 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 0,
}
}
2 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 1,
}
}
3 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 1,
}
}
4 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 2,
}
}
5 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 2,
}
}
6 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 3,
}
}
7 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 3,
}
}
8 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 4,
}
}
9 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 4,
}
}
10 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 4,
}
}
11 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 4,
}
}
12 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 5,
}
}
13 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 6,
}
}
14 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 6,
}
}
15 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 7,
}
}
16 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 7,
}
}
17 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 8,
}
}
18 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 9,
}
}
19 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 9,
}
}
20 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 10,
}
}
21 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 10,
}
}
22 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 11,
}
}
23 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 12,
}
}
24 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 12,
}
}
25 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 13,
}
}
26 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 14,
}
}
27 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 14,
}
}
28 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 15,
}
}
29 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 15,
}
}
30 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 16,
}
}
31 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 17,
}
}
32 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 17,
}
}
33 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 18,
}
}
34 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 19,
}
}
35 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 19,
}
}
36 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 20,
}
}
37 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 21,
}
}
38 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 21,
}
}
39 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 22,
}
}
40 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 23,
}
}
41 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 23,
}
}
42 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 24,
}
}
43 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 24,
}
}
44 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 25,
}
}
45 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 26,
}
}
46 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 26,
}
}
47 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 27,
}
}
48 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 27,
}
}
49 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 28,
}
}
50 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 29,
}
}
51 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 29,
}
}
52 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 30,
}
}
53 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 30,
}
}
54 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 31,
}
}
55 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 32,
}
}
56 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 32,
}
}
57 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 33,
}
}
58 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 33,
}
}
59 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 34,
}
}
60 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 35,
}
}
61 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 35,
}
}
62 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 36,
}
}
63 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 36,
}
}
64 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 37,
}
}
65 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 38,
}
}
66 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 39,
}
}
67 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 39,
}
}
68 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 40,
}
}
69 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 40,
}
}
70 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 41,
}
}
71 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 41,
}
}
72 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 42,
}
}
73 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 42,
}
}
74 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 43,
}
}
75 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 43,
}
}
76 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 44,
}
}
77 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 44,
}
}
78 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 45,
}
}
79 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 45,
}
}
80 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 45,
}
}
81 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 45,
}
}
82 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 46,
}
}
83 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 47,
}
}
84 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 47,
}
}
85 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 8,
nonterminal_produced: 48,
}
}
86 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 48,
}
}
87 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 49,
}
}
88 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 50,
}
}
89 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 50,
}
}
90 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 51,
}
}
91 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 51,
}
}
92 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 9,
nonterminal_produced: 52,
}
}
93 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 8,
nonterminal_produced: 52,
}
}
94 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 7,
nonterminal_produced: 52,
}
}
95 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 52,
}
}
96 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 53,
}
}
97 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 54,
}
}
98 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 55,
}
}
99 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 56,
}
}
100 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 57,
}
}
101 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 57,
}
}
102 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 58,
}
}
103 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 58,
}
}
104 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 59,
}
}
105 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 59,
}
}
106 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 60,
}
}
107 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 60,
}
}
108 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 61,
}
}
109 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 61,
}
}
110 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 61,
}
}
111 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 61,
}
}
112 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 61,
}
}
113 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 61,
}
}
114 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 61,
}
}
115 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 62,
}
}
116 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 62,
}
}
117 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 62,
}
}
118 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 63,
}
}
119 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 64,
}
}
120 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 65,
}
}
121 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 66,
}
}
122 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 66,
}
}
123 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 67,
}
}
124 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 68,
}
}
125 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 69,
}
}
126 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 70,
}
}
127 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 71,
}
}
128 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 71,
}
}
129 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 72,
}
}
130 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 72,
}
}
131 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 72,
}
}
132 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 73,
}
}
133 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 74,
}
}
134 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 75,
}
}
135 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 75,
}
}
136 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 76,
}
}
137 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 76,
}
}
138 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 77,
}
}
139 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 78,
}
}
140 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 79,
}
}
141 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 79,
}
}
142 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 80,
}
}
143 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 80,
}
}
144 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 81,
}
}
145 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 81,
}
}
146 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 81,
}
}
147 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 81,
}
}
148 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 81,
}
}
149 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 81,
}
}
150 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 82,
}
}
151 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 82,
}
}
152 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 83,
}
}
153 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 83,
}
}
154 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 84,
}
}
155 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 84,
}
}
156 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 84,
}
}
157 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 84,
}
}
158 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 85,
}
}
159 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 85,
}
}
160 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 86,
}
}
161 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 86,
}
}
162 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 86,
}
}
163 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 86,
}
}
164 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 87,
}
}
165 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 87,
}
}
166 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 87,
}
}
167 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 87,
}
}
168 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 88,
}
}
169 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 88,
}
}
170 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 88,
}
}
171 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 88,
}
}
172 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 89,
}
}
173 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 89,
}
}
174 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 89,
}
}
175 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 89,
}
}
176 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 90,
}
}
177 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 90,
}
}
178 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 90,
}
}
179 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 90,
}
}
180 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 91,
}
}
181 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 91,
}
}
182 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 91,
}
}
183 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 91,
}
}
184 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 92,
}
}
185 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 92,
}
}
186 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 93,
}
}
187 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 93,
}
}
188 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 93,
}
}
189 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 94,
}
}
190 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 95,
}
}
191 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 95,
}
}
192 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 95,
}
}
193 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 96,
}
}
194 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 96,
}
}
195 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 97,
}
}
196 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 97,
}
}
197 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 97,
}
}
198 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 98,
}
}
199 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 98,
}
}
200 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 99,
}
}
201 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 99,
}
}
202 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 99,
}
}
203 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 99,
}
}
204 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 100,
}
}
205 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 100,
}
}
206 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 101,
}
}
207 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 102,
}
}
208 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 102,
}
}
209 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 102,
}
}
210 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 102,
}
}
211 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 102,
}
}
212 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 102,
}
}
213 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 102,
}
}
214 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 103,
}
}
215 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 104,
}
}
216 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 104,
}
}
217 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 105,
}
}
218 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 105,
}
}
219 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 106,
}
}
220 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 107,
}
}
221 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 108,
}
}
222 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 109,
}
}
223 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 110,
}
}
224 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 111,
}
}
225 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 112,
}
}
226 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 113,
}
}
227 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 114,
}
}
228 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 115,
}
}
229 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 7,
nonterminal_produced: 115,
}
}
230 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 115,
}
}
231 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 115,
}
}
232 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 115,
}
}
233 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 115,
}
}
234 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 115,
}
}
235 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 115,
}
}
236 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 115,
}
}
237 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 115,
}
}
238 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 115,
}
}
239 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 115,
}
}
240 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 116,
}
}
241 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 116,
}
}
242 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 117,
}
}
243 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 117,
}
}
244 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 118,
}
}
245 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 119,
}
}
246 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 120,
}
}
247 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 120,
}
}
248 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 121,
}
}
249 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 121,
}
}
250 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 121,
}
}
251 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 121,
}
}
252 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 122,
}
}
253 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 122,
}
}
254 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 123,
}
}
255 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 123,
}
}
256 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 124,
}
}
257 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 125,
}
}
258 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 2,
nonterminal_produced: 125,
}
}
259 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 125,
}
}
260 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 125,
}
}
261 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 3,
nonterminal_produced: 125,
}
}
262 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 4,
nonterminal_produced: 125,
}
}
263 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 125,
}
}
264 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 7,
nonterminal_produced: 125,
}
}
265 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 7,
nonterminal_produced: 125,
}
}
266 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 8,
nonterminal_produced: 125,
}
}
267 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 5,
nonterminal_produced: 125,
}
}
268 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 125,
}
}
269 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 6,
nonterminal_produced: 125,
}
}
270 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 7,
nonterminal_produced: 125,
}
}
271 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 125,
}
}
272 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 1,
nonterminal_produced: 126,
}
}
273 => {
__state_machine::SimulatedReduce::Reduce {
states_to_pop: 0,
nonterminal_produced: 126,
}
}
274 => __state_machine::SimulatedReduce::Accept,
_ => panic!("invalid reduction index {}", __reduce_index)
}
}
pub struct ProgramParser {
_priv: (),
}

impl ProgramParser {
pub fn new() -> ProgramParser {
ProgramParser {
_priv: (),
}
}

#[allow(dead_code)]
pub fn parse<
    'input,
    __TOKEN: __ToTriple<'input, >,
    __TOKENS: IntoIterator<Item=__TOKEN>,
>(
&self,
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__tokens0: __TOKENS,
) -> Result<Program, __lalrpop_util::ParseError<usize, Token<'input>, ParserError>>
{
let __tokens = __tokens0.into_iter();
let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
__state_machine::Parser::drive(
__StateMachine {
input,
intr,
errs,
__phantom: ::std::marker::PhantomData::<(&())>,
},
__tokens,
)
}
}
fn __accepts<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__error_state: i16,
__states: & [i16],
__opt_integer: Option<usize>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> bool
{
let mut __states = __states.to_vec();
__states.push(__error_state);
loop {
let mut __states_len = __states.len();
let __top = __states[__states_len - 1];
let __action = match __opt_integer {
None => __EOF_ACTION[__top as usize],
Some(__integer) => __action(__top, __integer),
};
if __action == 0 { return false; }
if __action > 0 { return true; }
let (__to_pop, __nt) = match __simulate_reduce(-(__action + 1), ::std::marker::PhantomData::<(&())>) {
__state_machine::SimulatedReduce::Reduce {
states_to_pop, nonterminal_produced
} => (states_to_pop, nonterminal_produced),
__state_machine::SimulatedReduce::Accept => return true,
};
__states_len -= __to_pop;
__states.truncate(__states_len);
let __top = __states[__states_len - 1];
let __next_state = __goto(__top, __nt);
__states.push(__next_state);
}
}
pub(crate) fn __reduce<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__action: i16,
__lookahead_start: Option<&usize>,
__states: &mut ::std::vec::Vec<i16>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> Option<Result<Program,__lalrpop_util::ParseError<usize, Token<'input>, ParserError>>>
{
let (__pop_states, __nonterminal) = match __action {
0 => {
__reduce0(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
1 => {
__reduce1(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
2 => {
__reduce2(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
3 => {
__reduce3(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
4 => {
__reduce4(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
5 => {
__reduce5(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
6 => {
__reduce6(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
7 => {
__reduce7(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
8 => {
__reduce8(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
9 => {
__reduce9(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
10 => {
__reduce10(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
11 => {
__reduce11(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
12 => {
__reduce12(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
13 => {
__reduce13(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
14 => {
__reduce14(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
15 => {
__reduce15(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
16 => {
__reduce16(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
17 => {
__reduce17(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
18 => {
__reduce18(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
19 => {
__reduce19(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
20 => {
__reduce20(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
21 => {
__reduce21(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
22 => {
__reduce22(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
23 => {
__reduce23(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
24 => {
__reduce24(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
25 => {
__reduce25(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
26 => {
__reduce26(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
27 => {
__reduce27(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
28 => {
__reduce28(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
29 => {
__reduce29(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
30 => {
__reduce30(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
31 => {
__reduce31(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
32 => {
__reduce32(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
33 => {
__reduce33(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
34 => {
__reduce34(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
35 => {
__reduce35(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
36 => {
__reduce36(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
37 => {
__reduce37(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
38 => {
__reduce38(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
39 => {
__reduce39(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
40 => {
__reduce40(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
41 => {
__reduce41(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
42 => {
__reduce42(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
43 => {
__reduce43(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
44 => {
__reduce44(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
45 => {
__reduce45(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
46 => {
__reduce46(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
47 => {
__reduce47(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
48 => {
__reduce48(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
49 => {
__reduce49(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
50 => {
__reduce50(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
51 => {
__reduce51(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
52 => {
__reduce52(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
53 => {
__reduce53(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
54 => {
__reduce54(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
55 => {
__reduce55(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
56 => {
__reduce56(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
57 => {
__reduce57(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
58 => {
__reduce58(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
59 => {
__reduce59(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
60 => {
__reduce60(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
61 => {
__reduce61(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
62 => {
__reduce62(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
63 => {
__reduce63(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
64 => {
__reduce64(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
65 => {
__reduce65(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
66 => {
__reduce66(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
67 => {
__reduce67(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
68 => {
__reduce68(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
69 => {
__reduce69(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
70 => {
__reduce70(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
71 => {
__reduce71(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
72 => {
__reduce72(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
73 => {
__reduce73(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
74 => {
__reduce74(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
75 => {
__reduce75(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
76 => {
__reduce76(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
77 => {
__reduce77(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
78 => {
__reduce78(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
79 => {
__reduce79(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
80 => {
__reduce80(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
81 => {
__reduce81(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
82 => {
__reduce82(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
83 => {
__reduce83(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
84 => {
__reduce84(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
85 => {
__reduce85(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
86 => {
__reduce86(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
87 => {
__reduce87(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
88 => {
__reduce88(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
89 => {
__reduce89(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
90 => {
__reduce90(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
91 => {
__reduce91(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
92 => {
__reduce92(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
93 => {
__reduce93(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
94 => {
__reduce94(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
95 => {
__reduce95(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
96 => {
__reduce96(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
97 => {
__reduce97(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
98 => {
__reduce98(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
99 => {
__reduce99(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
100 => {
__reduce100(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
101 => {
__reduce101(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
102 => {
__reduce102(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
103 => {
__reduce103(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
104 => {
__reduce104(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
105 => {
__reduce105(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
106 => {
__reduce106(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
107 => {
__reduce107(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
108 => {
__reduce108(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
109 => {
__reduce109(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
110 => {
__reduce110(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
111 => {
__reduce111(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
112 => {
__reduce112(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
113 => {
__reduce113(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
114 => {
__reduce114(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
115 => {
__reduce115(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
116 => {
__reduce116(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
117 => {
__reduce117(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
118 => {
__reduce118(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
119 => {
__reduce119(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
120 => {
__reduce120(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
121 => {
__reduce121(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
122 => {
__reduce122(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
123 => {
__reduce123(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
124 => {
__reduce124(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
125 => {
__reduce125(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
126 => {
__reduce126(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
127 => {
__reduce127(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
128 => {
__reduce128(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
129 => {
__reduce129(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
130 => {
__reduce130(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
131 => {
__reduce131(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
132 => {
__reduce132(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
133 => {
__reduce133(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
134 => {
__reduce134(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
135 => {
__reduce135(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
136 => {
__reduce136(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
137 => {
__reduce137(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
138 => {
__reduce138(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
139 => {
__reduce139(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
140 => {
__reduce140(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
141 => {
__reduce141(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
142 => {
__reduce142(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
143 => {
__reduce143(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
144 => {
__reduce144(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
145 => {
__reduce145(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
146 => {
__reduce146(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
147 => {
__reduce147(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
148 => {
__reduce148(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
149 => {
__reduce149(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
150 => {
__reduce150(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
151 => {
__reduce151(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
152 => {
__reduce152(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
153 => {
__reduce153(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
154 => {
__reduce154(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
155 => {
__reduce155(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
156 => {
__reduce156(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
157 => {
__reduce157(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
158 => {
__reduce158(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
159 => {
__reduce159(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
160 => {
__reduce160(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
161 => {
__reduce161(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
162 => {
__reduce162(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
163 => {
__reduce163(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
164 => {
__reduce164(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
165 => {
__reduce165(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
166 => {
__reduce166(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
167 => {
__reduce167(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
168 => {
__reduce168(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
169 => {
__reduce169(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
170 => {
__reduce170(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
171 => {
__reduce171(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
172 => {
__reduce172(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
173 => {
__reduce173(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
174 => {
__reduce174(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
175 => {
__reduce175(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
176 => {
__reduce176(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
177 => {
__reduce177(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
178 => {
__reduce178(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
179 => {
__reduce179(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
180 => {
__reduce180(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
181 => {
__reduce181(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
182 => {
__reduce182(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
183 => {
__reduce183(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
184 => {
__reduce184(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
185 => {
__reduce185(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
186 => {
__reduce186(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
187 => {
__reduce187(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
188 => {
__reduce188(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
189 => {
__reduce189(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
190 => {
__reduce190(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
191 => {
__reduce191(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
192 => {
__reduce192(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
193 => {
__reduce193(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
194 => {
__reduce194(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
195 => {
__reduce195(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
196 => {
__reduce196(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
197 => {
__reduce197(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
198 => {
__reduce198(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
199 => {
__reduce199(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
200 => {
__reduce200(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
201 => {
__reduce201(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
202 => {
__reduce202(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
203 => {
__reduce203(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
204 => {
__reduce204(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
205 => {
__reduce205(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
206 => {
__reduce206(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
207 => {
__reduce207(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
208 => {
__reduce208(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
209 => {
__reduce209(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
210 => {
__reduce210(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
211 => {
__reduce211(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
212 => {
__reduce212(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
213 => {
__reduce213(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
214 => {
__reduce214(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
215 => {
__reduce215(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
216 => {
__reduce216(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
217 => {
__reduce217(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
218 => {
__reduce218(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
219 => {
__reduce219(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
220 => {
__reduce220(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
221 => {
__reduce221(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
222 => {
__reduce222(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
223 => {
__reduce223(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
224 => {
__reduce224(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
225 => {
__reduce225(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
226 => {
__reduce226(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
227 => {
__reduce227(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
228 => {
__reduce228(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
229 => {
__reduce229(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
230 => {
__reduce230(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
231 => {
__reduce231(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
232 => {
__reduce232(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
233 => {
__reduce233(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
234 => {
__reduce234(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
235 => {
__reduce235(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
236 => {
__reduce236(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
237 => {
__reduce237(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
238 => {
__reduce238(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
239 => {
__reduce239(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
240 => {
__reduce240(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
241 => {
__reduce241(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
242 => {
__reduce242(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
243 => {
__reduce243(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
244 => {
__reduce244(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
245 => {
__reduce245(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
246 => {
__reduce246(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
247 => {
__reduce247(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
248 => {
__reduce248(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
249 => {
__reduce249(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
250 => {
__reduce250(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
251 => {
__reduce251(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
252 => {
__reduce252(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
253 => {
__reduce253(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
254 => {
__reduce254(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
255 => {
__reduce255(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
256 => {
__reduce256(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
257 => {
__reduce257(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
258 => {
__reduce258(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
259 => {
__reduce259(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
260 => {
__reduce260(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
261 => {
__reduce261(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
262 => {
__reduce262(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
263 => {
__reduce263(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
264 => {
__reduce264(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
265 => {
__reduce265(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
266 => {
__reduce266(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
267 => {
__reduce267(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
268 => {
__reduce268(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
269 => {
__reduce269(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
270 => {
__reduce270(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
271 => {
__reduce271(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
272 => {
__reduce272(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
273 => {
__reduce273(input, intr, errs, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&())>)
}
274 => {
// __Program = Program => ActionFn(0);
let __sym0 = __pop_Variant48(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action0::<>(input, intr, errs, __sym0);
return Some(Ok(__nt));
}
_ => panic!("invalid action code {}", __action)
};
let __states_len = __states.len();
__states.truncate(__states_len - __pop_states);
let __state = *__states.last().unwrap();
let __next_state = __goto(__state, __nonterminal);
__states.push(__next_state);
None
}
#[inline(never)]
fn __symbol_type_mismatch() -> ! {
panic!("symbol type mismatch")
}
fn __pop_Variant38<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, (Vec<FnParam>, ::std::option::Option<Type>, Option<Block>), usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant38(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant16<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, (usize, Expr, usize), usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant16(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant14<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, (usize, usize), usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant14(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant47<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, BinOp, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant47(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant26<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, Block, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant26(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant18<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, BranchVariant, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant18(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant34<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, Disambiguator, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant34(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant6<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, Expr, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant6(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant20<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, FnParam, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant20(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant12<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, Identifier, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant12(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant39<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, IsOpKind, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant39(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant28<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, Item, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant28(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant41<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, Lit, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant41(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant27<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, Option<Block>, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant27(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant44<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, Option<Expr>, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant44(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant4<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, Path, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant4(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant48<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, Program, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant48(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant51<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, Spanned<BinOp>, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant51(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant49<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, Spanned<IsOpKind>, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant49(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant50<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, Spanned<UnOpKind>, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant50(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant52<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, Stmt, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant52(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant22<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, StructField, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant22(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant0<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, Token<'input>, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant0(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant10<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, Type, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant10(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant46<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, UnOpKind, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant46(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant8<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, UseTree, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant8(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant30<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, Vec<BranchVariant>, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant30(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant31<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, Vec<Expr>, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant31(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant32<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, Vec<FnParam>, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant32(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant45<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, Vec<Item>, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant45(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant43<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, Vec<Path>, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant43(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant33<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, Vec<StructField>, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant33(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant42<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, Vec<Type>, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant42(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant55<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, Visibility, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant55(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant2<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, __lalrpop_util::ErrorRecovery<usize, Token<'input>, ParserError>, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant2(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant25<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, usize, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant25(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant17<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, ::std::option::Option<(usize, Expr, usize)>, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant17(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant15<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, ::std::option::Option<(usize, usize)>, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant15(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant29<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, ::std::option::Option<BranchVariant>, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant29(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant35<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, ::std::option::Option<Disambiguator>, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant35(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant36<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, ::std::option::Option<Expr>, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant36(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant37<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, ::std::option::Option<FnParam>, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant37(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant54<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, ::std::option::Option<StructField>, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant54(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant3<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, ::std::option::Option<Token<'input>>, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant3(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant11<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, ::std::option::Option<Type>, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant11(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant19<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, ::std::vec::Vec<BranchVariant>, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant19(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant7<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, ::std::vec::Vec<Expr>, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant7(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant21<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, ::std::vec::Vec<FnParam>, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant21(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant13<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, ::std::vec::Vec<Identifier>, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant13(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant40<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, ::std::vec::Vec<Item>, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant40(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant5<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, ::std::vec::Vec<Path>, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant5(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant53<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, ::std::vec::Vec<Stmt>, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant53(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant23<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, ::std::vec::Vec<StructField>, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant23(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant24<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, ::std::vec::Vec<Type>, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant24(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant9<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, ::std::vec::Vec<UseTree>, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant9(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
fn __pop_Variant1<
  'input,
>(
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
) -> (usize, &'input str, usize)
 {
match __symbols.pop().unwrap() {
(__l, __Symbol::Variant1(__v), __r) => (__l, __v, __r),
_ => __symbol_type_mismatch()
}
}
pub(crate) fn __reduce0<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ","? = "," => ActionFn(145);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action145::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant3(__nt), __end));
(1, 0)
}
pub(crate) fn __reduce1<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ","? =  => ActionFn(146);
let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let __end = __start.clone();
let __nt = super::__action146::<>(input, intr, errs, &__start, &__end);
__symbols.push((__start, __Symbol::Variant3(__nt), __end));
(0, 0)
}
pub(crate) fn __reduce2<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ";"? = ";" => ActionFn(129);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action129::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant3(__nt), __end));
(1, 1)
}
pub(crate) fn __reduce3<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ";"? =  => ActionFn(130);
let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let __end = __start.clone();
let __nt = super::__action130::<>(input, intr, errs, &__start, &__end);
__symbols.push((__start, __Symbol::Variant3(__nt), __end));
(0, 1)
}
pub(crate) fn __reduce4<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ("+" <Path>) = "+", Identifier => ActionFn(232);
assert!(__symbols.len() >= 2);
let __sym1 = __pop_Variant12(__symbols);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym1.2.clone();
let __nt = super::__action232::<>(input, intr, errs, __sym0, __sym1);
__symbols.push((__start, __Symbol::Variant4(__nt), __end));
(2, 2)
}
pub(crate) fn __reduce5<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ("+" <Path>) = "+", Identifier, ("::" <Identifier>)+ => ActionFn(233);
assert!(__symbols.len() >= 3);
let __sym2 = __pop_Variant13(__symbols);
let __sym1 = __pop_Variant12(__symbols);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym2.2.clone();
let __nt = super::__action233::<>(input, intr, errs, __sym0, __sym1, __sym2);
__symbols.push((__start, __Symbol::Variant4(__nt), __end));
(3, 2)
}
pub(crate) fn __reduce6<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ("+" <Path>)* =  => ActionFn(187);
let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let __end = __start.clone();
let __nt = super::__action187::<>(input, intr, errs, &__start, &__end);
__symbols.push((__start, __Symbol::Variant5(__nt), __end));
(0, 3)
}
pub(crate) fn __reduce7<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ("+" <Path>)* = ("+" <Path>)+ => ActionFn(188);
let __sym0 = __pop_Variant5(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action188::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant5(__nt), __end));
(1, 3)
}
pub(crate) fn __reduce8<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ("+" <Path>)+ = "+", Identifier => ActionFn(250);
assert!(__symbols.len() >= 2);
let __sym1 = __pop_Variant12(__symbols);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym1.2.clone();
let __nt = super::__action250::<>(input, intr, errs, __sym0, __sym1);
__symbols.push((__start, __Symbol::Variant5(__nt), __end));
(2, 4)
}
pub(crate) fn __reduce9<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ("+" <Path>)+ = "+", Identifier, ("::" <Identifier>)+ => ActionFn(251);
assert!(__symbols.len() >= 3);
let __sym2 = __pop_Variant13(__symbols);
let __sym1 = __pop_Variant12(__symbols);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym2.2.clone();
let __nt = super::__action251::<>(input, intr, errs, __sym0, __sym1, __sym2);
__symbols.push((__start, __Symbol::Variant5(__nt), __end));
(3, 4)
}
pub(crate) fn __reduce10<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ("+" <Path>)+ = ("+" <Path>)+, "+", Identifier => ActionFn(252);
assert!(__symbols.len() >= 3);
let __sym2 = __pop_Variant12(__symbols);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant5(__symbols);
let __start = __sym0.0.clone();
let __end = __sym2.2.clone();
let __nt = super::__action252::<>(input, intr, errs, __sym0, __sym1, __sym2);
__symbols.push((__start, __Symbol::Variant5(__nt), __end));
(3, 4)
}
pub(crate) fn __reduce11<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ("+" <Path>)+ = ("+" <Path>)+, "+", Identifier, ("::" <Identifier>)+ => ActionFn(253);
assert!(__symbols.len() >= 4);
let __sym3 = __pop_Variant13(__symbols);
let __sym2 = __pop_Variant12(__symbols);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant5(__symbols);
let __start = __sym0.0.clone();
let __end = __sym3.2.clone();
let __nt = super::__action253::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3);
__symbols.push((__start, __Symbol::Variant5(__nt), __end));
(4, 4)
}
pub(crate) fn __reduce12<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ("," <Expr>) = ",", Expr => ActionFn(181);
assert!(__symbols.len() >= 2);
let __sym1 = __pop_Variant6(__symbols);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym1.2.clone();
let __nt = super::__action181::<>(input, intr, errs, __sym0, __sym1);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(2, 5)
}
pub(crate) fn __reduce13<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ("," <Expr>)* =  => ActionFn(179);
let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let __end = __start.clone();
let __nt = super::__action179::<>(input, intr, errs, &__start, &__end);
__symbols.push((__start, __Symbol::Variant7(__nt), __end));
(0, 6)
}
pub(crate) fn __reduce14<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ("," <Expr>)* = ("," <Expr>)+ => ActionFn(180);
let __sym0 = __pop_Variant7(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action180::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant7(__nt), __end));
(1, 6)
}
pub(crate) fn __reduce15<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ("," <Expr>)+ = ",", Expr => ActionFn(258);
assert!(__symbols.len() >= 2);
let __sym1 = __pop_Variant6(__symbols);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym1.2.clone();
let __nt = super::__action258::<>(input, intr, errs, __sym0, __sym1);
__symbols.push((__start, __Symbol::Variant7(__nt), __end));
(2, 7)
}
pub(crate) fn __reduce16<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ("," <Expr>)+ = ("," <Expr>)+, ",", Expr => ActionFn(259);
assert!(__symbols.len() >= 3);
let __sym2 = __pop_Variant6(__symbols);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant7(__symbols);
let __start = __sym0.0.clone();
let __end = __sym2.2.clone();
let __nt = super::__action259::<>(input, intr, errs, __sym0, __sym1, __sym2);
__symbols.push((__start, __Symbol::Variant7(__nt), __end));
(3, 7)
}
pub(crate) fn __reduce17<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ("," <UseTree>) = ",", UseTree => ActionFn(149);
assert!(__symbols.len() >= 2);
let __sym1 = __pop_Variant8(__symbols);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym1.2.clone();
let __nt = super::__action149::<>(input, intr, errs, __sym0, __sym1);
__symbols.push((__start, __Symbol::Variant8(__nt), __end));
(2, 8)
}
pub(crate) fn __reduce18<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ("," <UseTree>)* =  => ActionFn(147);
let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let __end = __start.clone();
let __nt = super::__action147::<>(input, intr, errs, &__start, &__end);
__symbols.push((__start, __Symbol::Variant9(__nt), __end));
(0, 9)
}
pub(crate) fn __reduce19<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ("," <UseTree>)* = ("," <UseTree>)+ => ActionFn(148);
let __sym0 = __pop_Variant9(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action148::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant9(__nt), __end));
(1, 9)
}
pub(crate) fn __reduce20<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ("," <UseTree>)+ = ",", UseTree => ActionFn(262);
assert!(__symbols.len() >= 2);
let __sym1 = __pop_Variant8(__symbols);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym1.2.clone();
let __nt = super::__action262::<>(input, intr, errs, __sym0, __sym1);
__symbols.push((__start, __Symbol::Variant9(__nt), __end));
(2, 10)
}
pub(crate) fn __reduce21<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ("," <UseTree>)+ = ("," <UseTree>)+, ",", UseTree => ActionFn(263);
assert!(__symbols.len() >= 3);
let __sym2 = __pop_Variant8(__symbols);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant9(__symbols);
let __start = __sym0.0.clone();
let __end = __sym2.2.clone();
let __nt = super::__action263::<>(input, intr, errs, __sym0, __sym1, __sym2);
__symbols.push((__start, __Symbol::Variant9(__nt), __end));
(3, 10)
}
pub(crate) fn __reduce22<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (":" <Type>) = ":", Type => ActionFn(140);
assert!(__symbols.len() >= 2);
let __sym1 = __pop_Variant10(__symbols);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym1.2.clone();
let __nt = super::__action140::<>(input, intr, errs, __sym0, __sym1);
__symbols.push((__start, __Symbol::Variant10(__nt), __end));
(2, 11)
}
pub(crate) fn __reduce23<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (":" <Type>)? = ":", Type => ActionFn(272);
assert!(__symbols.len() >= 2);
let __sym1 = __pop_Variant10(__symbols);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym1.2.clone();
let __nt = super::__action272::<>(input, intr, errs, __sym0, __sym1);
__symbols.push((__start, __Symbol::Variant11(__nt), __end));
(2, 12)
}
pub(crate) fn __reduce24<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (":" <Type>)? =  => ActionFn(139);
let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let __end = __start.clone();
let __nt = super::__action139::<>(input, intr, errs, &__start, &__end);
__symbols.push((__start, __Symbol::Variant11(__nt), __end));
(0, 12)
}
pub(crate) fn __reduce25<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ("::" <Identifier>) = "::", Identifier => ActionFn(152);
assert!(__symbols.len() >= 2);
let __sym1 = __pop_Variant12(__symbols);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym1.2.clone();
let __nt = super::__action152::<>(input, intr, errs, __sym0, __sym1);
__symbols.push((__start, __Symbol::Variant12(__nt), __end));
(2, 13)
}
pub(crate) fn __reduce26<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ("::" <Identifier>)* =  => ActionFn(150);
let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let __end = __start.clone();
let __nt = super::__action150::<>(input, intr, errs, &__start, &__end);
__symbols.push((__start, __Symbol::Variant13(__nt), __end));
(0, 14)
}
pub(crate) fn __reduce27<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ("::" <Identifier>)* = ("::" <Identifier>)+ => ActionFn(151);
let __sym0 = __pop_Variant13(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action151::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant13(__nt), __end));
(1, 14)
}
pub(crate) fn __reduce28<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ("::" <Identifier>)+ = "::", Identifier => ActionFn(281);
assert!(__symbols.len() >= 2);
let __sym1 = __pop_Variant12(__symbols);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym1.2.clone();
let __nt = super::__action281::<>(input, intr, errs, __sym0, __sym1);
__symbols.push((__start, __Symbol::Variant13(__nt), __end));
(2, 15)
}
pub(crate) fn __reduce29<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ("::" <Identifier>)+ = ("::" <Identifier>)+, "::", Identifier => ActionFn(282);
assert!(__symbols.len() >= 3);
let __sym2 = __pop_Variant12(__symbols);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant13(__symbols);
let __start = __sym0.0.clone();
let __end = __sym2.2.clone();
let __nt = super::__action282::<>(input, intr, errs, __sym0, __sym1, __sym2);
__symbols.push((__start, __Symbol::Variant13(__nt), __end));
(3, 15)
}
pub(crate) fn __reduce30<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<@L> "builtin" <@R>) = "builtin" => ActionFn(360);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action360::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant14(__nt), __end));
(1, 16)
}
pub(crate) fn __reduce31<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<@L> "builtin" <@R>)? = "builtin" => ActionFn(437);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action437::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant15(__nt), __end));
(1, 17)
}
pub(crate) fn __reduce32<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<@L> "builtin" <@R>)? =  => ActionFn(142);
let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let __end = __start.clone();
let __nt = super::__action142::<>(input, intr, errs, &__start, &__end);
__symbols.push((__start, __Symbol::Variant15(__nt), __end));
(0, 17)
}
pub(crate) fn __reduce33<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<@L> "pub" <@R>) = "pub" => ActionFn(361);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action361::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant14(__nt), __end));
(1, 18)
}
pub(crate) fn __reduce34<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<@L> "pub" <@R>)? = "pub" => ActionFn(442);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action442::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant15(__nt), __end));
(1, 19)
}
pub(crate) fn __reduce35<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<@L> "pub" <@R>)? =  => ActionFn(154);
let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let __end = __start.clone();
let __nt = super::__action154::<>(input, intr, errs, &__start, &__end);
__symbols.push((__start, __Symbol::Variant15(__nt), __end));
(0, 19)
}
pub(crate) fn __reduce36<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<@L> <ExprWithoutBlock> <@R>) = ExprWithoutBlock => ActionFn(362);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action362::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant16(__nt), __end));
(1, 20)
}
pub(crate) fn __reduce37<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<@L> <ExprWithoutBlock> <@R>)? = ExprWithoutBlock => ActionFn(445);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action445::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant17(__nt), __end));
(1, 21)
}
pub(crate) fn __reduce38<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<@L> <ExprWithoutBlock> <@R>)? =  => ActionFn(132);
let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let __end = __start.clone();
let __nt = super::__action132::<>(input, intr, errs, &__start, &__end);
__symbols.push((__start, __Symbol::Variant17(__nt), __end));
(0, 21)
}
pub(crate) fn __reduce39<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<BranchVariant> ",") = BranchVariant, "," => ActionFn(208);
assert!(__symbols.len() >= 2);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant18(__symbols);
let __start = __sym0.0.clone();
let __end = __sym1.2.clone();
let __nt = super::__action208::<>(input, intr, errs, __sym0, __sym1);
__symbols.push((__start, __Symbol::Variant18(__nt), __end));
(2, 22)
}
pub(crate) fn __reduce40<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<BranchVariant> ",")* =  => ActionFn(206);
let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let __end = __start.clone();
let __nt = super::__action206::<>(input, intr, errs, &__start, &__end);
__symbols.push((__start, __Symbol::Variant19(__nt), __end));
(0, 23)
}
pub(crate) fn __reduce41<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<BranchVariant> ",")* = (<BranchVariant> ",")+ => ActionFn(207);
let __sym0 = __pop_Variant19(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action207::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant19(__nt), __end));
(1, 23)
}
pub(crate) fn __reduce42<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<BranchVariant> ",")+ = BranchVariant, "," => ActionFn(448);
assert!(__symbols.len() >= 2);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant18(__symbols);
let __start = __sym0.0.clone();
let __end = __sym1.2.clone();
let __nt = super::__action448::<>(input, intr, errs, __sym0, __sym1);
__symbols.push((__start, __Symbol::Variant19(__nt), __end));
(2, 24)
}
pub(crate) fn __reduce43<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<BranchVariant> ",")+ = (<BranchVariant> ",")+, BranchVariant, "," => ActionFn(449);
assert!(__symbols.len() >= 3);
let __sym2 = __pop_Variant0(__symbols);
let __sym1 = __pop_Variant18(__symbols);
let __sym0 = __pop_Variant19(__symbols);
let __start = __sym0.0.clone();
let __end = __sym2.2.clone();
let __nt = super::__action449::<>(input, intr, errs, __sym0, __sym1, __sym2);
__symbols.push((__start, __Symbol::Variant19(__nt), __end));
(3, 24)
}
pub(crate) fn __reduce44<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Expr> ",") = Expr, "," => ActionFn(198);
assert!(__symbols.len() >= 2);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym1.2.clone();
let __nt = super::__action198::<>(input, intr, errs, __sym0, __sym1);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(2, 25)
}
pub(crate) fn __reduce45<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Expr> ",")* =  => ActionFn(196);
let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let __end = __start.clone();
let __nt = super::__action196::<>(input, intr, errs, &__start, &__end);
__symbols.push((__start, __Symbol::Variant7(__nt), __end));
(0, 26)
}
pub(crate) fn __reduce46<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Expr> ",")* = (<Expr> ",")+ => ActionFn(197);
let __sym0 = __pop_Variant7(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action197::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant7(__nt), __end));
(1, 26)
}
pub(crate) fn __reduce47<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Expr> ",")+ = Expr, "," => ActionFn(452);
assert!(__symbols.len() >= 2);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym1.2.clone();
let __nt = super::__action452::<>(input, intr, errs, __sym0, __sym1);
__symbols.push((__start, __Symbol::Variant7(__nt), __end));
(2, 27)
}
pub(crate) fn __reduce48<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Expr> ",")+ = (<Expr> ",")+, Expr, "," => ActionFn(453);
assert!(__symbols.len() >= 3);
let __sym2 = __pop_Variant0(__symbols);
let __sym1 = __pop_Variant6(__symbols);
let __sym0 = __pop_Variant7(__symbols);
let __start = __sym0.0.clone();
let __end = __sym2.2.clone();
let __nt = super::__action453::<>(input, intr, errs, __sym0, __sym1, __sym2);
__symbols.push((__start, __Symbol::Variant7(__nt), __end));
(3, 27)
}
pub(crate) fn __reduce49<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<FnParam> ",") = FnParam, "," => ActionFn(203);
assert!(__symbols.len() >= 2);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant20(__symbols);
let __start = __sym0.0.clone();
let __end = __sym1.2.clone();
let __nt = super::__action203::<>(input, intr, errs, __sym0, __sym1);
__symbols.push((__start, __Symbol::Variant20(__nt), __end));
(2, 28)
}
pub(crate) fn __reduce50<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<FnParam> ",")* =  => ActionFn(201);
let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let __end = __start.clone();
let __nt = super::__action201::<>(input, intr, errs, &__start, &__end);
__symbols.push((__start, __Symbol::Variant21(__nt), __end));
(0, 29)
}
pub(crate) fn __reduce51<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<FnParam> ",")* = (<FnParam> ",")+ => ActionFn(202);
let __sym0 = __pop_Variant21(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action202::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant21(__nt), __end));
(1, 29)
}
pub(crate) fn __reduce52<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<FnParam> ",")+ = FnParam, "," => ActionFn(456);
assert!(__symbols.len() >= 2);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant20(__symbols);
let __start = __sym0.0.clone();
let __end = __sym1.2.clone();
let __nt = super::__action456::<>(input, intr, errs, __sym0, __sym1);
__symbols.push((__start, __Symbol::Variant21(__nt), __end));
(2, 30)
}
pub(crate) fn __reduce53<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<FnParam> ",")+ = (<FnParam> ",")+, FnParam, "," => ActionFn(457);
assert!(__symbols.len() >= 3);
let __sym2 = __pop_Variant0(__symbols);
let __sym1 = __pop_Variant20(__symbols);
let __sym0 = __pop_Variant21(__symbols);
let __start = __sym0.0.clone();
let __end = __sym2.2.clone();
let __nt = super::__action457::<>(input, intr, errs, __sym0, __sym1, __sym2);
__symbols.push((__start, __Symbol::Variant21(__nt), __end));
(3, 30)
}
pub(crate) fn __reduce54<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<StructField> ",") = StructField, "," => ActionFn(213);
assert!(__symbols.len() >= 2);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant22(__symbols);
let __start = __sym0.0.clone();
let __end = __sym1.2.clone();
let __nt = super::__action213::<>(input, intr, errs, __sym0, __sym1);
__symbols.push((__start, __Symbol::Variant22(__nt), __end));
(2, 31)
}
pub(crate) fn __reduce55<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<StructField> ",")* =  => ActionFn(211);
let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let __end = __start.clone();
let __nt = super::__action211::<>(input, intr, errs, &__start, &__end);
__symbols.push((__start, __Symbol::Variant23(__nt), __end));
(0, 32)
}
pub(crate) fn __reduce56<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<StructField> ",")* = (<StructField> ",")+ => ActionFn(212);
let __sym0 = __pop_Variant23(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action212::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant23(__nt), __end));
(1, 32)
}
pub(crate) fn __reduce57<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<StructField> ",")+ = StructField, "," => ActionFn(460);
assert!(__symbols.len() >= 2);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant22(__symbols);
let __start = __sym0.0.clone();
let __end = __sym1.2.clone();
let __nt = super::__action460::<>(input, intr, errs, __sym0, __sym1);
__symbols.push((__start, __Symbol::Variant23(__nt), __end));
(2, 33)
}
pub(crate) fn __reduce58<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<StructField> ",")+ = (<StructField> ",")+, StructField, "," => ActionFn(461);
assert!(__symbols.len() >= 3);
let __sym2 = __pop_Variant0(__symbols);
let __sym1 = __pop_Variant22(__symbols);
let __sym0 = __pop_Variant23(__symbols);
let __start = __sym0.0.clone();
let __end = __sym2.2.clone();
let __nt = super::__action461::<>(input, intr, errs, __sym0, __sym1, __sym2);
__symbols.push((__start, __Symbol::Variant23(__nt), __end));
(3, 33)
}
pub(crate) fn __reduce59<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Type> ",") = Type, "," => ActionFn(186);
assert!(__symbols.len() >= 2);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant10(__symbols);
let __start = __sym0.0.clone();
let __end = __sym1.2.clone();
let __nt = super::__action186::<>(input, intr, errs, __sym0, __sym1);
__symbols.push((__start, __Symbol::Variant10(__nt), __end));
(2, 34)
}
pub(crate) fn __reduce60<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Type> ",")* =  => ActionFn(184);
let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let __end = __start.clone();
let __nt = super::__action184::<>(input, intr, errs, &__start, &__end);
__symbols.push((__start, __Symbol::Variant24(__nt), __end));
(0, 35)
}
pub(crate) fn __reduce61<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Type> ",")* = (<Type> ",")+ => ActionFn(185);
let __sym0 = __pop_Variant24(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action185::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant24(__nt), __end));
(1, 35)
}
pub(crate) fn __reduce62<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Type> ",")+ = Type, "," => ActionFn(464);
assert!(__symbols.len() >= 2);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant10(__symbols);
let __start = __sym0.0.clone();
let __end = __sym1.2.clone();
let __nt = super::__action464::<>(input, intr, errs, __sym0, __sym1);
__symbols.push((__start, __Symbol::Variant24(__nt), __end));
(2, 36)
}
pub(crate) fn __reduce63<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// (<Type> ",")+ = (<Type> ",")+, Type, "," => ActionFn(465);
assert!(__symbols.len() >= 3);
let __sym2 = __pop_Variant0(__symbols);
let __sym1 = __pop_Variant10(__symbols);
let __sym0 = __pop_Variant24(__symbols);
let __start = __sym0.0.clone();
let __end = __sym2.2.clone();
let __nt = super::__action465::<>(input, intr, errs, __sym0, __sym1, __sym2);
__symbols.push((__start, __Symbol::Variant24(__nt), __end));
(3, 36)
}
pub(crate) fn __reduce64<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// @L =  => ActionFn(157);
let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let __end = __start.clone();
let __nt = super::__action157::<>(input, intr, errs, &__start, &__end);
__symbols.push((__start, __Symbol::Variant25(__nt), __end));
(0, 37)
}
pub(crate) fn __reduce65<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// @R =  => ActionFn(156);
let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let __end = __start.clone();
let __nt = super::__action156::<>(input, intr, errs, &__start, &__end);
__symbols.push((__start, __Symbol::Variant25(__nt), __end));
(0, 38)
}
pub(crate) fn __reduce66<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// BinOpExpr<Op3, Expr2> = BinOpExpr<Op3, Expr2>, Spanned<Op3>, Expr2 => ActionFn(363);
assert!(__symbols.len() >= 3);
let __sym2 = __pop_Variant6(__symbols);
let __sym1 = __pop_Variant51(__symbols);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym2.2.clone();
let __nt = super::__action363::<>(input, intr, errs, __sym0, __sym1, __sym2);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(3, 39)
}
pub(crate) fn __reduce67<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// BinOpExpr<Op3, Expr2> = Expr2 => ActionFn(112);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action112::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(1, 39)
}
pub(crate) fn __reduce68<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// BinOpExpr<Op4, Expr3> = BinOpExpr<Op4, Expr3>, Spanned<Op4>, Expr3 => ActionFn(364);
assert!(__symbols.len() >= 3);
let __sym2 = __pop_Variant6(__symbols);
let __sym1 = __pop_Variant51(__symbols);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym2.2.clone();
let __nt = super::__action364::<>(input, intr, errs, __sym0, __sym1, __sym2);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(3, 40)
}
pub(crate) fn __reduce69<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// BinOpExpr<Op4, Expr3> = Expr3 => ActionFn(114);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action114::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(1, 40)
}
pub(crate) fn __reduce70<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// BinOpExpr<Op6, Expr5> = BinOpExpr<Op6, Expr5>, Spanned<Op6>, Expr5 => ActionFn(365);
assert!(__symbols.len() >= 3);
let __sym2 = __pop_Variant6(__symbols);
let __sym1 = __pop_Variant51(__symbols);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym2.2.clone();
let __nt = super::__action365::<>(input, intr, errs, __sym0, __sym1, __sym2);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(3, 41)
}
pub(crate) fn __reduce71<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// BinOpExpr<Op6, Expr5> = Expr5 => ActionFn(117);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action117::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(1, 41)
}
pub(crate) fn __reduce72<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// BinOpExpr<Op7, Expr6> = BinOpExpr<Op7, Expr6>, Spanned<Op7>, Expr6 => ActionFn(366);
assert!(__symbols.len() >= 3);
let __sym2 = __pop_Variant6(__symbols);
let __sym1 = __pop_Variant51(__symbols);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym2.2.clone();
let __nt = super::__action366::<>(input, intr, errs, __sym0, __sym1, __sym2);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(3, 42)
}
pub(crate) fn __reduce73<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// BinOpExpr<Op7, Expr6> = Expr6 => ActionFn(119);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action119::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(1, 42)
}
pub(crate) fn __reduce74<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// BinOpExpr<OpAnd, Expr7> = BinOpExpr<OpAnd, Expr7>, Spanned<OpAnd>, Expr7 => ActionFn(367);
assert!(__symbols.len() >= 3);
let __sym2 = __pop_Variant6(__symbols);
let __sym1 = __pop_Variant51(__symbols);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym2.2.clone();
let __nt = super::__action367::<>(input, intr, errs, __sym0, __sym1, __sym2);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(3, 43)
}
pub(crate) fn __reduce75<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// BinOpExpr<OpAnd, Expr7> = Expr7 => ActionFn(121);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action121::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(1, 43)
}
pub(crate) fn __reduce76<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// BinOpExpr<OpOr, Expr8> = BinOpExpr<OpOr, Expr8>, Spanned<OpOr>, Expr8 => ActionFn(368);
assert!(__symbols.len() >= 3);
let __sym2 = __pop_Variant6(__symbols);
let __sym1 = __pop_Variant51(__symbols);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym2.2.clone();
let __nt = super::__action368::<>(input, intr, errs, __sym0, __sym1, __sym2);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(3, 44)
}
pub(crate) fn __reduce77<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// BinOpExpr<OpOr, Expr8> = Expr8 => ActionFn(123);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action123::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(1, 44)
}
pub(crate) fn __reduce78<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Block = "{", ExprWithoutBlock, "}" => ActionFn(490);
assert!(__symbols.len() >= 3);
let __sym2 = __pop_Variant0(__symbols);
let __sym1 = __pop_Variant6(__symbols);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym2.2.clone();
let __nt = super::__action490::<>(input, intr, errs, __sym0, __sym1, __sym2);
__symbols.push((__start, __Symbol::Variant26(__nt), __end));
(3, 45)
}
pub(crate) fn __reduce79<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Block = "{", Stmt+, ExprWithoutBlock, "}" => ActionFn(491);
assert!(__symbols.len() >= 4);
let __sym3 = __pop_Variant0(__symbols);
let __sym2 = __pop_Variant6(__symbols);
let __sym1 = __pop_Variant53(__symbols);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym3.2.clone();
let __nt = super::__action491::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3);
__symbols.push((__start, __Symbol::Variant26(__nt), __end));
(4, 45)
}
pub(crate) fn __reduce80<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Block = "{", "}" => ActionFn(492);
assert!(__symbols.len() >= 2);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym1.2.clone();
let __nt = super::__action492::<>(input, intr, errs, __sym0, __sym1);
__symbols.push((__start, __Symbol::Variant26(__nt), __end));
(2, 45)
}
pub(crate) fn __reduce81<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Block = "{", Stmt+, "}" => ActionFn(493);
assert!(__symbols.len() >= 3);
let __sym2 = __pop_Variant0(__symbols);
let __sym1 = __pop_Variant53(__symbols);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym2.2.clone();
let __nt = super::__action493::<>(input, intr, errs, __sym0, __sym1, __sym2);
__symbols.push((__start, __Symbol::Variant26(__nt), __end));
(3, 45)
}
pub(crate) fn __reduce82<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// BlockExpr = Block => ActionFn(370);
let __sym0 = __pop_Variant26(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action370::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(1, 46)
}
pub(crate) fn __reduce83<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// BlockOrSemi = Block => ActionFn(29);
let __sym0 = __pop_Variant26(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action29::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant27(__nt), __end));
(1, 47)
}
pub(crate) fn __reduce84<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// BlockOrSemi = ";" => ActionFn(30);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action30::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant27(__nt), __end));
(1, 47)
}
pub(crate) fn __reduce85<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// BranchDefinition = Vis, "branch", Identifier, ":", Type, "{", Comma<BranchVariant>, "}" => ActionFn(371);
assert!(__symbols.len() >= 8);
let __sym7 = __pop_Variant0(__symbols);
let __sym6 = __pop_Variant30(__symbols);
let __sym5 = __pop_Variant0(__symbols);
let __sym4 = __pop_Variant10(__symbols);
let __sym3 = __pop_Variant0(__symbols);
let __sym2 = __pop_Variant12(__symbols);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant55(__symbols);
let __start = __sym0.0.clone();
let __end = __sym7.2.clone();
let __nt = super::__action371::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
__symbols.push((__start, __Symbol::Variant28(__nt), __end));
(8, 48)
}
pub(crate) fn __reduce86<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// BranchDefinition = Vis, "branch", Identifier, "{", Comma<BranchVariant>, "}" => ActionFn(372);
assert!(__symbols.len() >= 6);
let __sym5 = __pop_Variant0(__symbols);
let __sym4 = __pop_Variant30(__symbols);
let __sym3 = __pop_Variant0(__symbols);
let __sym2 = __pop_Variant12(__symbols);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant55(__symbols);
let __start = __sym0.0.clone();
let __end = __sym5.2.clone();
let __nt = super::__action372::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
__symbols.push((__start, __Symbol::Variant28(__nt), __end));
(6, 48)
}
pub(crate) fn __reduce87<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// BranchVariant = Identifier, "{", Comma<StructField>, "}" => ActionFn(373);
assert!(__symbols.len() >= 4);
let __sym3 = __pop_Variant0(__symbols);
let __sym2 = __pop_Variant33(__symbols);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant12(__symbols);
let __start = __sym0.0.clone();
let __end = __sym3.2.clone();
let __nt = super::__action373::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3);
__symbols.push((__start, __Symbol::Variant18(__nt), __end));
(4, 49)
}
pub(crate) fn __reduce88<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// BranchVariant? = BranchVariant => ActionFn(204);
let __sym0 = __pop_Variant18(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action204::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant29(__nt), __end));
(1, 50)
}
pub(crate) fn __reduce89<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// BranchVariant? =  => ActionFn(205);
let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let __end = __start.clone();
let __nt = super::__action205::<>(input, intr, errs, &__start, &__end);
__symbols.push((__start, __Symbol::Variant29(__nt), __end));
(0, 50)
}
pub(crate) fn __reduce90<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Call = Identifier, "(", Comma<Expr>, ")" => ActionFn(374);
assert!(__symbols.len() >= 4);
let __sym3 = __pop_Variant0(__symbols);
let __sym2 = __pop_Variant31(__symbols);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant12(__symbols);
let __start = __sym0.0.clone();
let __end = __sym3.2.clone();
let __nt = super::__action374::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(4, 51)
}
pub(crate) fn __reduce91<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Call = Identifier, ("::" <Identifier>)+, "(", Comma<Expr>, ")" => ActionFn(375);
assert!(__symbols.len() >= 5);
let __sym4 = __pop_Variant0(__symbols);
let __sym3 = __pop_Variant31(__symbols);
let __sym2 = __pop_Variant0(__symbols);
let __sym1 = __pop_Variant13(__symbols);
let __sym0 = __pop_Variant12(__symbols);
let __start = __sym0.0.clone();
let __end = __sym4.2.clone();
let __nt = super::__action375::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3, __sym4);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(5, 51)
}
pub(crate) fn __reduce92<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ClassDefinition = Vis, "builtin", "class", Identifier, ":", Type, "{", Comma<StructField>, "}" => ActionFn(438);
assert!(__symbols.len() >= 9);
let __sym8 = __pop_Variant0(__symbols);
let __sym7 = __pop_Variant33(__symbols);
let __sym6 = __pop_Variant0(__symbols);
let __sym5 = __pop_Variant10(__symbols);
let __sym4 = __pop_Variant0(__symbols);
let __sym3 = __pop_Variant12(__symbols);
let __sym2 = __pop_Variant0(__symbols);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant55(__symbols);
let __start = __sym0.0.clone();
let __end = __sym8.2.clone();
let __nt = super::__action438::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
__symbols.push((__start, __Symbol::Variant28(__nt), __end));
(9, 52)
}
pub(crate) fn __reduce93<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ClassDefinition = Vis, "class", Identifier, ":", Type, "{", Comma<StructField>, "}" => ActionFn(439);
assert!(__symbols.len() >= 8);
let __sym7 = __pop_Variant0(__symbols);
let __sym6 = __pop_Variant33(__symbols);
let __sym5 = __pop_Variant0(__symbols);
let __sym4 = __pop_Variant10(__symbols);
let __sym3 = __pop_Variant0(__symbols);
let __sym2 = __pop_Variant12(__symbols);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant55(__symbols);
let __start = __sym0.0.clone();
let __end = __sym7.2.clone();
let __nt = super::__action439::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
__symbols.push((__start, __Symbol::Variant28(__nt), __end));
(8, 52)
}
pub(crate) fn __reduce94<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ClassDefinition = Vis, "builtin", "class", Identifier, "{", Comma<StructField>, "}" => ActionFn(440);
assert!(__symbols.len() >= 7);
let __sym6 = __pop_Variant0(__symbols);
let __sym5 = __pop_Variant33(__symbols);
let __sym4 = __pop_Variant0(__symbols);
let __sym3 = __pop_Variant12(__symbols);
let __sym2 = __pop_Variant0(__symbols);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant55(__symbols);
let __start = __sym0.0.clone();
let __end = __sym6.2.clone();
let __nt = super::__action440::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
__symbols.push((__start, __Symbol::Variant28(__nt), __end));
(7, 52)
}
pub(crate) fn __reduce95<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ClassDefinition = Vis, "class", Identifier, "{", Comma<StructField>, "}" => ActionFn(441);
assert!(__symbols.len() >= 6);
let __sym5 = __pop_Variant0(__symbols);
let __sym4 = __pop_Variant33(__symbols);
let __sym3 = __pop_Variant0(__symbols);
let __sym2 = __pop_Variant12(__symbols);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant55(__symbols);
let __start = __sym0.0.clone();
let __end = __sym5.2.clone();
let __nt = super::__action441::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
__symbols.push((__start, __Symbol::Variant28(__nt), __end));
(6, 52)
}
pub(crate) fn __reduce96<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<BranchVariant> = Many0<",", BranchVariant> => ActionFn(137);
let __sym0 = __pop_Variant30(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action137::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant30(__nt), __end));
(1, 53)
}
pub(crate) fn __reduce97<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<Expr> = Many0<",", Expr> => ActionFn(108);
let __sym0 = __pop_Variant31(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action108::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant31(__nt), __end));
(1, 54)
}
pub(crate) fn __reduce98<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<FnParam> = Many0<",", FnParam> => ActionFn(136);
let __sym0 = __pop_Variant32(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action136::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant32(__nt), __end));
(1, 55)
}
pub(crate) fn __reduce99<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Comma<StructField> = Many0<",", StructField> => ActionFn(144);
let __sym0 = __pop_Variant33(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action144::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant33(__nt), __end));
(1, 56)
}
pub(crate) fn __reduce100<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Disambiguator = "@", Identifier => ActionFn(378);
assert!(__symbols.len() >= 2);
let __sym1 = __pop_Variant12(__symbols);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym1.2.clone();
let __nt = super::__action378::<>(input, intr, errs, __sym0, __sym1);
__symbols.push((__start, __Symbol::Variant34(__nt), __end));
(2, 57)
}
pub(crate) fn __reduce101<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Disambiguator = "@", Identifier, ("::" <Identifier>)+ => ActionFn(379);
assert!(__symbols.len() >= 3);
let __sym2 = __pop_Variant13(__symbols);
let __sym1 = __pop_Variant12(__symbols);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym2.2.clone();
let __nt = super::__action379::<>(input, intr, errs, __sym0, __sym1, __sym2);
__symbols.push((__start, __Symbol::Variant34(__nt), __end));
(3, 57)
}
pub(crate) fn __reduce102<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Disambiguator? = Disambiguator => ActionFn(106);
let __sym0 = __pop_Variant34(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action106::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant35(__nt), __end));
(1, 58)
}
pub(crate) fn __reduce103<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Disambiguator? =  => ActionFn(107);
let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let __end = __start.clone();
let __nt = super::__action107::<>(input, intr, errs, &__start, &__end);
__symbols.push((__start, __Symbol::Variant35(__nt), __end));
(0, 58)
}
pub(crate) fn __reduce104<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Either<IfExpr, BlockExpr> = IfExpr => ActionFn(125);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action125::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(1, 59)
}
pub(crate) fn __reduce105<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Either<IfExpr, BlockExpr> = BlockExpr => ActionFn(126);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action126::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(1, 59)
}
pub(crate) fn __reduce106<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Expr = ExprWithoutBlock => ActionFn(40);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action40::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(1, 60)
}
pub(crate) fn __reduce107<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Expr = ExprWithBlock => ActionFn(41);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action41::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(1, 60)
}
pub(crate) fn __reduce108<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Expr0 = Lit => ActionFn(380);
let __sym0 = __pop_Variant41(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action380::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(1, 61)
}
pub(crate) fn __reduce109<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Expr0 = Identifier => ActionFn(381);
let __sym0 = __pop_Variant12(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action381::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(1, 61)
}
pub(crate) fn __reduce110<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Expr0 = Expr0, Disambiguator, ".", Identifier => ActionFn(472);
assert!(__symbols.len() >= 4);
let __sym3 = __pop_Variant12(__symbols);
let __sym2 = __pop_Variant0(__symbols);
let __sym1 = __pop_Variant34(__symbols);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym3.2.clone();
let __nt = super::__action472::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(4, 61)
}
pub(crate) fn __reduce111<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Expr0 = Expr0, ".", Identifier => ActionFn(473);
assert!(__symbols.len() >= 3);
let __sym2 = __pop_Variant12(__symbols);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym2.2.clone();
let __nt = super::__action473::<>(input, intr, errs, __sym0, __sym1, __sym2);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(3, 61)
}
pub(crate) fn __reduce112<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Expr0 = Call => ActionFn(92);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action92::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(1, 61)
}
pub(crate) fn __reduce113<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Expr0 = "(", Many1<",", Expr>, ")" => ActionFn(383);
assert!(__symbols.len() >= 3);
let __sym2 = __pop_Variant0(__symbols);
let __sym1 = __pop_Variant31(__symbols);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym2.2.clone();
let __nt = super::__action383::<>(input, intr, errs, __sym0, __sym1, __sym2);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(3, 61)
}
pub(crate) fn __reduce114<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Expr0 = error => ActionFn(384);
let __sym0 = __pop_Variant2(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action384::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(1, 61)
}
pub(crate) fn __reduce115<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Expr10 = Expr9, "=", Expr10 => ActionFn(385);
assert!(__symbols.len() >= 3);
let __sym2 = __pop_Variant6(__symbols);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym2.2.clone();
let __nt = super::__action385::<>(input, intr, errs, __sym0, __sym1, __sym2);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(3, 62)
}
pub(crate) fn __reduce116<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Expr10 = Expr9, Spanned<OpAssign>, Expr10 => ActionFn(386);
assert!(__symbols.len() >= 3);
let __sym2 = __pop_Variant6(__symbols);
let __sym1 = __pop_Variant51(__symbols);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym2.2.clone();
let __nt = super::__action386::<>(input, intr, errs, __sym0, __sym1, __sym2);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(3, 62)
}
pub(crate) fn __reduce117<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Expr10 = Expr9 => ActionFn(53);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action53::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(1, 62)
}
pub(crate) fn __reduce118<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Expr2 = UnOpExpr<Op2, Expr0> => ActionFn(84);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action84::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(1, 63)
}
pub(crate) fn __reduce119<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Expr3 = BinOpExpr<Op3, Expr2> => ActionFn(80);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action80::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(1, 64)
}
pub(crate) fn __reduce120<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Expr4 = BinOpExpr<Op4, Expr3> => ActionFn(77);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action77::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(1, 65)
}
pub(crate) fn __reduce121<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Expr5 = Expr5, Spanned<IsOp>, Type => ActionFn(387);
assert!(__symbols.len() >= 3);
let __sym2 = __pop_Variant10(__symbols);
let __sym1 = __pop_Variant49(__symbols);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym2.2.clone();
let __nt = super::__action387::<>(input, intr, errs, __sym0, __sym1, __sym2);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(3, 66)
}
pub(crate) fn __reduce122<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Expr5 = Expr4 => ActionFn(74);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action74::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(1, 66)
}
pub(crate) fn __reduce123<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Expr6 = BinOpExpr<Op6, Expr5> => ActionFn(68);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action68::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(1, 67)
}
pub(crate) fn __reduce124<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Expr7 = BinOpExpr<Op7, Expr6> => ActionFn(65);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action65::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(1, 68)
}
pub(crate) fn __reduce125<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Expr8 = BinOpExpr<OpAnd, Expr7> => ActionFn(63);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action63::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(1, 69)
}
pub(crate) fn __reduce126<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Expr9 = BinOpExpr<OpOr, Expr8> => ActionFn(61);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action61::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(1, 70)
}
pub(crate) fn __reduce127<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Expr? = Expr => ActionFn(127);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action127::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant36(__nt), __end));
(1, 71)
}
pub(crate) fn __reduce128<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Expr? =  => ActionFn(128);
let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let __end = __start.clone();
let __nt = super::__action128::<>(input, intr, errs, &__start, &__end);
__symbols.push((__start, __Symbol::Variant36(__nt), __end));
(0, 71)
}
pub(crate) fn __reduce129<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ExprWithBlock = IfExpr => ActionFn(42);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action42::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(1, 72)
}
pub(crate) fn __reduce130<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ExprWithBlock = BlockExpr => ActionFn(43);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action43::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(1, 72)
}
pub(crate) fn __reduce131<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ExprWithBlock = LoopExpr => ActionFn(44);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action44::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(1, 72)
}
pub(crate) fn __reduce132<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ExprWithoutBlock = Expr10 => ActionFn(50);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action50::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(1, 73)
}
pub(crate) fn __reduce133<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// FnParam = Identifier, ":", Type => ActionFn(27);
assert!(__symbols.len() >= 3);
let __sym2 = __pop_Variant10(__symbols);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant12(__symbols);
let __start = __sym0.0.clone();
let __end = __sym2.2.clone();
let __nt = super::__action27::<>(input, intr, errs, __sym0, __sym1, __sym2);
__symbols.push((__start, __Symbol::Variant20(__nt), __end));
(3, 74)
}
pub(crate) fn __reduce134<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// FnParam? = FnParam => ActionFn(199);
let __sym0 = __pop_Variant20(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action199::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant37(__nt), __end));
(1, 75)
}
pub(crate) fn __reduce135<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// FnParam? =  => ActionFn(200);
let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let __end = __start.clone();
let __nt = super::__action200::<>(input, intr, errs, &__start, &__end);
__symbols.push((__start, __Symbol::Variant37(__nt), __end));
(0, 75)
}
pub(crate) fn __reduce136<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// FnSig = "(", Comma<FnParam>, ")", ":", Type, BlockOrSemi => ActionFn(277);
assert!(__symbols.len() >= 6);
let __sym5 = __pop_Variant27(__symbols);
let __sym4 = __pop_Variant10(__symbols);
let __sym3 = __pop_Variant0(__symbols);
let __sym2 = __pop_Variant0(__symbols);
let __sym1 = __pop_Variant32(__symbols);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym5.2.clone();
let __nt = super::__action277::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
__symbols.push((__start, __Symbol::Variant38(__nt), __end));
(6, 76)
}
pub(crate) fn __reduce137<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// FnSig = "(", Comma<FnParam>, ")", BlockOrSemi => ActionFn(278);
assert!(__symbols.len() >= 4);
let __sym3 = __pop_Variant27(__symbols);
let __sym2 = __pop_Variant0(__symbols);
let __sym1 = __pop_Variant32(__symbols);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym3.2.clone();
let __nt = super::__action278::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3);
__symbols.push((__start, __Symbol::Variant38(__nt), __end));
(4, 76)
}
pub(crate) fn __reduce138<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// FunctionDefinition = Vis, "fn", Identifier, FnSig => ActionFn(388);
assert!(__symbols.len() >= 4);
let __sym3 = __pop_Variant38(__symbols);
let __sym2 = __pop_Variant12(__symbols);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant55(__symbols);
let __start = __sym0.0.clone();
let __end = __sym3.2.clone();
let __nt = super::__action388::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3);
__symbols.push((__start, __Symbol::Variant28(__nt), __end));
(4, 77)
}
pub(crate) fn __reduce139<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Identifier = TokenIdentifier => ActionFn(389);
let __sym0 = __pop_Variant1(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action389::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant12(__nt), __end));
(1, 78)
}
pub(crate) fn __reduce140<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// IfExpr = "if", Expr, Block => ActionFn(390);
assert!(__symbols.len() >= 3);
let __sym2 = __pop_Variant26(__symbols);
let __sym1 = __pop_Variant6(__symbols);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym2.2.clone();
let __nt = super::__action390::<>(input, intr, errs, __sym0, __sym1, __sym2);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(3, 79)
}
pub(crate) fn __reduce141<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// IfExpr = "if", Expr, Block, "else", Either<IfExpr, BlockExpr> => ActionFn(391);
assert!(__symbols.len() >= 5);
let __sym4 = __pop_Variant6(__symbols);
let __sym3 = __pop_Variant0(__symbols);
let __sym2 = __pop_Variant26(__symbols);
let __sym1 = __pop_Variant6(__symbols);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym4.2.clone();
let __nt = super::__action391::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3, __sym4);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(5, 79)
}
pub(crate) fn __reduce142<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// IsOp = "!", "is" => ActionFn(75);
assert!(__symbols.len() >= 2);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym1.2.clone();
let __nt = super::__action75::<>(input, intr, errs, __sym0, __sym1);
__symbols.push((__start, __Symbol::Variant39(__nt), __end));
(2, 80)
}
pub(crate) fn __reduce143<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// IsOp = "is" => ActionFn(76);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action76::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant39(__nt), __end));
(1, 80)
}
pub(crate) fn __reduce144<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Item = Use => ActionFn(5);
let __sym0 = __pop_Variant28(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action5::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant28(__nt), __end));
(1, 81)
}
pub(crate) fn __reduce145<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Item = ModDefinition => ActionFn(6);
let __sym0 = __pop_Variant28(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action6::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant28(__nt), __end));
(1, 81)
}
pub(crate) fn __reduce146<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Item = StructDefinition => ActionFn(7);
let __sym0 = __pop_Variant28(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action7::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant28(__nt), __end));
(1, 81)
}
pub(crate) fn __reduce147<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Item = ClassDefinition => ActionFn(8);
let __sym0 = __pop_Variant28(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action8::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant28(__nt), __end));
(1, 81)
}
pub(crate) fn __reduce148<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Item = BranchDefinition => ActionFn(9);
let __sym0 = __pop_Variant28(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action9::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant28(__nt), __end));
(1, 81)
}
pub(crate) fn __reduce149<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Item = FunctionDefinition => ActionFn(10);
let __sym0 = __pop_Variant28(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action10::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant28(__nt), __end));
(1, 81)
}
pub(crate) fn __reduce150<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Item* =  => ActionFn(158);
let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let __end = __start.clone();
let __nt = super::__action158::<>(input, intr, errs, &__start, &__end);
__symbols.push((__start, __Symbol::Variant40(__nt), __end));
(0, 82)
}
pub(crate) fn __reduce151<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Item* = Item+ => ActionFn(159);
let __sym0 = __pop_Variant40(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action159::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant40(__nt), __end));
(1, 82)
}
pub(crate) fn __reduce152<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Item+ = Item => ActionFn(160);
let __sym0 = __pop_Variant28(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action160::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant40(__nt), __end));
(1, 83)
}
pub(crate) fn __reduce153<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Item+ = Item+, Item => ActionFn(161);
assert!(__symbols.len() >= 2);
let __sym1 = __pop_Variant28(__symbols);
let __sym0 = __pop_Variant40(__symbols);
let __start = __sym0.0.clone();
let __end = __sym1.2.clone();
let __nt = super::__action161::<>(input, intr, errs, __sym0, __sym1);
__symbols.push((__start, __Symbol::Variant40(__nt), __end));
(2, 83)
}
pub(crate) fn __reduce154<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Lit = "true" => ActionFn(95);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action95::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant41(__nt), __end));
(1, 84)
}
pub(crate) fn __reduce155<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Lit = "false" => ActionFn(96);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action96::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant41(__nt), __end));
(1, 84)
}
pub(crate) fn __reduce156<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Lit = TokenString => ActionFn(97);
let __sym0 = __pop_Variant1(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action97::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant41(__nt), __end));
(1, 84)
}
pub(crate) fn __reduce157<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Lit = TokenInt => ActionFn(392);
let __sym0 = __pop_Variant1(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action392::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant41(__nt), __end));
(1, 84)
}
pub(crate) fn __reduce158<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// LoopExpr = "loop", Block => ActionFn(393);
assert!(__symbols.len() >= 2);
let __sym1 = __pop_Variant26(__symbols);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym1.2.clone();
let __nt = super::__action393::<>(input, intr, errs, __sym0, __sym1);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(2, 85)
}
pub(crate) fn __reduce159<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// LoopExpr = "while", Expr, Block => ActionFn(394);
assert!(__symbols.len() >= 3);
let __sym2 = __pop_Variant26(__symbols);
let __sym1 = __pop_Variant6(__symbols);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym2.2.clone();
let __nt = super::__action394::<>(input, intr, errs, __sym0, __sym1, __sym2);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(3, 85)
}
pub(crate) fn __reduce160<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Many0<",", BranchVariant> = BranchVariant => ActionFn(468);
let __sym0 = __pop_Variant18(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action468::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant30(__nt), __end));
(1, 86)
}
pub(crate) fn __reduce161<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Many0<",", BranchVariant> =  => ActionFn(469);
let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let __end = __start.clone();
let __nt = super::__action469::<>(input, intr, errs, &__start, &__end);
__symbols.push((__start, __Symbol::Variant30(__nt), __end));
(0, 86)
}
pub(crate) fn __reduce162<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Many0<",", BranchVariant> = (<BranchVariant> ",")+, BranchVariant => ActionFn(470);
assert!(__symbols.len() >= 2);
let __sym1 = __pop_Variant18(__symbols);
let __sym0 = __pop_Variant19(__symbols);
let __start = __sym0.0.clone();
let __end = __sym1.2.clone();
let __nt = super::__action470::<>(input, intr, errs, __sym0, __sym1);
__symbols.push((__start, __Symbol::Variant30(__nt), __end));
(2, 86)
}
pub(crate) fn __reduce163<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Many0<",", BranchVariant> = (<BranchVariant> ",")+ => ActionFn(471);
let __sym0 = __pop_Variant19(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action471::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant30(__nt), __end));
(1, 86)
}
pub(crate) fn __reduce164<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Many0<",", Expr> = Expr => ActionFn(474);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action474::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant31(__nt), __end));
(1, 87)
}
pub(crate) fn __reduce165<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Many0<",", Expr> =  => ActionFn(475);
let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let __end = __start.clone();
let __nt = super::__action475::<>(input, intr, errs, &__start, &__end);
__symbols.push((__start, __Symbol::Variant31(__nt), __end));
(0, 87)
}
pub(crate) fn __reduce166<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Many0<",", Expr> = (<Expr> ",")+, Expr => ActionFn(476);
assert!(__symbols.len() >= 2);
let __sym1 = __pop_Variant6(__symbols);
let __sym0 = __pop_Variant7(__symbols);
let __start = __sym0.0.clone();
let __end = __sym1.2.clone();
let __nt = super::__action476::<>(input, intr, errs, __sym0, __sym1);
__symbols.push((__start, __Symbol::Variant31(__nt), __end));
(2, 87)
}
pub(crate) fn __reduce167<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Many0<",", Expr> = (<Expr> ",")+ => ActionFn(477);
let __sym0 = __pop_Variant7(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action477::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant31(__nt), __end));
(1, 87)
}
pub(crate) fn __reduce168<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Many0<",", FnParam> = FnParam => ActionFn(482);
let __sym0 = __pop_Variant20(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action482::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant32(__nt), __end));
(1, 88)
}
pub(crate) fn __reduce169<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Many0<",", FnParam> =  => ActionFn(483);
let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let __end = __start.clone();
let __nt = super::__action483::<>(input, intr, errs, &__start, &__end);
__symbols.push((__start, __Symbol::Variant32(__nt), __end));
(0, 88)
}
pub(crate) fn __reduce170<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Many0<",", FnParam> = (<FnParam> ",")+, FnParam => ActionFn(484);
assert!(__symbols.len() >= 2);
let __sym1 = __pop_Variant20(__symbols);
let __sym0 = __pop_Variant21(__symbols);
let __start = __sym0.0.clone();
let __end = __sym1.2.clone();
let __nt = super::__action484::<>(input, intr, errs, __sym0, __sym1);
__symbols.push((__start, __Symbol::Variant32(__nt), __end));
(2, 88)
}
pub(crate) fn __reduce171<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Many0<",", FnParam> = (<FnParam> ",")+ => ActionFn(485);
let __sym0 = __pop_Variant21(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action485::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant32(__nt), __end));
(1, 88)
}
pub(crate) fn __reduce172<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Many0<",", StructField> = StructField => ActionFn(494);
let __sym0 = __pop_Variant22(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action494::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant33(__nt), __end));
(1, 89)
}
pub(crate) fn __reduce173<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Many0<",", StructField> =  => ActionFn(495);
let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let __end = __start.clone();
let __nt = super::__action495::<>(input, intr, errs, &__start, &__end);
__symbols.push((__start, __Symbol::Variant33(__nt), __end));
(0, 89)
}
pub(crate) fn __reduce174<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Many0<",", StructField> = (<StructField> ",")+, StructField => ActionFn(496);
assert!(__symbols.len() >= 2);
let __sym1 = __pop_Variant22(__symbols);
let __sym0 = __pop_Variant23(__symbols);
let __start = __sym0.0.clone();
let __end = __sym1.2.clone();
let __nt = super::__action496::<>(input, intr, errs, __sym0, __sym1);
__symbols.push((__start, __Symbol::Variant33(__nt), __end));
(2, 89)
}
pub(crate) fn __reduce175<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Many0<",", StructField> = (<StructField> ",")+ => ActionFn(497);
let __sym0 = __pop_Variant23(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action497::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant33(__nt), __end));
(1, 89)
}
pub(crate) fn __reduce176<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Many0<",", Type> = Type => ActionFn(498);
let __sym0 = __pop_Variant10(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action498::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant42(__nt), __end));
(1, 90)
}
pub(crate) fn __reduce177<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Many0<",", Type> =  => ActionFn(499);
let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let __end = __start.clone();
let __nt = super::__action499::<>(input, intr, errs, &__start, &__end);
__symbols.push((__start, __Symbol::Variant42(__nt), __end));
(0, 90)
}
pub(crate) fn __reduce178<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Many0<",", Type> = (<Type> ",")+, Type => ActionFn(500);
assert!(__symbols.len() >= 2);
let __sym1 = __pop_Variant10(__symbols);
let __sym0 = __pop_Variant24(__symbols);
let __start = __sym0.0.clone();
let __end = __sym1.2.clone();
let __nt = super::__action500::<>(input, intr, errs, __sym0, __sym1);
__symbols.push((__start, __Symbol::Variant42(__nt), __end));
(2, 90)
}
pub(crate) fn __reduce179<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Many0<",", Type> = (<Type> ",")+ => ActionFn(501);
let __sym0 = __pop_Variant24(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action501::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant42(__nt), __end));
(1, 90)
}
pub(crate) fn __reduce180<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Many1<"+", Path> = Identifier => ActionFn(254);
let __sym0 = __pop_Variant12(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action254::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant43(__nt), __end));
(1, 91)
}
pub(crate) fn __reduce181<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Many1<"+", Path> = Identifier, ("+" <Path>)+ => ActionFn(255);
assert!(__symbols.len() >= 2);
let __sym1 = __pop_Variant5(__symbols);
let __sym0 = __pop_Variant12(__symbols);
let __start = __sym0.0.clone();
let __end = __sym1.2.clone();
let __nt = super::__action255::<>(input, intr, errs, __sym0, __sym1);
__symbols.push((__start, __Symbol::Variant43(__nt), __end));
(2, 91)
}
pub(crate) fn __reduce182<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Many1<"+", Path> = Identifier, ("::" <Identifier>)+ => ActionFn(256);
assert!(__symbols.len() >= 2);
let __sym1 = __pop_Variant13(__symbols);
let __sym0 = __pop_Variant12(__symbols);
let __start = __sym0.0.clone();
let __end = __sym1.2.clone();
let __nt = super::__action256::<>(input, intr, errs, __sym0, __sym1);
__symbols.push((__start, __Symbol::Variant43(__nt), __end));
(2, 91)
}
pub(crate) fn __reduce183<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Many1<"+", Path> = Identifier, ("::" <Identifier>)+, ("+" <Path>)+ => ActionFn(257);
assert!(__symbols.len() >= 3);
let __sym2 = __pop_Variant5(__symbols);
let __sym1 = __pop_Variant13(__symbols);
let __sym0 = __pop_Variant12(__symbols);
let __start = __sym0.0.clone();
let __end = __sym2.2.clone();
let __nt = super::__action257::<>(input, intr, errs, __sym0, __sym1, __sym2);
__symbols.push((__start, __Symbol::Variant43(__nt), __end));
(3, 91)
}
pub(crate) fn __reduce184<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Many1<",", Expr> = Expr => ActionFn(260);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action260::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant31(__nt), __end));
(1, 92)
}
pub(crate) fn __reduce185<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Many1<",", Expr> = Expr, ("," <Expr>)+ => ActionFn(261);
assert!(__symbols.len() >= 2);
let __sym1 = __pop_Variant7(__symbols);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym1.2.clone();
let __nt = super::__action261::<>(input, intr, errs, __sym0, __sym1);
__symbols.push((__start, __Symbol::Variant31(__nt), __end));
(2, 92)
}
pub(crate) fn __reduce186<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// MaybeExprSemi = Expr, ";" => ActionFn(31);
assert!(__symbols.len() >= 2);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym1.2.clone();
let __nt = super::__action31::<>(input, intr, errs, __sym0, __sym1);
__symbols.push((__start, __Symbol::Variant44(__nt), __end));
(2, 93)
}
pub(crate) fn __reduce187<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// MaybeExprSemi = ";" => ActionFn(224);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action224::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant44(__nt), __end));
(1, 93)
}
pub(crate) fn __reduce188<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// MaybeExprSemi =  => ActionFn(225);
let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let __end = __start.clone();
let __nt = super::__action225::<>(input, intr, errs, &__start, &__end);
__symbols.push((__start, __Symbol::Variant44(__nt), __end));
(0, 93)
}
pub(crate) fn __reduce189<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ModDefinition = Vis, "mod", Identifier, ModItemsOrSemi => ActionFn(395);
assert!(__symbols.len() >= 4);
let __sym3 = __pop_Variant45(__symbols);
let __sym2 = __pop_Variant12(__symbols);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant55(__symbols);
let __start = __sym0.0.clone();
let __end = __sym3.2.clone();
let __nt = super::__action395::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3);
__symbols.push((__start, __Symbol::Variant28(__nt), __end));
(4, 94)
}
pub(crate) fn __reduce190<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ModItemsOrSemi = "{", "}" => ActionFn(486);
assert!(__symbols.len() >= 2);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym1.2.clone();
let __nt = super::__action486::<>(input, intr, errs, __sym0, __sym1);
__symbols.push((__start, __Symbol::Variant45(__nt), __end));
(2, 95)
}
pub(crate) fn __reduce191<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ModItemsOrSemi = "{", Item+, "}" => ActionFn(487);
assert!(__symbols.len() >= 3);
let __sym2 = __pop_Variant0(__symbols);
let __sym1 = __pop_Variant40(__symbols);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym2.2.clone();
let __nt = super::__action487::<>(input, intr, errs, __sym0, __sym1, __sym2);
__symbols.push((__start, __Symbol::Variant45(__nt), __end));
(3, 95)
}
pub(crate) fn __reduce192<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// ModItemsOrSemi = ";" => ActionFn(18);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action18::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant45(__nt), __end));
(1, 95)
}
pub(crate) fn __reduce193<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Op2 = "-" => ActionFn(85);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action85::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant46(__nt), __end));
(1, 96)
}
pub(crate) fn __reduce194<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Op2 = "!" => ActionFn(86);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action86::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant46(__nt), __end));
(1, 96)
}
pub(crate) fn __reduce195<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Op3 = "*" => ActionFn(81);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action81::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant47(__nt), __end));
(1, 97)
}
pub(crate) fn __reduce196<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Op3 = "/" => ActionFn(82);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action82::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant47(__nt), __end));
(1, 97)
}
pub(crate) fn __reduce197<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Op3 = "%" => ActionFn(83);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action83::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant47(__nt), __end));
(1, 97)
}
pub(crate) fn __reduce198<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Op4 = "+" => ActionFn(78);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action78::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant47(__nt), __end));
(1, 98)
}
pub(crate) fn __reduce199<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Op4 = "-" => ActionFn(79);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action79::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant47(__nt), __end));
(1, 98)
}
pub(crate) fn __reduce200<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Op6 = "<" => ActionFn(69);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action69::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant47(__nt), __end));
(1, 99)
}
pub(crate) fn __reduce201<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Op6 = ">" => ActionFn(70);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action70::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant47(__nt), __end));
(1, 99)
}
pub(crate) fn __reduce202<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Op6 = "<=" => ActionFn(71);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action71::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant47(__nt), __end));
(1, 99)
}
pub(crate) fn __reduce203<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Op6 = ">=" => ActionFn(72);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action72::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant47(__nt), __end));
(1, 99)
}
pub(crate) fn __reduce204<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Op7 = "==" => ActionFn(66);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action66::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant47(__nt), __end));
(1, 100)
}
pub(crate) fn __reduce205<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Op7 = "!=" => ActionFn(67);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action67::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant47(__nt), __end));
(1, 100)
}
pub(crate) fn __reduce206<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// OpAnd = "&" => ActionFn(64);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action64::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant47(__nt), __end));
(1, 101)
}
pub(crate) fn __reduce207<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// OpAssign = "+=" => ActionFn(54);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action54::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant47(__nt), __end));
(1, 102)
}
pub(crate) fn __reduce208<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// OpAssign = "-=" => ActionFn(55);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action55::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant47(__nt), __end));
(1, 102)
}
pub(crate) fn __reduce209<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// OpAssign = "*=" => ActionFn(56);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action56::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant47(__nt), __end));
(1, 102)
}
pub(crate) fn __reduce210<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// OpAssign = "/=" => ActionFn(57);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action57::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant47(__nt), __end));
(1, 102)
}
pub(crate) fn __reduce211<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// OpAssign = "%=" => ActionFn(58);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action58::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant47(__nt), __end));
(1, 102)
}
pub(crate) fn __reduce212<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// OpAssign = "&=" => ActionFn(59);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action59::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant47(__nt), __end));
(1, 102)
}
pub(crate) fn __reduce213<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// OpAssign = "|=" => ActionFn(60);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action60::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant47(__nt), __end));
(1, 102)
}
pub(crate) fn __reduce214<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// OpOr = "|" => ActionFn(62);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action62::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant47(__nt), __end));
(1, 103)
}
pub(crate) fn __reduce215<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Path = Identifier => ActionFn(230);
let __sym0 = __pop_Variant12(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action230::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant4(__nt), __end));
(1, 104)
}
pub(crate) fn __reduce216<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Path = Identifier, ("::" <Identifier>)+ => ActionFn(231);
assert!(__symbols.len() >= 2);
let __sym1 = __pop_Variant13(__symbols);
let __sym0 = __pop_Variant12(__symbols);
let __start = __sym0.0.clone();
let __end = __sym1.2.clone();
let __nt = super::__action231::<>(input, intr, errs, __sym0, __sym1);
__symbols.push((__start, __Symbol::Variant4(__nt), __end));
(2, 104)
}
pub(crate) fn __reduce217<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Program =  => ActionFn(488);
let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let __end = __start.clone();
let __nt = super::__action488::<>(input, intr, errs, &__start, &__end);
__symbols.push((__start, __Symbol::Variant48(__nt), __end));
(0, 105)
}
pub(crate) fn __reduce218<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Program = Item+ => ActionFn(489);
let __sym0 = __pop_Variant40(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action489::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant48(__nt), __end));
(1, 105)
}
pub(crate) fn __reduce219<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Spanned<IsOp> = IsOp => ActionFn(396);
let __sym0 = __pop_Variant39(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action396::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant49(__nt), __end));
(1, 106)
}
pub(crate) fn __reduce220<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Spanned<Op2> = Op2 => ActionFn(397);
let __sym0 = __pop_Variant46(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action397::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant50(__nt), __end));
(1, 107)
}
pub(crate) fn __reduce221<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Spanned<Op3> = Op3 => ActionFn(398);
let __sym0 = __pop_Variant47(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action398::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant51(__nt), __end));
(1, 108)
}
pub(crate) fn __reduce222<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Spanned<Op4> = Op4 => ActionFn(399);
let __sym0 = __pop_Variant47(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action399::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant51(__nt), __end));
(1, 109)
}
pub(crate) fn __reduce223<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Spanned<Op6> = Op6 => ActionFn(400);
let __sym0 = __pop_Variant47(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action400::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant51(__nt), __end));
(1, 110)
}
pub(crate) fn __reduce224<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Spanned<Op7> = Op7 => ActionFn(401);
let __sym0 = __pop_Variant47(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action401::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant51(__nt), __end));
(1, 111)
}
pub(crate) fn __reduce225<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Spanned<OpAnd> = OpAnd => ActionFn(402);
let __sym0 = __pop_Variant47(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action402::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant51(__nt), __end));
(1, 112)
}
pub(crate) fn __reduce226<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Spanned<OpAssign> = OpAssign => ActionFn(403);
let __sym0 = __pop_Variant47(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action403::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant51(__nt), __end));
(1, 113)
}
pub(crate) fn __reduce227<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Spanned<OpOr> = OpOr => ActionFn(404);
let __sym0 = __pop_Variant47(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action404::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant51(__nt), __end));
(1, 114)
}
pub(crate) fn __reduce228<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Stmt = Item => ActionFn(405);
let __sym0 = __pop_Variant28(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action405::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant52(__nt), __end));
(1, 115)
}
pub(crate) fn __reduce229<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Stmt = "let", Identifier, ":", Type, "=", Expr, ";" => ActionFn(406);
assert!(__symbols.len() >= 7);
let __sym6 = __pop_Variant0(__symbols);
let __sym5 = __pop_Variant6(__symbols);
let __sym4 = __pop_Variant0(__symbols);
let __sym3 = __pop_Variant10(__symbols);
let __sym2 = __pop_Variant0(__symbols);
let __sym1 = __pop_Variant12(__symbols);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym6.2.clone();
let __nt = super::__action406::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
__symbols.push((__start, __Symbol::Variant52(__nt), __end));
(7, 115)
}
pub(crate) fn __reduce230<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Stmt = "let", Identifier, "=", Expr, ";" => ActionFn(407);
assert!(__symbols.len() >= 5);
let __sym4 = __pop_Variant0(__symbols);
let __sym3 = __pop_Variant6(__symbols);
let __sym2 = __pop_Variant0(__symbols);
let __sym1 = __pop_Variant12(__symbols);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym4.2.clone();
let __nt = super::__action407::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3, __sym4);
__symbols.push((__start, __Symbol::Variant52(__nt), __end));
(5, 115)
}
pub(crate) fn __reduce231<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Stmt = "return", Expr, ";" => ActionFn(478);
assert!(__symbols.len() >= 3);
let __sym2 = __pop_Variant0(__symbols);
let __sym1 = __pop_Variant6(__symbols);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym2.2.clone();
let __nt = super::__action478::<>(input, intr, errs, __sym0, __sym1, __sym2);
__symbols.push((__start, __Symbol::Variant52(__nt), __end));
(3, 115)
}
pub(crate) fn __reduce232<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Stmt = "return", ";" => ActionFn(479);
assert!(__symbols.len() >= 2);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym1.2.clone();
let __nt = super::__action479::<>(input, intr, errs, __sym0, __sym1);
__symbols.push((__start, __Symbol::Variant52(__nt), __end));
(2, 115)
}
pub(crate) fn __reduce233<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Stmt = "break", Expr, ";" => ActionFn(480);
assert!(__symbols.len() >= 3);
let __sym2 = __pop_Variant0(__symbols);
let __sym1 = __pop_Variant6(__symbols);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym2.2.clone();
let __nt = super::__action480::<>(input, intr, errs, __sym0, __sym1, __sym2);
__symbols.push((__start, __Symbol::Variant52(__nt), __end));
(3, 115)
}
pub(crate) fn __reduce234<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Stmt = "break", ";" => ActionFn(481);
assert!(__symbols.len() >= 2);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym1.2.clone();
let __nt = super::__action481::<>(input, intr, errs, __sym0, __sym1);
__symbols.push((__start, __Symbol::Variant52(__nt), __end));
(2, 115)
}
pub(crate) fn __reduce235<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Stmt = "continue", ";" => ActionFn(410);
assert!(__symbols.len() >= 2);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym1.2.clone();
let __nt = super::__action410::<>(input, intr, errs, __sym0, __sym1);
__symbols.push((__start, __Symbol::Variant52(__nt), __end));
(2, 115)
}
pub(crate) fn __reduce236<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Stmt = "continue" => ActionFn(411);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action411::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant52(__nt), __end));
(1, 115)
}
pub(crate) fn __reduce237<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Stmt = ExprWithoutBlock, ";" => ActionFn(412);
assert!(__symbols.len() >= 2);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym1.2.clone();
let __nt = super::__action412::<>(input, intr, errs, __sym0, __sym1);
__symbols.push((__start, __Symbol::Variant52(__nt), __end));
(2, 115)
}
pub(crate) fn __reduce238<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Stmt = ExprWithBlock, ";" => ActionFn(413);
assert!(__symbols.len() >= 2);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym1.2.clone();
let __nt = super::__action413::<>(input, intr, errs, __sym0, __sym1);
__symbols.push((__start, __Symbol::Variant52(__nt), __end));
(2, 115)
}
pub(crate) fn __reduce239<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Stmt = ExprWithBlock => ActionFn(414);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action414::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant52(__nt), __end));
(1, 115)
}
pub(crate) fn __reduce240<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Stmt* =  => ActionFn(134);
let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let __end = __start.clone();
let __nt = super::__action134::<>(input, intr, errs, &__start, &__end);
__symbols.push((__start, __Symbol::Variant53(__nt), __end));
(0, 116)
}
pub(crate) fn __reduce241<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Stmt* = Stmt+ => ActionFn(135);
let __sym0 = __pop_Variant53(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action135::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant53(__nt), __end));
(1, 116)
}
pub(crate) fn __reduce242<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Stmt+ = Stmt => ActionFn(169);
let __sym0 = __pop_Variant52(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action169::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant53(__nt), __end));
(1, 117)
}
pub(crate) fn __reduce243<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Stmt+ = Stmt+, Stmt => ActionFn(170);
assert!(__symbols.len() >= 2);
let __sym1 = __pop_Variant52(__symbols);
let __sym0 = __pop_Variant53(__symbols);
let __start = __sym0.0.clone();
let __end = __sym1.2.clone();
let __nt = super::__action170::<>(input, intr, errs, __sym0, __sym1);
__symbols.push((__start, __Symbol::Variant53(__nt), __end));
(2, 117)
}
pub(crate) fn __reduce244<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// StructDefinition = Vis, "struct", Identifier, "{", Comma<StructField>, "}" => ActionFn(415);
assert!(__symbols.len() >= 6);
let __sym5 = __pop_Variant0(__symbols);
let __sym4 = __pop_Variant33(__symbols);
let __sym3 = __pop_Variant0(__symbols);
let __sym2 = __pop_Variant12(__symbols);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant55(__symbols);
let __start = __sym0.0.clone();
let __end = __sym5.2.clone();
let __nt = super::__action415::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
__symbols.push((__start, __Symbol::Variant28(__nt), __end));
(6, 118)
}
pub(crate) fn __reduce245<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// StructField = Vis, Identifier, ":", Type => ActionFn(24);
assert!(__symbols.len() >= 4);
let __sym3 = __pop_Variant10(__symbols);
let __sym2 = __pop_Variant0(__symbols);
let __sym1 = __pop_Variant12(__symbols);
let __sym0 = __pop_Variant55(__symbols);
let __start = __sym0.0.clone();
let __end = __sym3.2.clone();
let __nt = super::__action24::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3);
__symbols.push((__start, __Symbol::Variant22(__nt), __end));
(4, 119)
}
pub(crate) fn __reduce246<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// StructField? = StructField => ActionFn(209);
let __sym0 = __pop_Variant22(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action209::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant54(__nt), __end));
(1, 120)
}
pub(crate) fn __reduce247<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// StructField? =  => ActionFn(210);
let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let __end = __start.clone();
let __nt = super::__action210::<>(input, intr, errs, &__start, &__end);
__symbols.push((__start, __Symbol::Variant54(__nt), __end));
(0, 120)
}
pub(crate) fn __reduce248<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Type = "!" => ActionFn(416);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action416::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant10(__nt), __end));
(1, 121)
}
pub(crate) fn __reduce249<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Type = "(", Many0<",", Type>, ")" => ActionFn(417);
assert!(__symbols.len() >= 3);
let __sym2 = __pop_Variant0(__symbols);
let __sym1 = __pop_Variant42(__symbols);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym2.2.clone();
let __nt = super::__action417::<>(input, intr, errs, __sym0, __sym1, __sym2);
__symbols.push((__start, __Symbol::Variant10(__nt), __end));
(3, 121)
}
pub(crate) fn __reduce250<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Type = Many1<"+", Path> => ActionFn(418);
let __sym0 = __pop_Variant43(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action418::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant10(__nt), __end));
(1, 121)
}
pub(crate) fn __reduce251<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Type = error => ActionFn(419);
let __sym0 = __pop_Variant2(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action419::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant10(__nt), __end));
(1, 121)
}
pub(crate) fn __reduce252<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Type? = Type => ActionFn(182);
let __sym0 = __pop_Variant10(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action182::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant11(__nt), __end));
(1, 122)
}
pub(crate) fn __reduce253<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Type? =  => ActionFn(183);
let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let __end = __start.clone();
let __nt = super::__action183::<>(input, intr, errs, &__start, &__end);
__symbols.push((__start, __Symbol::Variant11(__nt), __end));
(0, 122)
}
pub(crate) fn __reduce254<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// UnOpExpr<Op2, Expr0> = Spanned<Op2>, UnOpExpr<Op2, Expr0> => ActionFn(420);
assert!(__symbols.len() >= 2);
let __sym1 = __pop_Variant6(__symbols);
let __sym0 = __pop_Variant50(__symbols);
let __start = __sym0.0.clone();
let __end = __sym1.2.clone();
let __nt = super::__action420::<>(input, intr, errs, __sym0, __sym1);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(2, 123)
}
pub(crate) fn __reduce255<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// UnOpExpr<Op2, Expr0> = Expr0 => ActionFn(110);
let __sym0 = __pop_Variant6(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action110::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant6(__nt), __end));
(1, 123)
}
pub(crate) fn __reduce256<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Use = Vis, "use", UseTree, ";" => ActionFn(421);
assert!(__symbols.len() >= 4);
let __sym3 = __pop_Variant0(__symbols);
let __sym2 = __pop_Variant8(__symbols);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant55(__symbols);
let __start = __sym0.0.clone();
let __end = __sym3.2.clone();
let __nt = super::__action421::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3);
__symbols.push((__start, __Symbol::Variant28(__nt), __end));
(4, 124)
}
pub(crate) fn __reduce257<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// UseTree = Identifier => ActionFn(422);
let __sym0 = __pop_Variant12(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action422::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant8(__nt), __end));
(1, 125)
}
pub(crate) fn __reduce258<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// UseTree = Identifier, ("::" <Identifier>)+ => ActionFn(423);
assert!(__symbols.len() >= 2);
let __sym1 = __pop_Variant13(__symbols);
let __sym0 = __pop_Variant12(__symbols);
let __start = __sym0.0.clone();
let __end = __sym1.2.clone();
let __nt = super::__action423::<>(input, intr, errs, __sym0, __sym1);
__symbols.push((__start, __Symbol::Variant8(__nt), __end));
(2, 125)
}
pub(crate) fn __reduce259<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// UseTree = Identifier, "as", Identifier => ActionFn(424);
assert!(__symbols.len() >= 3);
let __sym2 = __pop_Variant12(__symbols);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant12(__symbols);
let __start = __sym0.0.clone();
let __end = __sym2.2.clone();
let __nt = super::__action424::<>(input, intr, errs, __sym0, __sym1, __sym2);
__symbols.push((__start, __Symbol::Variant8(__nt), __end));
(3, 125)
}
pub(crate) fn __reduce260<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// UseTree = Identifier, ("::" <Identifier>)+, "as", Identifier => ActionFn(425);
assert!(__symbols.len() >= 4);
let __sym3 = __pop_Variant12(__symbols);
let __sym2 = __pop_Variant0(__symbols);
let __sym1 = __pop_Variant13(__symbols);
let __sym0 = __pop_Variant12(__symbols);
let __start = __sym0.0.clone();
let __end = __sym3.2.clone();
let __nt = super::__action425::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3);
__symbols.push((__start, __Symbol::Variant8(__nt), __end));
(4, 125)
}
pub(crate) fn __reduce261<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// UseTree = Identifier, "::", "*" => ActionFn(426);
assert!(__symbols.len() >= 3);
let __sym2 = __pop_Variant0(__symbols);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant12(__symbols);
let __start = __sym0.0.clone();
let __end = __sym2.2.clone();
let __nt = super::__action426::<>(input, intr, errs, __sym0, __sym1, __sym2);
__symbols.push((__start, __Symbol::Variant8(__nt), __end));
(3, 125)
}
pub(crate) fn __reduce262<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// UseTree = Identifier, ("::" <Identifier>)+, "::", "*" => ActionFn(427);
assert!(__symbols.len() >= 4);
let __sym3 = __pop_Variant0(__symbols);
let __sym2 = __pop_Variant0(__symbols);
let __sym1 = __pop_Variant13(__symbols);
let __sym0 = __pop_Variant12(__symbols);
let __start = __sym0.0.clone();
let __end = __sym3.2.clone();
let __nt = super::__action427::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3);
__symbols.push((__start, __Symbol::Variant8(__nt), __end));
(4, 125)
}
pub(crate) fn __reduce263<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// UseTree = Identifier, "::", "{", UseTree, ",", "}" => ActionFn(428);
assert!(__symbols.len() >= 6);
let __sym5 = __pop_Variant0(__symbols);
let __sym4 = __pop_Variant0(__symbols);
let __sym3 = __pop_Variant8(__symbols);
let __sym2 = __pop_Variant0(__symbols);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant12(__symbols);
let __start = __sym0.0.clone();
let __end = __sym5.2.clone();
let __nt = super::__action428::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
__symbols.push((__start, __Symbol::Variant8(__nt), __end));
(6, 125)
}
pub(crate) fn __reduce264<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// UseTree = Identifier, "::", "{", UseTree, ("," <UseTree>)+, ",", "}" => ActionFn(429);
assert!(__symbols.len() >= 7);
let __sym6 = __pop_Variant0(__symbols);
let __sym5 = __pop_Variant0(__symbols);
let __sym4 = __pop_Variant9(__symbols);
let __sym3 = __pop_Variant8(__symbols);
let __sym2 = __pop_Variant0(__symbols);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant12(__symbols);
let __start = __sym0.0.clone();
let __end = __sym6.2.clone();
let __nt = super::__action429::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
__symbols.push((__start, __Symbol::Variant8(__nt), __end));
(7, 125)
}
pub(crate) fn __reduce265<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// UseTree = Identifier, ("::" <Identifier>)+, "::", "{", UseTree, ",", "}" => ActionFn(430);
assert!(__symbols.len() >= 7);
let __sym6 = __pop_Variant0(__symbols);
let __sym5 = __pop_Variant0(__symbols);
let __sym4 = __pop_Variant8(__symbols);
let __sym3 = __pop_Variant0(__symbols);
let __sym2 = __pop_Variant0(__symbols);
let __sym1 = __pop_Variant13(__symbols);
let __sym0 = __pop_Variant12(__symbols);
let __start = __sym0.0.clone();
let __end = __sym6.2.clone();
let __nt = super::__action430::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
__symbols.push((__start, __Symbol::Variant8(__nt), __end));
(7, 125)
}
pub(crate) fn __reduce266<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// UseTree = Identifier, ("::" <Identifier>)+, "::", "{", UseTree, ("," <UseTree>)+, ",", "}" => ActionFn(431);
assert!(__symbols.len() >= 8);
let __sym7 = __pop_Variant0(__symbols);
let __sym6 = __pop_Variant0(__symbols);
let __sym5 = __pop_Variant9(__symbols);
let __sym4 = __pop_Variant8(__symbols);
let __sym3 = __pop_Variant0(__symbols);
let __sym2 = __pop_Variant0(__symbols);
let __sym1 = __pop_Variant13(__symbols);
let __sym0 = __pop_Variant12(__symbols);
let __start = __sym0.0.clone();
let __end = __sym7.2.clone();
let __nt = super::__action431::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
__symbols.push((__start, __Symbol::Variant8(__nt), __end));
(8, 125)
}
pub(crate) fn __reduce267<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// UseTree = Identifier, "::", "{", UseTree, "}" => ActionFn(432);
assert!(__symbols.len() >= 5);
let __sym4 = __pop_Variant0(__symbols);
let __sym3 = __pop_Variant8(__symbols);
let __sym2 = __pop_Variant0(__symbols);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant12(__symbols);
let __start = __sym0.0.clone();
let __end = __sym4.2.clone();
let __nt = super::__action432::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3, __sym4);
__symbols.push((__start, __Symbol::Variant8(__nt), __end));
(5, 125)
}
pub(crate) fn __reduce268<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// UseTree = Identifier, "::", "{", UseTree, ("," <UseTree>)+, "}" => ActionFn(433);
assert!(__symbols.len() >= 6);
let __sym5 = __pop_Variant0(__symbols);
let __sym4 = __pop_Variant9(__symbols);
let __sym3 = __pop_Variant8(__symbols);
let __sym2 = __pop_Variant0(__symbols);
let __sym1 = __pop_Variant0(__symbols);
let __sym0 = __pop_Variant12(__symbols);
let __start = __sym0.0.clone();
let __end = __sym5.2.clone();
let __nt = super::__action433::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
__symbols.push((__start, __Symbol::Variant8(__nt), __end));
(6, 125)
}
pub(crate) fn __reduce269<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// UseTree = Identifier, ("::" <Identifier>)+, "::", "{", UseTree, "}" => ActionFn(434);
assert!(__symbols.len() >= 6);
let __sym5 = __pop_Variant0(__symbols);
let __sym4 = __pop_Variant8(__symbols);
let __sym3 = __pop_Variant0(__symbols);
let __sym2 = __pop_Variant0(__symbols);
let __sym1 = __pop_Variant13(__symbols);
let __sym0 = __pop_Variant12(__symbols);
let __start = __sym0.0.clone();
let __end = __sym5.2.clone();
let __nt = super::__action434::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
__symbols.push((__start, __Symbol::Variant8(__nt), __end));
(6, 125)
}
pub(crate) fn __reduce270<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// UseTree = Identifier, ("::" <Identifier>)+, "::", "{", UseTree, ("," <UseTree>)+, "}" => ActionFn(435);
assert!(__symbols.len() >= 7);
let __sym6 = __pop_Variant0(__symbols);
let __sym5 = __pop_Variant9(__symbols);
let __sym4 = __pop_Variant8(__symbols);
let __sym3 = __pop_Variant0(__symbols);
let __sym2 = __pop_Variant0(__symbols);
let __sym1 = __pop_Variant13(__symbols);
let __sym0 = __pop_Variant12(__symbols);
let __start = __sym0.0.clone();
let __end = __sym6.2.clone();
let __nt = super::__action435::<>(input, intr, errs, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
__symbols.push((__start, __Symbol::Variant8(__nt), __end));
(7, 125)
}
pub(crate) fn __reduce271<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// UseTree = error => ActionFn(436);
let __sym0 = __pop_Variant2(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action436::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant8(__nt), __end));
(1, 125)
}
pub(crate) fn __reduce272<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Vis = "pub" => ActionFn(443);
let __sym0 = __pop_Variant0(__symbols);
let __start = __sym0.0.clone();
let __end = __sym0.2.clone();
let __nt = super::__action443::<>(input, intr, errs, __sym0);
__symbols.push((__start, __Symbol::Variant55(__nt), __end));
(1, 126)
}
pub(crate) fn __reduce273<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookahead_start: Option<&usize>,
__symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
_: ::std::marker::PhantomData<(&'input ())>,
) -> (usize, usize)
{
// Vis =  => ActionFn(444);
let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
let __end = __start.clone();
let __nt = super::__action444::<>(input, intr, errs, &__start, &__end);
__symbols.push((__start, __Symbol::Variant55(__nt), __end));
(0, 126)
}
}
pub use self::__parse__Program::ProgramParser;

#[allow(unused_variables)]
fn __action0<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Program, usize),
) -> Program
{
__0
}

#[allow(unused_variables)]
fn __action1<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, items, _): (usize, ::std::vec::Vec<Item>, usize),
) -> Program
{
Program { module: Mod { items, inline: true }, id: AstId::DUMMY }
}

#[allow(unused_variables)]
fn __action2<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, pb, _): (usize, ::std::option::Option<(usize, usize)>, usize),
) -> Visibility
{
match pb {
        Some((l, r)) => Visibility::Pub(Span::new(l, r)),
        None => Visibility::Private,
    }
}

#[allow(unused_variables)]
fn __action3<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, n, _): (usize, &'input str, usize),
(_, r, _): (usize, usize, usize),
) -> Identifier
{
Identifier::new(l, r, intr.get_or_intern(n))
}

#[allow(unused_variables)]
fn __action4<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, one, _): (usize, Identifier, usize),
(_, v, _): (usize, ::std::vec::Vec<Identifier>, usize),
) -> Path
{
{
        let mut v = v;
        v.insert(0, one);

        Path {
            items: v
        }
    }
}

#[allow(unused_variables)]
fn __action5<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Item, usize),
) -> Item
{
__0
}

#[allow(unused_variables)]
fn __action6<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Item, usize),
) -> Item
{
__0
}

#[allow(unused_variables)]
fn __action7<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Item, usize),
) -> Item
{
__0
}

#[allow(unused_variables)]
fn __action8<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Item, usize),
) -> Item
{
__0
}

#[allow(unused_variables)]
fn __action9<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Item, usize),
) -> Item
{
__0
}

#[allow(unused_variables)]
fn __action10<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Item, usize),
) -> Item
{
__0
}

#[allow(unused_variables)]
fn __action11<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, vis, _): (usize, Visibility, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, u, _): (usize, UseTree, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, r, _): (usize, usize, usize),
) -> Item
{
Item {
        name: DUMMY_IDENT.clone(),
        vis,
        kind: ItemKind::Use(u),
        span: Span::new(l, r),
        id: AstId::DUMMY,
    }
}

#[allow(unused_variables)]
fn __action12<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, path, _): (usize, Path, usize),
(_, r, _): (usize, usize, usize),
) -> UseTree
{
UseTree {
        span: Span::new(l, r),
        path,
        kind: UseTreeKind::Name,
        id: AstId::DUMMY,
    }
}

#[allow(unused_variables)]
fn __action13<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, path, _): (usize, Path, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, ident, _): (usize, Identifier, usize),
(_, r, _): (usize, usize, usize),
) -> UseTree
{
UseTree {
        span: Span::new(l, r),
        path,
        kind: UseTreeKind::Rebind(ident),
        id: AstId::DUMMY,
    }
}

#[allow(unused_variables)]
fn __action14<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, path, _): (usize, Path, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, r, _): (usize, usize, usize),
) -> UseTree
{
UseTree {
        span: Span::new(l, r),
        path,
        kind: UseTreeKind::Glob,
        id: AstId::DUMMY,
    }
}

#[allow(unused_variables)]
fn __action15<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, path, _): (usize, Path, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, one, _): (usize, UseTree, usize),
(_, rest, _): (usize, ::std::vec::Vec<UseTree>, usize),
(_, _, _): (usize, ::std::option::Option<Token<'input>>, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, r, _): (usize, usize, usize),
) -> UseTree
{
UseTree {
        span: Span::new(l, r),
        path,
        kind: UseTreeKind::Tree({
            let mut rest = rest;
            rest.insert(0, one);
            rest
        }),
        id: AstId::DUMMY,
    }
}

#[allow(unused_variables)]
fn __action16<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, err, _): (usize, __lalrpop_util::ErrorRecovery<usize, Token<'input>, ParserError>, usize),
(_, r, _): (usize, usize, usize),
) -> UseTree
{
{
        errs.push(err.error.to_string());
        UseTree {
            span: Span::new(l, r),
            path: Path::empty(),
            kind: UseTreeKind::Err,
            id: AstId::DUMMY,
        }
    }
}

#[allow(unused_variables)]
fn __action17<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, _, _): (usize, Token<'input>, usize),
(_, __0, _): (usize, ::std::vec::Vec<Item>, usize),
(_, _, _): (usize, Token<'input>, usize),
) -> Vec<Item>
{
__0
}

#[allow(unused_variables)]
fn __action18<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Token<'input>, usize),
) -> Vec<Item>
{
Vec::with_capacity(0)
}

#[allow(unused_variables)]
fn __action19<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, vis, _): (usize, Visibility, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, name, _): (usize, Identifier, usize),
(_, items, _): (usize, Vec<Item>, usize),
(_, r, _): (usize, usize, usize),
) -> Item
{
{
        let inline = items.capacity() != 0;
        Item {
            name,
            vis,
            kind: ItemKind::Mod(Mod {
                items,
                inline,
            }),
            span: Span::new(l, r),
            id: AstId::DUMMY,
        }
    }
}

#[allow(unused_variables)]
fn __action20<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, vis, _): (usize, Visibility, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, name, _): (usize, Identifier, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, members, _): (usize, Vec<StructField>, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, r, _): (usize, usize, usize),
) -> Item
{
{
        Item {
            name,
            vis,
            kind: ItemKind::Struct(Struct {
                members
            }),
            span: Span::new(l, r),
            id: AstId::DUMMY,
        }
    }
}

#[allow(unused_variables)]
fn __action21<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, vis, _): (usize, Visibility, usize),
(_, b, _): (usize, ::std::option::Option<(usize, usize)>, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, name, _): (usize, Identifier, usize),
(_, bounds, _): (usize, ::std::option::Option<Type>, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, members, _): (usize, Vec<StructField>, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, r, _): (usize, usize, usize),
) -> Item
{
{
        let bounds = if let Some(ty) = bounds {
            ClassBounds::Ty(ty)
        } else {
            ClassBounds::Default
        };
        
        Item {
            name,
            vis,
            kind: ItemKind::Class(Class {
                builtin: b.map(|(l, r)| Span::new(l, r)), 
                bounds, 
                members
            }),
            span: Span::new(l, r),
            id: AstId::DUMMY,
        }
    }
}

#[allow(unused_variables)]
fn __action22<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, vis, _): (usize, Visibility, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, name, _): (usize, Identifier, usize),
(_, bounds, _): (usize, ::std::option::Option<Type>, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, variants, _): (usize, Vec<BranchVariant>, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, r, _): (usize, usize, usize),
) -> Item
{
{
        let bounds = if let Some(ty) = bounds {
            ClassBounds::Ty(ty)
        } else {
            ClassBounds::Default
        };
        
        Item {
            name,
            vis,
            kind: ItemKind::Branch(Branch {
                bounds, 
                variants
            }),
            span: Span::new(l, r),
            id: AstId::DUMMY,
        }
    }
}

#[allow(unused_variables)]
fn __action23<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, name, _): (usize, Identifier, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, members, _): (usize, Vec<StructField>, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, r, _): (usize, usize, usize),
) -> BranchVariant
{
{
        BranchVariant {
            span: Span::new(l, r),
            name,
            members,
            id: AstId::DUMMY,
        }
    }
}

#[allow(unused_variables)]
fn __action24<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, vis, _): (usize, Visibility, usize),
(_, name, _): (usize, Identifier, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, ty, _): (usize, Type, usize),
) -> StructField
{
StructField{name, ty, vis}
}

#[allow(unused_variables)]
fn __action25<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, vis, _): (usize, Visibility, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, name, _): (usize, Identifier, usize),
(_, sig, _): (usize, (Vec<FnParam>, ::std::option::Option<Type>, Option<Block>), usize),
(_, r, _): (usize, usize, usize),
) -> Item
{
{
        let (params, retty, block) = sig;
        let ret = match retty {
            Some(ty) => FnReturn::Ty(ty),
            None => FnReturn::Default,
        };

        let sig = FnSig {
            params,
            ret
        };

        Item {
            name,
            vis,
            kind: ItemKind::Fn(sig, block),
            span: Span::new(l, r),
            id: AstId::DUMMY,
        }
    }
}

#[allow(unused_variables)]
fn __action26<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, _, _): (usize, Token<'input>, usize),
(_, __0, _): (usize, Vec<FnParam>, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, __1, _): (usize, ::std::option::Option<Type>, usize),
(_, __2, _): (usize, Option<Block>, usize),
) -> (Vec<FnParam>, ::std::option::Option<Type>, Option<Block>)
{
(__0, __1, __2)
}

#[allow(unused_variables)]
fn __action27<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, name, _): (usize, Identifier, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, ty, _): (usize, Type, usize),
) -> FnParam
{
FnParam{name, ty}
}

#[allow(unused_variables)]
fn __action28<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, s, _): (usize, ::std::vec::Vec<Stmt>, usize),
(_, e, _): (usize, ::std::option::Option<(usize, Expr, usize)>, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, r, _): (usize, usize, usize),
) -> Block
{
{
        let mut s = s;
        if let Some((l, e, r)) = e {
            s.push(Stmt::new(l, r, StmtKind::Expr(bx(e))));
        }
        Block::new(l, r, s)
    }
}

#[allow(unused_variables)]
fn __action29<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Block, usize),
) -> Option<Block>
{
Some(__0)
}

#[allow(unused_variables)]
fn __action30<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Token<'input>, usize),
) -> Option<Block>
{
None
}

#[allow(unused_variables)]
fn __action31<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Expr, usize),
(_, _, _): (usize, Token<'input>, usize),
) -> Option<Expr>
{
Some(__0)
}

#[allow(unused_variables)]
fn __action32<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, ::std::option::Option<Token<'input>>, usize),
) -> Option<Expr>
{
None
}

#[allow(unused_variables)]
fn __action33<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, item, _): (usize, Item, usize),
(_, r, _): (usize, usize, usize),
) -> Stmt
{
Stmt::new(l, r, StmtKind::Item(bx(item)))
}

#[allow(unused_variables)]
fn __action34<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, id, _): (usize, Identifier, usize),
(_, ty, _): (usize, ::std::option::Option<Type>, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, e, _): (usize, Expr, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, r, _): (usize, usize, usize),
) -> Stmt
{
Stmt::new(l, r, StmtKind::Let(id, box_opt(ty), bx(e)))
}

#[allow(unused_variables)]
fn __action35<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, e, _): (usize, ::std::option::Option<Expr>, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, r, _): (usize, usize, usize),
) -> Stmt
{
Stmt::new(l, r, StmtKind::Ret(box_opt(e)))
}

#[allow(unused_variables)]
fn __action36<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, e, _): (usize, ::std::option::Option<Expr>, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, r, _): (usize, usize, usize),
) -> Stmt
{
Stmt::new(l, r, StmtKind::Break(box_opt(e)))
}

#[allow(unused_variables)]
fn __action37<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, _, _): (usize, ::std::option::Option<Token<'input>>, usize),
(_, r, _): (usize, usize, usize),
) -> Stmt
{
Stmt::new(l, r, StmtKind::Continue)
}

#[allow(unused_variables)]
fn __action38<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, e, _): (usize, Expr, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, r, _): (usize, usize, usize),
) -> Stmt
{
{
        Stmt::new(l, r, StmtKind::Semi(bx(e)))
    }
}

#[allow(unused_variables)]
fn __action39<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, e, _): (usize, Expr, usize),
(_, semi, _): (usize, ::std::option::Option<Token<'input>>, usize),
(_, r, _): (usize, usize, usize),
) -> Stmt
{
match semi {
        Some(_) => Stmt::new(l, r, StmtKind::Semi(bx(e))),
        None => Stmt::new(l, r, StmtKind::Expr(bx(e))),
    }
}

#[allow(unused_variables)]
fn __action40<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Expr, usize),
) -> Expr
{
__0
}

#[allow(unused_variables)]
fn __action41<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Expr, usize),
) -> Expr
{
__0
}

#[allow(unused_variables)]
fn __action42<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Expr, usize),
) -> Expr
{
__0
}

#[allow(unused_variables)]
fn __action43<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Expr, usize),
) -> Expr
{
__0
}

#[allow(unused_variables)]
fn __action44<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Expr, usize),
) -> Expr
{
__0
}

#[allow(unused_variables)]
fn __action45<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, e, _): (usize, Block, usize),
(_, r, _): (usize, usize, usize),
) -> Expr
{
Expr::new(l, r, ExprKind::Block(e))
}

#[allow(unused_variables)]
fn __action46<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, cond, _): (usize, Expr, usize),
(_, iftrue, _): (usize, Block, usize),
(_, r, _): (usize, usize, usize),
) -> Expr
{
{
        Expr::new(l, r, ExprKind::If(bx(cond), iftrue, None))
    }
}

#[allow(unused_variables)]
fn __action47<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, cond, _): (usize, Expr, usize),
(_, iftrue, _): (usize, Block, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, iffalse, _): (usize, Expr, usize),
(_, r, _): (usize, usize, usize),
) -> Expr
{
{
        Expr::new(l, r, ExprKind::If(bx(cond), iftrue, Some(bx(iffalse))))
    }
}

#[allow(unused_variables)]
fn __action48<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, block, _): (usize, Block, usize),
(_, r, _): (usize, usize, usize),
) -> Expr
{
Expr::new(l, r, ExprKind::Loop(block))
}

#[allow(unused_variables)]
fn __action49<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, cond, _): (usize, Expr, usize),
(_, block, _): (usize, Block, usize),
(_, r, _): (usize, usize, usize),
) -> Expr
{
Expr::new(l, r, ExprKind::While(bx(cond), block))
}

#[allow(unused_variables)]
fn __action50<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Expr, usize),
) -> Expr
{
__0
}

#[allow(unused_variables)]
fn __action51<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, lo, _): (usize, usize, usize),
(_, lhs, _): (usize, Expr, usize),
(_, l, _): (usize, usize, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, r, _): (usize, usize, usize),
(_, rhs, _): (usize, Expr, usize),
(_, ro, _): (usize, usize, usize),
) -> Expr
{
Expr::new(lo, ro, ExprKind::Assign(Span::new(l, r), bx(lhs), bx(rhs)))
}

#[allow(unused_variables)]
fn __action52<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, lhs, _): (usize, Expr, usize),
(_, op, _): (usize, Spanned<BinOp>, usize),
(_, rhs, _): (usize, Expr, usize),
(_, r, _): (usize, usize, usize),
) -> Expr
{
Expr::new(l, r, ExprKind::AssignOp(op, bx(lhs), bx(rhs)))
}

#[allow(unused_variables)]
fn __action53<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Expr, usize),
) -> Expr
{
__0
}

#[allow(unused_variables)]
fn __action54<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Token<'input>, usize),
) -> BinOp
{
BinOp::Add
}

#[allow(unused_variables)]
fn __action55<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Token<'input>, usize),
) -> BinOp
{
BinOp::Sub
}

#[allow(unused_variables)]
fn __action56<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Token<'input>, usize),
) -> BinOp
{
BinOp::Mul
}

#[allow(unused_variables)]
fn __action57<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Token<'input>, usize),
) -> BinOp
{
BinOp::Div
}

#[allow(unused_variables)]
fn __action58<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Token<'input>, usize),
) -> BinOp
{
BinOp::Rem
}

#[allow(unused_variables)]
fn __action59<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Token<'input>, usize),
) -> BinOp
{
BinOp::Rem
}

#[allow(unused_variables)]
fn __action60<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Token<'input>, usize),
) -> BinOp
{
BinOp::Rem
}

#[allow(unused_variables)]
fn __action61<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Expr, usize),
) -> Expr
{
__0
}

#[allow(unused_variables)]
fn __action62<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Token<'input>, usize),
) -> BinOp
{
BinOp::Or
}

#[allow(unused_variables)]
fn __action63<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Expr, usize),
) -> Expr
{
__0
}

#[allow(unused_variables)]
fn __action64<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Token<'input>, usize),
) -> BinOp
{
BinOp::And
}

#[allow(unused_variables)]
fn __action65<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Expr, usize),
) -> Expr
{
__0
}

#[allow(unused_variables)]
fn __action66<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Token<'input>, usize),
) -> BinOp
{
BinOp::Eq
}

#[allow(unused_variables)]
fn __action67<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Token<'input>, usize),
) -> BinOp
{
BinOp::Ne
}

#[allow(unused_variables)]
fn __action68<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Expr, usize),
) -> Expr
{
__0
}

#[allow(unused_variables)]
fn __action69<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Token<'input>, usize),
) -> BinOp
{
BinOp::Lt
}

#[allow(unused_variables)]
fn __action70<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Token<'input>, usize),
) -> BinOp
{
BinOp::Gt
}

#[allow(unused_variables)]
fn __action71<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Token<'input>, usize),
) -> BinOp
{
BinOp::Le
}

#[allow(unused_variables)]
fn __action72<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Token<'input>, usize),
) -> BinOp
{
BinOp::Ge
}

#[allow(unused_variables)]
fn __action73<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, e, _): (usize, Expr, usize),
(_, op, _): (usize, Spanned<IsOpKind>, usize),
(_, ty, _): (usize, Type, usize),
(_, r, _): (usize, usize, usize),
) -> Expr
{
Expr::new(l, r, ExprKind::Is(op, bx(e), bx(ty)))
}

#[allow(unused_variables)]
fn __action74<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Expr, usize),
) -> Expr
{
__0
}

#[allow(unused_variables)]
fn __action75<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Token<'input>, usize),
(_, __1, _): (usize, Token<'input>, usize),
) -> IsOpKind
{
IsOpKind::NotIs
}

#[allow(unused_variables)]
fn __action76<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Token<'input>, usize),
) -> IsOpKind
{
IsOpKind::Is
}

#[allow(unused_variables)]
fn __action77<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Expr, usize),
) -> Expr
{
__0
}

#[allow(unused_variables)]
fn __action78<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Token<'input>, usize),
) -> BinOp
{
BinOp::Add
}

#[allow(unused_variables)]
fn __action79<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Token<'input>, usize),
) -> BinOp
{
BinOp::Sub
}

#[allow(unused_variables)]
fn __action80<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Expr, usize),
) -> Expr
{
__0
}

#[allow(unused_variables)]
fn __action81<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Token<'input>, usize),
) -> BinOp
{
BinOp::Mul
}

#[allow(unused_variables)]
fn __action82<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Token<'input>, usize),
) -> BinOp
{
BinOp::Div
}

#[allow(unused_variables)]
fn __action83<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Token<'input>, usize),
) -> BinOp
{
BinOp::Rem
}

#[allow(unused_variables)]
fn __action84<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Expr, usize),
) -> Expr
{
__0
}

#[allow(unused_variables)]
fn __action85<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Token<'input>, usize),
) -> UnOpKind
{
UnOpKind::Neg
}

#[allow(unused_variables)]
fn __action86<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Token<'input>, usize),
) -> UnOpKind
{
UnOpKind::Not
}

#[allow(unused_variables)]
fn __action87<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, name, _): (usize, Path, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, exprs, _): (usize, Vec<Expr>, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, r, _): (usize, usize, usize),
) -> Expr
{
{
        Expr::new(l, r, ExprKind::Call(name, exprs))
    }
}

#[allow(unused_variables)]
fn __action88<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, name, _): (usize, Path, usize),
(_, r, _): (usize, usize, usize),
) -> Disambiguator
{
Disambiguator::new(l, r, name)
}

#[allow(unused_variables)]
fn __action89<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, lit, _): (usize, Lit, usize),
(_, r, _): (usize, usize, usize),
) -> Expr
{
Expr::new(l, r, ExprKind::Lit(lit))
}

#[allow(unused_variables)]
fn __action90<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, ident, _): (usize, Identifier, usize),
(_, r, _): (usize, usize, usize),
) -> Expr
{
Expr::new(l, r, ExprKind::Variable(ident))
}

#[allow(unused_variables)]
fn __action91<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, e, _): (usize, Expr, usize),
(_, disambiguator, _): (usize, ::std::option::Option<Disambiguator>, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, field, _): (usize, Identifier, usize),
(_, r, _): (usize, usize, usize),
) -> Expr
{
Expr::new(l, r, ExprKind::FieldAccess(bx(e), disambiguator.map(|d| bx(d)), field))
}

#[allow(unused_variables)]
fn __action92<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Expr, usize),
) -> Expr
{
__0
}

#[allow(unused_variables)]
fn __action93<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, exprs, _): (usize, Vec<Expr>, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, r, _): (usize, usize, usize),
) -> Expr
{
{
        Expr::new(l, r, if exprs.len() == 1 {
            let mut exprs = exprs;
            ExprKind::Paren(bx(exprs.remove(0)))
        } else {
            ExprKind::Tuple(exprs)
        })
    }
}

#[allow(unused_variables)]
fn __action94<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, err, _): (usize, __lalrpop_util::ErrorRecovery<usize, Token<'input>, ParserError>, usize),
(_, r, _): (usize, usize, usize),
) -> Expr
{
{ errs.push(err.error.to_string()); Expr::new(l, r, ExprKind::Err) }
}

#[allow(unused_variables)]
fn __action95<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Token<'input>, usize),
) -> Lit
{
Lit::Bool(true)
}

#[allow(unused_variables)]
fn __action96<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Token<'input>, usize),
) -> Lit
{
Lit::Bool(false)
}

#[allow(unused_variables)]
fn __action97<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, s, _): (usize, &'input str, usize),
) -> Lit
{
Lit::String(s.to_string())
}

#[allow(unused_variables)]
fn __action98<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, tok, _): (usize, &'input str, usize),
(_, r, _): (usize, usize, usize),
) -> Lit
{
{
        let s: String = tok.chars().filter(|v| *v != '_').collect();
        match i32::from_str(&s) {
            Ok(i) => Lit::Int(i),
            Err(_) => {
                errs.push(ParserError::IntTooBig(Span::new(l, r)).to_string());

                Lit::Err
            }
        }
    }
}

#[allow(unused_variables)]
fn __action99<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, r, _): (usize, usize, usize),
) -> Type
{
Type::new(l, r, TypeKind::Never)
}

#[allow(unused_variables)]
fn __action100<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, tys, _): (usize, Vec<Type>, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, r, _): (usize, usize, usize),
) -> Type
{
{
        if tys.is_empty() {
            Type::new(l, r, TypeKind::Unit)
        } else {
            Type::new(l, r, TypeKind::Tuple(tys))
        }
    }
}

#[allow(unused_variables)]
fn __action101<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, ty, _): (usize, Vec<Path>, usize),
(_, r, _): (usize, usize, usize),
) -> Type
{
{
        if ty.len() == 1 {
            let mut ty = ty;
            Type::new(l, r, TypeKind::Named(ty.remove(0)))
        } else {
            Type::new(l, r, TypeKind::And(ty.into_iter().map(|name| TypeRef {name, id: AstId::DUMMY}).collect()))
        }
    }
}

#[allow(unused_variables)]
fn __action102<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, err, _): (usize, __lalrpop_util::ErrorRecovery<usize, Token<'input>, ParserError>, usize),
(_, r, _): (usize, usize, usize),
) -> Type
{
{ errs.push(err.error.to_string()); Type::new(l, r, TypeKind::Err) }
}

#[allow(unused_variables)]
fn __action103<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, e, _): (usize, Path, usize),
(_, v, _): (usize, ::std::vec::Vec<Path>, usize),
) -> Vec<Path>
{
{
        let mut v = v;
        v.insert(0, e);
        v
    }
}

#[allow(unused_variables)]
fn __action104<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, v, _): (usize, ::std::vec::Vec<Type>, usize),
(_, e, _): (usize, ::std::option::Option<Type>, usize),
) -> Vec<Type>
{
match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

#[allow(unused_variables)]
fn __action105<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, e, _): (usize, Expr, usize),
(_, v, _): (usize, ::std::vec::Vec<Expr>, usize),
) -> Vec<Expr>
{
{
        let mut v = v;
        v.insert(0, e);
        v
    }
}

#[allow(unused_variables)]
fn __action106<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Disambiguator, usize),
) -> ::std::option::Option<Disambiguator>
{
Some(__0)
}

#[allow(unused_variables)]
fn __action107<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookbehind: &usize,
__lookahead: &usize,
) -> ::std::option::Option<Disambiguator>
{
None
}

#[allow(unused_variables)]
fn __action108<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Vec<Expr>, usize),
) -> Vec<Expr>
{
__0
}

#[allow(unused_variables)]
fn __action109<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, op, _): (usize, Spanned<UnOpKind>, usize),
(_, rhs, _): (usize, Expr, usize),
(_, r, _): (usize, usize, usize),
) -> Expr
{
Expr::new(l, r, ExprKind::UnOp(op, bx(rhs)))
}

#[allow(unused_variables)]
fn __action110<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Expr, usize),
) -> Expr
{
__0
}

#[allow(unused_variables)]
fn __action111<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, lhs, _): (usize, Expr, usize),
(_, op, _): (usize, Spanned<BinOp>, usize),
(_, rhs, _): (usize, Expr, usize),
(_, r, _): (usize, usize, usize),
) -> Expr
{
Expr::new(l, r, ExprKind::BinOp(op, bx(lhs), bx(rhs)))
}

#[allow(unused_variables)]
fn __action112<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Expr, usize),
) -> Expr
{
__0
}

#[allow(unused_variables)]
fn __action113<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, lhs, _): (usize, Expr, usize),
(_, op, _): (usize, Spanned<BinOp>, usize),
(_, rhs, _): (usize, Expr, usize),
(_, r, _): (usize, usize, usize),
) -> Expr
{
Expr::new(l, r, ExprKind::BinOp(op, bx(lhs), bx(rhs)))
}

#[allow(unused_variables)]
fn __action114<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Expr, usize),
) -> Expr
{
__0
}

#[allow(unused_variables)]
fn __action115<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, val, _): (usize, IsOpKind, usize),
(_, r, _): (usize, usize, usize),
) -> Spanned<IsOpKind>
{
Spanned::new(l, r, val)
}

#[allow(unused_variables)]
fn __action116<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, lhs, _): (usize, Expr, usize),
(_, op, _): (usize, Spanned<BinOp>, usize),
(_, rhs, _): (usize, Expr, usize),
(_, r, _): (usize, usize, usize),
) -> Expr
{
Expr::new(l, r, ExprKind::BinOp(op, bx(lhs), bx(rhs)))
}

#[allow(unused_variables)]
fn __action117<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Expr, usize),
) -> Expr
{
__0
}

#[allow(unused_variables)]
fn __action118<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, lhs, _): (usize, Expr, usize),
(_, op, _): (usize, Spanned<BinOp>, usize),
(_, rhs, _): (usize, Expr, usize),
(_, r, _): (usize, usize, usize),
) -> Expr
{
Expr::new(l, r, ExprKind::BinOp(op, bx(lhs), bx(rhs)))
}

#[allow(unused_variables)]
fn __action119<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Expr, usize),
) -> Expr
{
__0
}

#[allow(unused_variables)]
fn __action120<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, lhs, _): (usize, Expr, usize),
(_, op, _): (usize, Spanned<BinOp>, usize),
(_, rhs, _): (usize, Expr, usize),
(_, r, _): (usize, usize, usize),
) -> Expr
{
Expr::new(l, r, ExprKind::BinOp(op, bx(lhs), bx(rhs)))
}

#[allow(unused_variables)]
fn __action121<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Expr, usize),
) -> Expr
{
__0
}

#[allow(unused_variables)]
fn __action122<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, lhs, _): (usize, Expr, usize),
(_, op, _): (usize, Spanned<BinOp>, usize),
(_, rhs, _): (usize, Expr, usize),
(_, r, _): (usize, usize, usize),
) -> Expr
{
Expr::new(l, r, ExprKind::BinOp(op, bx(lhs), bx(rhs)))
}

#[allow(unused_variables)]
fn __action123<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Expr, usize),
) -> Expr
{
__0
}

#[allow(unused_variables)]
fn __action124<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, val, _): (usize, BinOp, usize),
(_, r, _): (usize, usize, usize),
) -> Spanned<BinOp>
{
Spanned::new(l, r, val)
}

#[allow(unused_variables)]
fn __action125<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Expr, usize),
) -> Expr
{
__0
}

#[allow(unused_variables)]
fn __action126<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Expr, usize),
) -> Expr
{
__0
}

#[allow(unused_variables)]
fn __action127<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Expr, usize),
) -> ::std::option::Option<Expr>
{
Some(__0)
}

#[allow(unused_variables)]
fn __action128<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookbehind: &usize,
__lookahead: &usize,
) -> ::std::option::Option<Expr>
{
None
}

#[allow(unused_variables)]
fn __action129<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Token<'input>, usize),
) -> ::std::option::Option<Token<'input>>
{
Some(__0)
}

#[allow(unused_variables)]
fn __action130<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookbehind: &usize,
__lookahead: &usize,
) -> ::std::option::Option<Token<'input>>
{
None
}

#[allow(unused_variables)]
fn __action131<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, (usize, Expr, usize), usize),
) -> ::std::option::Option<(usize, Expr, usize)>
{
Some(__0)
}

#[allow(unused_variables)]
fn __action132<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookbehind: &usize,
__lookahead: &usize,
) -> ::std::option::Option<(usize, Expr, usize)>
{
None
}

#[allow(unused_variables)]
fn __action133<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, usize, usize),
(_, __1, _): (usize, Expr, usize),
(_, __2, _): (usize, usize, usize),
) -> (usize, Expr, usize)
{
(__0, __1, __2)
}

#[allow(unused_variables)]
fn __action134<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookbehind: &usize,
__lookahead: &usize,
) -> ::std::vec::Vec<Stmt>
{
vec![]
}

#[allow(unused_variables)]
fn __action135<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, v, _): (usize, ::std::vec::Vec<Stmt>, usize),
) -> ::std::vec::Vec<Stmt>
{
v
}

#[allow(unused_variables)]
fn __action136<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Vec<FnParam>, usize),
) -> Vec<FnParam>
{
__0
}

#[allow(unused_variables)]
fn __action137<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Vec<BranchVariant>, usize),
) -> Vec<BranchVariant>
{
__0
}

#[allow(unused_variables)]
fn __action138<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Type, usize),
) -> ::std::option::Option<Type>
{
Some(__0)
}

#[allow(unused_variables)]
fn __action139<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookbehind: &usize,
__lookahead: &usize,
) -> ::std::option::Option<Type>
{
None
}

#[allow(unused_variables)]
fn __action140<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, _, _): (usize, Token<'input>, usize),
(_, __0, _): (usize, Type, usize),
) -> Type
{
__0
}

#[allow(unused_variables)]
fn __action141<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, (usize, usize), usize),
) -> ::std::option::Option<(usize, usize)>
{
Some(__0)
}

#[allow(unused_variables)]
fn __action142<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookbehind: &usize,
__lookahead: &usize,
) -> ::std::option::Option<(usize, usize)>
{
None
}

#[allow(unused_variables)]
fn __action143<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, usize, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, __1, _): (usize, usize, usize),
) -> (usize, usize)
{
(__0, __1)
}

#[allow(unused_variables)]
fn __action144<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Vec<StructField>, usize),
) -> Vec<StructField>
{
__0
}

#[allow(unused_variables)]
fn __action145<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Token<'input>, usize),
) -> ::std::option::Option<Token<'input>>
{
Some(__0)
}

#[allow(unused_variables)]
fn __action146<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookbehind: &usize,
__lookahead: &usize,
) -> ::std::option::Option<Token<'input>>
{
None
}

#[allow(unused_variables)]
fn __action147<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookbehind: &usize,
__lookahead: &usize,
) -> ::std::vec::Vec<UseTree>
{
vec![]
}

#[allow(unused_variables)]
fn __action148<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, v, _): (usize, ::std::vec::Vec<UseTree>, usize),
) -> ::std::vec::Vec<UseTree>
{
v
}

#[allow(unused_variables)]
fn __action149<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, _, _): (usize, Token<'input>, usize),
(_, __0, _): (usize, UseTree, usize),
) -> UseTree
{
__0
}

#[allow(unused_variables)]
fn __action150<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookbehind: &usize,
__lookahead: &usize,
) -> ::std::vec::Vec<Identifier>
{
vec![]
}

#[allow(unused_variables)]
fn __action151<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, v, _): (usize, ::std::vec::Vec<Identifier>, usize),
) -> ::std::vec::Vec<Identifier>
{
v
}

#[allow(unused_variables)]
fn __action152<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, _, _): (usize, Token<'input>, usize),
(_, __0, _): (usize, Identifier, usize),
) -> Identifier
{
__0
}

#[allow(unused_variables)]
fn __action153<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, (usize, usize), usize),
) -> ::std::option::Option<(usize, usize)>
{
Some(__0)
}

#[allow(unused_variables)]
fn __action154<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookbehind: &usize,
__lookahead: &usize,
) -> ::std::option::Option<(usize, usize)>
{
None
}

#[allow(unused_variables)]
fn __action155<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, usize, usize),
(_, _, _): (usize, Token<'input>, usize),
(_, __1, _): (usize, usize, usize),
) -> (usize, usize)
{
(__0, __1)
}

#[allow(unused_variables)]
fn __action156<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookbehind: &usize,
__lookahead: &usize,
) -> usize
{
__lookbehind.clone()
}

#[allow(unused_variables)]
fn __action157<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookbehind: &usize,
__lookahead: &usize,
) -> usize
{
__lookahead.clone()
}

#[allow(unused_variables)]
fn __action158<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookbehind: &usize,
__lookahead: &usize,
) -> ::std::vec::Vec<Item>
{
vec![]
}

#[allow(unused_variables)]
fn __action159<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, v, _): (usize, ::std::vec::Vec<Item>, usize),
) -> ::std::vec::Vec<Item>
{
v
}

#[allow(unused_variables)]
fn __action160<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Item, usize),
) -> ::std::vec::Vec<Item>
{
vec![__0]
}

#[allow(unused_variables)]
fn __action161<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, v, _): (usize, ::std::vec::Vec<Item>, usize),
(_, e, _): (usize, Item, usize),
) -> ::std::vec::Vec<Item>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action162<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Identifier, usize),
) -> ::std::vec::Vec<Identifier>
{
vec![__0]
}

#[allow(unused_variables)]
fn __action163<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, v, _): (usize, ::std::vec::Vec<Identifier>, usize),
(_, e, _): (usize, Identifier, usize),
) -> ::std::vec::Vec<Identifier>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action164<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, UseTree, usize),
) -> ::std::vec::Vec<UseTree>
{
vec![__0]
}

#[allow(unused_variables)]
fn __action165<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, v, _): (usize, ::std::vec::Vec<UseTree>, usize),
(_, e, _): (usize, UseTree, usize),
) -> ::std::vec::Vec<UseTree>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action166<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, v, _): (usize, ::std::vec::Vec<StructField>, usize),
(_, e, _): (usize, ::std::option::Option<StructField>, usize),
) -> Vec<StructField>
{
match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

#[allow(unused_variables)]
fn __action167<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, v, _): (usize, ::std::vec::Vec<BranchVariant>, usize),
(_, e, _): (usize, ::std::option::Option<BranchVariant>, usize),
) -> Vec<BranchVariant>
{
match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

#[allow(unused_variables)]
fn __action168<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, v, _): (usize, ::std::vec::Vec<FnParam>, usize),
(_, e, _): (usize, ::std::option::Option<FnParam>, usize),
) -> Vec<FnParam>
{
match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

#[allow(unused_variables)]
fn __action169<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Stmt, usize),
) -> ::std::vec::Vec<Stmt>
{
vec![__0]
}

#[allow(unused_variables)]
fn __action170<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, v, _): (usize, ::std::vec::Vec<Stmt>, usize),
(_, e, _): (usize, Stmt, usize),
) -> ::std::vec::Vec<Stmt>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action171<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, val, _): (usize, BinOp, usize),
(_, r, _): (usize, usize, usize),
) -> Spanned<BinOp>
{
Spanned::new(l, r, val)
}

#[allow(unused_variables)]
fn __action172<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, val, _): (usize, BinOp, usize),
(_, r, _): (usize, usize, usize),
) -> Spanned<BinOp>
{
Spanned::new(l, r, val)
}

#[allow(unused_variables)]
fn __action173<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, val, _): (usize, BinOp, usize),
(_, r, _): (usize, usize, usize),
) -> Spanned<BinOp>
{
Spanned::new(l, r, val)
}

#[allow(unused_variables)]
fn __action174<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, val, _): (usize, BinOp, usize),
(_, r, _): (usize, usize, usize),
) -> Spanned<BinOp>
{
Spanned::new(l, r, val)
}

#[allow(unused_variables)]
fn __action175<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, val, _): (usize, BinOp, usize),
(_, r, _): (usize, usize, usize),
) -> Spanned<BinOp>
{
Spanned::new(l, r, val)
}

#[allow(unused_variables)]
fn __action176<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, val, _): (usize, BinOp, usize),
(_, r, _): (usize, usize, usize),
) -> Spanned<BinOp>
{
Spanned::new(l, r, val)
}

#[allow(unused_variables)]
fn __action177<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, l, _): (usize, usize, usize),
(_, val, _): (usize, UnOpKind, usize),
(_, r, _): (usize, usize, usize),
) -> Spanned<UnOpKind>
{
Spanned::new(l, r, val)
}

#[allow(unused_variables)]
fn __action178<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, v, _): (usize, ::std::vec::Vec<Expr>, usize),
(_, e, _): (usize, ::std::option::Option<Expr>, usize),
) -> Vec<Expr>
{
match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

#[allow(unused_variables)]
fn __action179<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookbehind: &usize,
__lookahead: &usize,
) -> ::std::vec::Vec<Expr>
{
vec![]
}

#[allow(unused_variables)]
fn __action180<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, v, _): (usize, ::std::vec::Vec<Expr>, usize),
) -> ::std::vec::Vec<Expr>
{
v
}

#[allow(unused_variables)]
fn __action181<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, _, _): (usize, Token<'input>, usize),
(_, __0, _): (usize, Expr, usize),
) -> Expr
{
__0
}

#[allow(unused_variables)]
fn __action182<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Type, usize),
) -> ::std::option::Option<Type>
{
Some(__0)
}

#[allow(unused_variables)]
fn __action183<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookbehind: &usize,
__lookahead: &usize,
) -> ::std::option::Option<Type>
{
None
}

#[allow(unused_variables)]
fn __action184<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookbehind: &usize,
__lookahead: &usize,
) -> ::std::vec::Vec<Type>
{
vec![]
}

#[allow(unused_variables)]
fn __action185<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, v, _): (usize, ::std::vec::Vec<Type>, usize),
) -> ::std::vec::Vec<Type>
{
v
}

#[allow(unused_variables)]
fn __action186<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Type, usize),
(_, _, _): (usize, Token<'input>, usize),
) -> Type
{
__0
}

#[allow(unused_variables)]
fn __action187<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookbehind: &usize,
__lookahead: &usize,
) -> ::std::vec::Vec<Path>
{
vec![]
}

#[allow(unused_variables)]
fn __action188<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, v, _): (usize, ::std::vec::Vec<Path>, usize),
) -> ::std::vec::Vec<Path>
{
v
}

#[allow(unused_variables)]
fn __action189<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, _, _): (usize, Token<'input>, usize),
(_, __0, _): (usize, Path, usize),
) -> Path
{
__0
}

#[allow(unused_variables)]
fn __action190<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Path, usize),
) -> ::std::vec::Vec<Path>
{
vec![__0]
}

#[allow(unused_variables)]
fn __action191<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, v, _): (usize, ::std::vec::Vec<Path>, usize),
(_, e, _): (usize, Path, usize),
) -> ::std::vec::Vec<Path>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action192<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Type, usize),
) -> ::std::vec::Vec<Type>
{
vec![__0]
}

#[allow(unused_variables)]
fn __action193<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, v, _): (usize, ::std::vec::Vec<Type>, usize),
(_, e, _): (usize, Type, usize),
) -> ::std::vec::Vec<Type>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action194<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Expr, usize),
) -> ::std::vec::Vec<Expr>
{
vec![__0]
}

#[allow(unused_variables)]
fn __action195<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, v, _): (usize, ::std::vec::Vec<Expr>, usize),
(_, e, _): (usize, Expr, usize),
) -> ::std::vec::Vec<Expr>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action196<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookbehind: &usize,
__lookahead: &usize,
) -> ::std::vec::Vec<Expr>
{
vec![]
}

#[allow(unused_variables)]
fn __action197<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, v, _): (usize, ::std::vec::Vec<Expr>, usize),
) -> ::std::vec::Vec<Expr>
{
v
}

#[allow(unused_variables)]
fn __action198<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Expr, usize),
(_, _, _): (usize, Token<'input>, usize),
) -> Expr
{
__0
}

#[allow(unused_variables)]
fn __action199<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, FnParam, usize),
) -> ::std::option::Option<FnParam>
{
Some(__0)
}

#[allow(unused_variables)]
fn __action200<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookbehind: &usize,
__lookahead: &usize,
) -> ::std::option::Option<FnParam>
{
None
}

#[allow(unused_variables)]
fn __action201<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookbehind: &usize,
__lookahead: &usize,
) -> ::std::vec::Vec<FnParam>
{
vec![]
}

#[allow(unused_variables)]
fn __action202<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, v, _): (usize, ::std::vec::Vec<FnParam>, usize),
) -> ::std::vec::Vec<FnParam>
{
v
}

#[allow(unused_variables)]
fn __action203<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, FnParam, usize),
(_, _, _): (usize, Token<'input>, usize),
) -> FnParam
{
__0
}

#[allow(unused_variables)]
fn __action204<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, BranchVariant, usize),
) -> ::std::option::Option<BranchVariant>
{
Some(__0)
}

#[allow(unused_variables)]
fn __action205<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookbehind: &usize,
__lookahead: &usize,
) -> ::std::option::Option<BranchVariant>
{
None
}

#[allow(unused_variables)]
fn __action206<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookbehind: &usize,
__lookahead: &usize,
) -> ::std::vec::Vec<BranchVariant>
{
vec![]
}

#[allow(unused_variables)]
fn __action207<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, v, _): (usize, ::std::vec::Vec<BranchVariant>, usize),
) -> ::std::vec::Vec<BranchVariant>
{
v
}

#[allow(unused_variables)]
fn __action208<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, BranchVariant, usize),
(_, _, _): (usize, Token<'input>, usize),
) -> BranchVariant
{
__0
}

#[allow(unused_variables)]
fn __action209<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, StructField, usize),
) -> ::std::option::Option<StructField>
{
Some(__0)
}

#[allow(unused_variables)]
fn __action210<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookbehind: &usize,
__lookahead: &usize,
) -> ::std::option::Option<StructField>
{
None
}

#[allow(unused_variables)]
fn __action211<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookbehind: &usize,
__lookahead: &usize,
) -> ::std::vec::Vec<StructField>
{
vec![]
}

#[allow(unused_variables)]
fn __action212<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, v, _): (usize, ::std::vec::Vec<StructField>, usize),
) -> ::std::vec::Vec<StructField>
{
v
}

#[allow(unused_variables)]
fn __action213<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, StructField, usize),
(_, _, _): (usize, Token<'input>, usize),
) -> StructField
{
__0
}

#[allow(unused_variables)]
fn __action214<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, StructField, usize),
) -> ::std::vec::Vec<StructField>
{
vec![__0]
}

#[allow(unused_variables)]
fn __action215<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, v, _): (usize, ::std::vec::Vec<StructField>, usize),
(_, e, _): (usize, StructField, usize),
) -> ::std::vec::Vec<StructField>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action216<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, BranchVariant, usize),
) -> ::std::vec::Vec<BranchVariant>
{
vec![__0]
}

#[allow(unused_variables)]
fn __action217<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, v, _): (usize, ::std::vec::Vec<BranchVariant>, usize),
(_, e, _): (usize, BranchVariant, usize),
) -> ::std::vec::Vec<BranchVariant>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action218<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, FnParam, usize),
) -> ::std::vec::Vec<FnParam>
{
vec![__0]
}

#[allow(unused_variables)]
fn __action219<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, v, _): (usize, ::std::vec::Vec<FnParam>, usize),
(_, e, _): (usize, FnParam, usize),
) -> ::std::vec::Vec<FnParam>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action220<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, __0, _): (usize, Expr, usize),
) -> ::std::vec::Vec<Expr>
{
vec![__0]
}

#[allow(unused_variables)]
fn __action221<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
(_, v, _): (usize, ::std::vec::Vec<Expr>, usize),
(_, e, _): (usize, Expr, usize),
) -> ::std::vec::Vec<Expr>
{
{ let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action222<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Path, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, UseTree, usize),
__5: (usize, ::std::vec::Vec<UseTree>, usize),
__6: (usize, Token<'input>, usize),
__7: (usize, Token<'input>, usize),
__8: (usize, usize, usize),
) -> UseTree
{
let __start0 = __6.0.clone();
let __end0 = __6.2.clone();
let __temp0 = __action145(
input,
intr,
errs,
__6,
);
let __temp0 = (__start0, __temp0, __end0);
__action15(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__4,
__5,
__temp0,
__7,
__8,
)
}

#[allow(unused_variables)]
fn __action223<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Path, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, UseTree, usize),
__5: (usize, ::std::vec::Vec<UseTree>, usize),
__6: (usize, Token<'input>, usize),
__7: (usize, usize, usize),
) -> UseTree
{
let __start0 = __5.2.clone();
let __end0 = __6.0.clone();
let __temp0 = __action146(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action15(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__4,
__5,
__temp0,
__6,
__7,
)
}

#[allow(unused_variables)]
fn __action224<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Token<'input>, usize),
) -> Option<Expr>
{
let __start0 = __0.0.clone();
let __end0 = __0.2.clone();
let __temp0 = __action129(
input,
intr,
errs,
__0,
);
let __temp0 = (__start0, __temp0, __end0);
__action32(
input,
intr,
errs,
__temp0,
)
}

#[allow(unused_variables)]
fn __action225<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookbehind: &usize,
__lookahead: &usize,
) -> Option<Expr>
{
let __start0 = __lookbehind.clone();
let __end0 = __lookahead.clone();
let __temp0 = __action130(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action32(
input,
intr,
errs,
__temp0,
)
}

#[allow(unused_variables)]
fn __action226<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, usize, usize),
) -> Stmt
{
let __start0 = __2.0.clone();
let __end0 = __2.2.clone();
let __temp0 = __action129(
input,
intr,
errs,
__2,
);
let __temp0 = (__start0, __temp0, __end0);
__action37(
input,
intr,
errs,
__0,
__1,
__temp0,
__3,
)
}

#[allow(unused_variables)]
fn __action227<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, usize, usize),
) -> Stmt
{
let __start0 = __1.2.clone();
let __end0 = __2.0.clone();
let __temp0 = __action130(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action37(
input,
intr,
errs,
__0,
__1,
__temp0,
__2,
)
}

#[allow(unused_variables)]
fn __action228<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Expr, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, usize, usize),
) -> Stmt
{
let __start0 = __2.0.clone();
let __end0 = __2.2.clone();
let __temp0 = __action129(
input,
intr,
errs,
__2,
);
let __temp0 = (__start0, __temp0, __end0);
__action39(
input,
intr,
errs,
__0,
__1,
__temp0,
__3,
)
}

#[allow(unused_variables)]
fn __action229<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Expr, usize),
__2: (usize, usize, usize),
) -> Stmt
{
let __start0 = __1.2.clone();
let __end0 = __2.0.clone();
let __temp0 = __action130(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action39(
input,
intr,
errs,
__0,
__1,
__temp0,
__2,
)
}

#[allow(unused_variables)]
fn __action230<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Identifier, usize),
) -> Path
{
let __start0 = __0.2.clone();
let __end0 = __0.2.clone();
let __temp0 = __action150(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action4(
input,
intr,
errs,
__0,
__temp0,
)
}

#[allow(unused_variables)]
fn __action231<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Identifier, usize),
__1: (usize, ::std::vec::Vec<Identifier>, usize),
) -> Path
{
let __start0 = __1.0.clone();
let __end0 = __1.2.clone();
let __temp0 = __action151(
input,
intr,
errs,
__1,
);
let __temp0 = (__start0, __temp0, __end0);
__action4(
input,
intr,
errs,
__0,
__temp0,
)
}

#[allow(unused_variables)]
fn __action232<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Token<'input>, usize),
__1: (usize, Identifier, usize),
) -> Path
{
let __start0 = __1.0.clone();
let __end0 = __1.2.clone();
let __temp0 = __action230(
input,
intr,
errs,
__1,
);
let __temp0 = (__start0, __temp0, __end0);
__action189(
input,
intr,
errs,
__0,
__temp0,
)
}

#[allow(unused_variables)]
fn __action233<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Token<'input>, usize),
__1: (usize, Identifier, usize),
__2: (usize, ::std::vec::Vec<Identifier>, usize),
) -> Path
{
let __start0 = __1.0.clone();
let __end0 = __2.2.clone();
let __temp0 = __action231(
input,
intr,
errs,
__1,
__2,
);
let __temp0 = (__start0, __temp0, __end0);
__action189(
input,
intr,
errs,
__0,
__temp0,
)
}

#[allow(unused_variables)]
fn __action234<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Identifier, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, Vec<Expr>, usize),
__4: (usize, Token<'input>, usize),
__5: (usize, usize, usize),
) -> Expr
{
let __start0 = __1.0.clone();
let __end0 = __1.2.clone();
let __temp0 = __action230(
input,
intr,
errs,
__1,
);
let __temp0 = (__start0, __temp0, __end0);
__action87(
input,
intr,
errs,
__0,
__temp0,
__2,
__3,
__4,
__5,
)
}

#[allow(unused_variables)]
fn __action235<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Identifier, usize),
__2: (usize, ::std::vec::Vec<Identifier>, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, Vec<Expr>, usize),
__5: (usize, Token<'input>, usize),
__6: (usize, usize, usize),
) -> Expr
{
let __start0 = __1.0.clone();
let __end0 = __2.2.clone();
let __temp0 = __action231(
input,
intr,
errs,
__1,
__2,
);
let __temp0 = (__start0, __temp0, __end0);
__action87(
input,
intr,
errs,
__0,
__temp0,
__3,
__4,
__5,
__6,
)
}

#[allow(unused_variables)]
fn __action236<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, Identifier, usize),
__3: (usize, usize, usize),
) -> Disambiguator
{
let __start0 = __2.0.clone();
let __end0 = __2.2.clone();
let __temp0 = __action230(
input,
intr,
errs,
__2,
);
let __temp0 = (__start0, __temp0, __end0);
__action88(
input,
intr,
errs,
__0,
__1,
__temp0,
__3,
)
}

#[allow(unused_variables)]
fn __action237<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, Identifier, usize),
__3: (usize, ::std::vec::Vec<Identifier>, usize),
__4: (usize, usize, usize),
) -> Disambiguator
{
let __start0 = __2.0.clone();
let __end0 = __3.2.clone();
let __temp0 = __action231(
input,
intr,
errs,
__2,
__3,
);
let __temp0 = (__start0, __temp0, __end0);
__action88(
input,
intr,
errs,
__0,
__1,
__temp0,
__4,
)
}

#[allow(unused_variables)]
fn __action238<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Identifier, usize),
__1: (usize, ::std::vec::Vec<Path>, usize),
) -> Vec<Path>
{
let __start0 = __0.0.clone();
let __end0 = __0.2.clone();
let __temp0 = __action230(
input,
intr,
errs,
__0,
);
let __temp0 = (__start0, __temp0, __end0);
__action103(
input,
intr,
errs,
__temp0,
__1,
)
}

#[allow(unused_variables)]
fn __action239<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Identifier, usize),
__1: (usize, ::std::vec::Vec<Identifier>, usize),
__2: (usize, ::std::vec::Vec<Path>, usize),
) -> Vec<Path>
{
let __start0 = __0.0.clone();
let __end0 = __1.2.clone();
let __temp0 = __action231(
input,
intr,
errs,
__0,
__1,
);
let __temp0 = (__start0, __temp0, __end0);
__action103(
input,
intr,
errs,
__temp0,
__2,
)
}

#[allow(unused_variables)]
fn __action240<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Identifier, usize),
__2: (usize, usize, usize),
) -> UseTree
{
let __start0 = __1.0.clone();
let __end0 = __1.2.clone();
let __temp0 = __action230(
input,
intr,
errs,
__1,
);
let __temp0 = (__start0, __temp0, __end0);
__action12(
input,
intr,
errs,
__0,
__temp0,
__2,
)
}

#[allow(unused_variables)]
fn __action241<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Identifier, usize),
__2: (usize, ::std::vec::Vec<Identifier>, usize),
__3: (usize, usize, usize),
) -> UseTree
{
let __start0 = __1.0.clone();
let __end0 = __2.2.clone();
let __temp0 = __action231(
input,
intr,
errs,
__1,
__2,
);
let __temp0 = (__start0, __temp0, __end0);
__action12(
input,
intr,
errs,
__0,
__temp0,
__3,
)
}

#[allow(unused_variables)]
fn __action242<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Identifier, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, Identifier, usize),
__4: (usize, usize, usize),
) -> UseTree
{
let __start0 = __1.0.clone();
let __end0 = __1.2.clone();
let __temp0 = __action230(
input,
intr,
errs,
__1,
);
let __temp0 = (__start0, __temp0, __end0);
__action13(
input,
intr,
errs,
__0,
__temp0,
__2,
__3,
__4,
)
}

#[allow(unused_variables)]
fn __action243<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Identifier, usize),
__2: (usize, ::std::vec::Vec<Identifier>, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, Identifier, usize),
__5: (usize, usize, usize),
) -> UseTree
{
let __start0 = __1.0.clone();
let __end0 = __2.2.clone();
let __temp0 = __action231(
input,
intr,
errs,
__1,
__2,
);
let __temp0 = (__start0, __temp0, __end0);
__action13(
input,
intr,
errs,
__0,
__temp0,
__3,
__4,
__5,
)
}

#[allow(unused_variables)]
fn __action244<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Identifier, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, usize, usize),
) -> UseTree
{
let __start0 = __1.0.clone();
let __end0 = __1.2.clone();
let __temp0 = __action230(
input,
intr,
errs,
__1,
);
let __temp0 = (__start0, __temp0, __end0);
__action14(
input,
intr,
errs,
__0,
__temp0,
__2,
__3,
__4,
)
}

#[allow(unused_variables)]
fn __action245<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Identifier, usize),
__2: (usize, ::std::vec::Vec<Identifier>, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, Token<'input>, usize),
__5: (usize, usize, usize),
) -> UseTree
{
let __start0 = __1.0.clone();
let __end0 = __2.2.clone();
let __temp0 = __action231(
input,
intr,
errs,
__1,
__2,
);
let __temp0 = (__start0, __temp0, __end0);
__action14(
input,
intr,
errs,
__0,
__temp0,
__3,
__4,
__5,
)
}

#[allow(unused_variables)]
fn __action246<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Identifier, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, UseTree, usize),
__5: (usize, ::std::vec::Vec<UseTree>, usize),
__6: (usize, Token<'input>, usize),
__7: (usize, Token<'input>, usize),
__8: (usize, usize, usize),
) -> UseTree
{
let __start0 = __1.0.clone();
let __end0 = __1.2.clone();
let __temp0 = __action230(
input,
intr,
errs,
__1,
);
let __temp0 = (__start0, __temp0, __end0);
__action222(
input,
intr,
errs,
__0,
__temp0,
__2,
__3,
__4,
__5,
__6,
__7,
__8,
)
}

#[allow(unused_variables)]
fn __action247<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Identifier, usize),
__2: (usize, ::std::vec::Vec<Identifier>, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, Token<'input>, usize),
__5: (usize, UseTree, usize),
__6: (usize, ::std::vec::Vec<UseTree>, usize),
__7: (usize, Token<'input>, usize),
__8: (usize, Token<'input>, usize),
__9: (usize, usize, usize),
) -> UseTree
{
let __start0 = __1.0.clone();
let __end0 = __2.2.clone();
let __temp0 = __action231(
input,
intr,
errs,
__1,
__2,
);
let __temp0 = (__start0, __temp0, __end0);
__action222(
input,
intr,
errs,
__0,
__temp0,
__3,
__4,
__5,
__6,
__7,
__8,
__9,
)
}

#[allow(unused_variables)]
fn __action248<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Identifier, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, UseTree, usize),
__5: (usize, ::std::vec::Vec<UseTree>, usize),
__6: (usize, Token<'input>, usize),
__7: (usize, usize, usize),
) -> UseTree
{
let __start0 = __1.0.clone();
let __end0 = __1.2.clone();
let __temp0 = __action230(
input,
intr,
errs,
__1,
);
let __temp0 = (__start0, __temp0, __end0);
__action223(
input,
intr,
errs,
__0,
__temp0,
__2,
__3,
__4,
__5,
__6,
__7,
)
}

#[allow(unused_variables)]
fn __action249<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Identifier, usize),
__2: (usize, ::std::vec::Vec<Identifier>, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, Token<'input>, usize),
__5: (usize, UseTree, usize),
__6: (usize, ::std::vec::Vec<UseTree>, usize),
__7: (usize, Token<'input>, usize),
__8: (usize, usize, usize),
) -> UseTree
{
let __start0 = __1.0.clone();
let __end0 = __2.2.clone();
let __temp0 = __action231(
input,
intr,
errs,
__1,
__2,
);
let __temp0 = (__start0, __temp0, __end0);
__action223(
input,
intr,
errs,
__0,
__temp0,
__3,
__4,
__5,
__6,
__7,
__8,
)
}

#[allow(unused_variables)]
fn __action250<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Token<'input>, usize),
__1: (usize, Identifier, usize),
) -> ::std::vec::Vec<Path>
{
let __start0 = __0.0.clone();
let __end0 = __1.2.clone();
let __temp0 = __action232(
input,
intr,
errs,
__0,
__1,
);
let __temp0 = (__start0, __temp0, __end0);
__action190(
input,
intr,
errs,
__temp0,
)
}

#[allow(unused_variables)]
fn __action251<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Token<'input>, usize),
__1: (usize, Identifier, usize),
__2: (usize, ::std::vec::Vec<Identifier>, usize),
) -> ::std::vec::Vec<Path>
{
let __start0 = __0.0.clone();
let __end0 = __2.2.clone();
let __temp0 = __action233(
input,
intr,
errs,
__0,
__1,
__2,
);
let __temp0 = (__start0, __temp0, __end0);
__action190(
input,
intr,
errs,
__temp0,
)
}

#[allow(unused_variables)]
fn __action252<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, ::std::vec::Vec<Path>, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, Identifier, usize),
) -> ::std::vec::Vec<Path>
{
let __start0 = __1.0.clone();
let __end0 = __2.2.clone();
let __temp0 = __action232(
input,
intr,
errs,
__1,
__2,
);
let __temp0 = (__start0, __temp0, __end0);
__action191(
input,
intr,
errs,
__0,
__temp0,
)
}

#[allow(unused_variables)]
fn __action253<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, ::std::vec::Vec<Path>, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, Identifier, usize),
__3: (usize, ::std::vec::Vec<Identifier>, usize),
) -> ::std::vec::Vec<Path>
{
let __start0 = __1.0.clone();
let __end0 = __3.2.clone();
let __temp0 = __action233(
input,
intr,
errs,
__1,
__2,
__3,
);
let __temp0 = (__start0, __temp0, __end0);
__action191(
input,
intr,
errs,
__0,
__temp0,
)
}

#[allow(unused_variables)]
fn __action254<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Identifier, usize),
) -> Vec<Path>
{
let __start0 = __0.2.clone();
let __end0 = __0.2.clone();
let __temp0 = __action187(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action238(
input,
intr,
errs,
__0,
__temp0,
)
}

#[allow(unused_variables)]
fn __action255<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Identifier, usize),
__1: (usize, ::std::vec::Vec<Path>, usize),
) -> Vec<Path>
{
let __start0 = __1.0.clone();
let __end0 = __1.2.clone();
let __temp0 = __action188(
input,
intr,
errs,
__1,
);
let __temp0 = (__start0, __temp0, __end0);
__action238(
input,
intr,
errs,
__0,
__temp0,
)
}

#[allow(unused_variables)]
fn __action256<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Identifier, usize),
__1: (usize, ::std::vec::Vec<Identifier>, usize),
) -> Vec<Path>
{
let __start0 = __1.2.clone();
let __end0 = __1.2.clone();
let __temp0 = __action187(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action239(
input,
intr,
errs,
__0,
__1,
__temp0,
)
}

#[allow(unused_variables)]
fn __action257<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Identifier, usize),
__1: (usize, ::std::vec::Vec<Identifier>, usize),
__2: (usize, ::std::vec::Vec<Path>, usize),
) -> Vec<Path>
{
let __start0 = __2.0.clone();
let __end0 = __2.2.clone();
let __temp0 = __action188(
input,
intr,
errs,
__2,
);
let __temp0 = (__start0, __temp0, __end0);
__action239(
input,
intr,
errs,
__0,
__1,
__temp0,
)
}

#[allow(unused_variables)]
fn __action258<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Token<'input>, usize),
__1: (usize, Expr, usize),
) -> ::std::vec::Vec<Expr>
{
let __start0 = __0.0.clone();
let __end0 = __1.2.clone();
let __temp0 = __action181(
input,
intr,
errs,
__0,
__1,
);
let __temp0 = (__start0, __temp0, __end0);
__action194(
input,
intr,
errs,
__temp0,
)
}

#[allow(unused_variables)]
fn __action259<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, ::std::vec::Vec<Expr>, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, Expr, usize),
) -> ::std::vec::Vec<Expr>
{
let __start0 = __1.0.clone();
let __end0 = __2.2.clone();
let __temp0 = __action181(
input,
intr,
errs,
__1,
__2,
);
let __temp0 = (__start0, __temp0, __end0);
__action195(
input,
intr,
errs,
__0,
__temp0,
)
}

#[allow(unused_variables)]
fn __action260<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Expr, usize),
) -> Vec<Expr>
{
let __start0 = __0.2.clone();
let __end0 = __0.2.clone();
let __temp0 = __action179(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action105(
input,
intr,
errs,
__0,
__temp0,
)
}

#[allow(unused_variables)]
fn __action261<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Expr, usize),
__1: (usize, ::std::vec::Vec<Expr>, usize),
) -> Vec<Expr>
{
let __start0 = __1.0.clone();
let __end0 = __1.2.clone();
let __temp0 = __action180(
input,
intr,
errs,
__1,
);
let __temp0 = (__start0, __temp0, __end0);
__action105(
input,
intr,
errs,
__0,
__temp0,
)
}

#[allow(unused_variables)]
fn __action262<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Token<'input>, usize),
__1: (usize, UseTree, usize),
) -> ::std::vec::Vec<UseTree>
{
let __start0 = __0.0.clone();
let __end0 = __1.2.clone();
let __temp0 = __action149(
input,
intr,
errs,
__0,
__1,
);
let __temp0 = (__start0, __temp0, __end0);
__action164(
input,
intr,
errs,
__temp0,
)
}

#[allow(unused_variables)]
fn __action263<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, ::std::vec::Vec<UseTree>, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, UseTree, usize),
) -> ::std::vec::Vec<UseTree>
{
let __start0 = __1.0.clone();
let __end0 = __2.2.clone();
let __temp0 = __action149(
input,
intr,
errs,
__1,
__2,
);
let __temp0 = (__start0, __temp0, __end0);
__action165(
input,
intr,
errs,
__0,
__temp0,
)
}

#[allow(unused_variables)]
fn __action264<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Identifier, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, UseTree, usize),
__5: (usize, Token<'input>, usize),
__6: (usize, Token<'input>, usize),
__7: (usize, usize, usize),
) -> UseTree
{
let __start0 = __4.2.clone();
let __end0 = __5.0.clone();
let __temp0 = __action147(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action246(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__4,
__temp0,
__5,
__6,
__7,
)
}

#[allow(unused_variables)]
fn __action265<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Identifier, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, UseTree, usize),
__5: (usize, ::std::vec::Vec<UseTree>, usize),
__6: (usize, Token<'input>, usize),
__7: (usize, Token<'input>, usize),
__8: (usize, usize, usize),
) -> UseTree
{
let __start0 = __5.0.clone();
let __end0 = __5.2.clone();
let __temp0 = __action148(
input,
intr,
errs,
__5,
);
let __temp0 = (__start0, __temp0, __end0);
__action246(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__4,
__temp0,
__6,
__7,
__8,
)
}

#[allow(unused_variables)]
fn __action266<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Identifier, usize),
__2: (usize, ::std::vec::Vec<Identifier>, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, Token<'input>, usize),
__5: (usize, UseTree, usize),
__6: (usize, Token<'input>, usize),
__7: (usize, Token<'input>, usize),
__8: (usize, usize, usize),
) -> UseTree
{
let __start0 = __5.2.clone();
let __end0 = __6.0.clone();
let __temp0 = __action147(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action247(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__4,
__5,
__temp0,
__6,
__7,
__8,
)
}

#[allow(unused_variables)]
fn __action267<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Identifier, usize),
__2: (usize, ::std::vec::Vec<Identifier>, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, Token<'input>, usize),
__5: (usize, UseTree, usize),
__6: (usize, ::std::vec::Vec<UseTree>, usize),
__7: (usize, Token<'input>, usize),
__8: (usize, Token<'input>, usize),
__9: (usize, usize, usize),
) -> UseTree
{
let __start0 = __6.0.clone();
let __end0 = __6.2.clone();
let __temp0 = __action148(
input,
intr,
errs,
__6,
);
let __temp0 = (__start0, __temp0, __end0);
__action247(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__4,
__5,
__temp0,
__7,
__8,
__9,
)
}

#[allow(unused_variables)]
fn __action268<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Identifier, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, UseTree, usize),
__5: (usize, Token<'input>, usize),
__6: (usize, usize, usize),
) -> UseTree
{
let __start0 = __4.2.clone();
let __end0 = __5.0.clone();
let __temp0 = __action147(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action248(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__4,
__temp0,
__5,
__6,
)
}

#[allow(unused_variables)]
fn __action269<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Identifier, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, UseTree, usize),
__5: (usize, ::std::vec::Vec<UseTree>, usize),
__6: (usize, Token<'input>, usize),
__7: (usize, usize, usize),
) -> UseTree
{
let __start0 = __5.0.clone();
let __end0 = __5.2.clone();
let __temp0 = __action148(
input,
intr,
errs,
__5,
);
let __temp0 = (__start0, __temp0, __end0);
__action248(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__4,
__temp0,
__6,
__7,
)
}

#[allow(unused_variables)]
fn __action270<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Identifier, usize),
__2: (usize, ::std::vec::Vec<Identifier>, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, Token<'input>, usize),
__5: (usize, UseTree, usize),
__6: (usize, Token<'input>, usize),
__7: (usize, usize, usize),
) -> UseTree
{
let __start0 = __5.2.clone();
let __end0 = __6.0.clone();
let __temp0 = __action147(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action249(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__4,
__5,
__temp0,
__6,
__7,
)
}

#[allow(unused_variables)]
fn __action271<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Identifier, usize),
__2: (usize, ::std::vec::Vec<Identifier>, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, Token<'input>, usize),
__5: (usize, UseTree, usize),
__6: (usize, ::std::vec::Vec<UseTree>, usize),
__7: (usize, Token<'input>, usize),
__8: (usize, usize, usize),
) -> UseTree
{
let __start0 = __6.0.clone();
let __end0 = __6.2.clone();
let __temp0 = __action148(
input,
intr,
errs,
__6,
);
let __temp0 = (__start0, __temp0, __end0);
__action249(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__4,
__5,
__temp0,
__7,
__8,
)
}

#[allow(unused_variables)]
fn __action272<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Token<'input>, usize),
__1: (usize, Type, usize),
) -> ::std::option::Option<Type>
{
let __start0 = __0.0.clone();
let __end0 = __1.2.clone();
let __temp0 = __action140(
input,
intr,
errs,
__0,
__1,
);
let __temp0 = (__start0, __temp0, __end0);
__action138(
input,
intr,
errs,
__temp0,
)
}

#[allow(unused_variables)]
fn __action273<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Visibility, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, Identifier, usize),
__4: (usize, Token<'input>, usize),
__5: (usize, Type, usize),
__6: (usize, Token<'input>, usize),
__7: (usize, Vec<BranchVariant>, usize),
__8: (usize, Token<'input>, usize),
__9: (usize, usize, usize),
) -> Item
{
let __start0 = __4.0.clone();
let __end0 = __5.2.clone();
let __temp0 = __action272(
input,
intr,
errs,
__4,
__5,
);
let __temp0 = (__start0, __temp0, __end0);
__action22(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__temp0,
__6,
__7,
__8,
__9,
)
}

#[allow(unused_variables)]
fn __action274<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Visibility, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, Identifier, usize),
__4: (usize, Token<'input>, usize),
__5: (usize, Vec<BranchVariant>, usize),
__6: (usize, Token<'input>, usize),
__7: (usize, usize, usize),
) -> Item
{
let __start0 = __3.2.clone();
let __end0 = __4.0.clone();
let __temp0 = __action139(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action22(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__temp0,
__4,
__5,
__6,
__7,
)
}

#[allow(unused_variables)]
fn __action275<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Visibility, usize),
__2: (usize, ::std::option::Option<(usize, usize)>, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, Identifier, usize),
__5: (usize, Token<'input>, usize),
__6: (usize, Type, usize),
__7: (usize, Token<'input>, usize),
__8: (usize, Vec<StructField>, usize),
__9: (usize, Token<'input>, usize),
__10: (usize, usize, usize),
) -> Item
{
let __start0 = __5.0.clone();
let __end0 = __6.2.clone();
let __temp0 = __action272(
input,
intr,
errs,
__5,
__6,
);
let __temp0 = (__start0, __temp0, __end0);
__action21(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__4,
__temp0,
__7,
__8,
__9,
__10,
)
}

#[allow(unused_variables)]
fn __action276<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Visibility, usize),
__2: (usize, ::std::option::Option<(usize, usize)>, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, Identifier, usize),
__5: (usize, Token<'input>, usize),
__6: (usize, Vec<StructField>, usize),
__7: (usize, Token<'input>, usize),
__8: (usize, usize, usize),
) -> Item
{
let __start0 = __4.2.clone();
let __end0 = __5.0.clone();
let __temp0 = __action139(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action21(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__4,
__temp0,
__5,
__6,
__7,
__8,
)
}

#[allow(unused_variables)]
fn __action277<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Token<'input>, usize),
__1: (usize, Vec<FnParam>, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, Type, usize),
__5: (usize, Option<Block>, usize),
) -> (Vec<FnParam>, ::std::option::Option<Type>, Option<Block>)
{
let __start0 = __3.0.clone();
let __end0 = __4.2.clone();
let __temp0 = __action272(
input,
intr,
errs,
__3,
__4,
);
let __temp0 = (__start0, __temp0, __end0);
__action26(
input,
intr,
errs,
__0,
__1,
__2,
__temp0,
__5,
)
}

#[allow(unused_variables)]
fn __action278<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Token<'input>, usize),
__1: (usize, Vec<FnParam>, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, Option<Block>, usize),
) -> (Vec<FnParam>, ::std::option::Option<Type>, Option<Block>)
{
let __start0 = __2.2.clone();
let __end0 = __3.0.clone();
let __temp0 = __action139(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action26(
input,
intr,
errs,
__0,
__1,
__2,
__temp0,
__3,
)
}

#[allow(unused_variables)]
fn __action279<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, Identifier, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, Type, usize),
__5: (usize, Token<'input>, usize),
__6: (usize, Expr, usize),
__7: (usize, Token<'input>, usize),
__8: (usize, usize, usize),
) -> Stmt
{
let __start0 = __3.0.clone();
let __end0 = __4.2.clone();
let __temp0 = __action272(
input,
intr,
errs,
__3,
__4,
);
let __temp0 = (__start0, __temp0, __end0);
__action34(
input,
intr,
errs,
__0,
__1,
__2,
__temp0,
__5,
__6,
__7,
__8,
)
}

#[allow(unused_variables)]
fn __action280<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, Identifier, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, Expr, usize),
__5: (usize, Token<'input>, usize),
__6: (usize, usize, usize),
) -> Stmt
{
let __start0 = __2.2.clone();
let __end0 = __3.0.clone();
let __temp0 = __action139(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action34(
input,
intr,
errs,
__0,
__1,
__2,
__temp0,
__3,
__4,
__5,
__6,
)
}

#[allow(unused_variables)]
fn __action281<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Token<'input>, usize),
__1: (usize, Identifier, usize),
) -> ::std::vec::Vec<Identifier>
{
let __start0 = __0.0.clone();
let __end0 = __1.2.clone();
let __temp0 = __action152(
input,
intr,
errs,
__0,
__1,
);
let __temp0 = (__start0, __temp0, __end0);
__action162(
input,
intr,
errs,
__temp0,
)
}

#[allow(unused_variables)]
fn __action282<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, ::std::vec::Vec<Identifier>, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, Identifier, usize),
) -> ::std::vec::Vec<Identifier>
{
let __start0 = __1.0.clone();
let __end0 = __2.2.clone();
let __temp0 = __action152(
input,
intr,
errs,
__1,
__2,
);
let __temp0 = (__start0, __temp0, __end0);
__action163(
input,
intr,
errs,
__0,
__temp0,
)
}

#[allow(unused_variables)]
fn __action283<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Token<'input>, usize),
) -> (usize, usize)
{
let __start0 = __1.2.clone();
let __end0 = __1.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action143(
input,
intr,
errs,
__0,
__1,
__temp0,
)
}

#[allow(unused_variables)]
fn __action284<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Token<'input>, usize),
) -> (usize, usize)
{
let __start0 = __1.2.clone();
let __end0 = __1.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action155(
input,
intr,
errs,
__0,
__1,
__temp0,
)
}

#[allow(unused_variables)]
fn __action285<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Expr, usize),
) -> (usize, Expr, usize)
{
let __start0 = __1.2.clone();
let __end0 = __1.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action133(
input,
intr,
errs,
__0,
__1,
__temp0,
)
}

#[allow(unused_variables)]
fn __action286<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Expr, usize),
__2: (usize, Spanned<BinOp>, usize),
__3: (usize, Expr, usize),
) -> Expr
{
let __start0 = __3.2.clone();
let __end0 = __3.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action111(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__temp0,
)
}

#[allow(unused_variables)]
fn __action287<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Expr, usize),
__2: (usize, Spanned<BinOp>, usize),
__3: (usize, Expr, usize),
) -> Expr
{
let __start0 = __3.2.clone();
let __end0 = __3.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action113(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__temp0,
)
}

#[allow(unused_variables)]
fn __action288<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Expr, usize),
__2: (usize, Spanned<BinOp>, usize),
__3: (usize, Expr, usize),
) -> Expr
{
let __start0 = __3.2.clone();
let __end0 = __3.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action116(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__temp0,
)
}

#[allow(unused_variables)]
fn __action289<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Expr, usize),
__2: (usize, Spanned<BinOp>, usize),
__3: (usize, Expr, usize),
) -> Expr
{
let __start0 = __3.2.clone();
let __end0 = __3.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action118(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__temp0,
)
}

#[allow(unused_variables)]
fn __action290<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Expr, usize),
__2: (usize, Spanned<BinOp>, usize),
__3: (usize, Expr, usize),
) -> Expr
{
let __start0 = __3.2.clone();
let __end0 = __3.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action120(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__temp0,
)
}

#[allow(unused_variables)]
fn __action291<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Expr, usize),
__2: (usize, Spanned<BinOp>, usize),
__3: (usize, Expr, usize),
) -> Expr
{
let __start0 = __3.2.clone();
let __end0 = __3.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action122(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__temp0,
)
}

#[allow(unused_variables)]
fn __action292<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, ::std::vec::Vec<Stmt>, usize),
__3: (usize, ::std::option::Option<(usize, Expr, usize)>, usize),
__4: (usize, Token<'input>, usize),
) -> Block
{
let __start0 = __4.2.clone();
let __end0 = __4.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action28(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__4,
__temp0,
)
}

#[allow(unused_variables)]
fn __action293<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Block, usize),
) -> Expr
{
let __start0 = __1.2.clone();
let __end0 = __1.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action45(
input,
intr,
errs,
__0,
__1,
__temp0,
)
}

#[allow(unused_variables)]
fn __action294<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Visibility, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, Identifier, usize),
__4: (usize, Token<'input>, usize),
__5: (usize, Type, usize),
__6: (usize, Token<'input>, usize),
__7: (usize, Vec<BranchVariant>, usize),
__8: (usize, Token<'input>, usize),
) -> Item
{
let __start0 = __8.2.clone();
let __end0 = __8.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action273(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__4,
__5,
__6,
__7,
__8,
__temp0,
)
}

#[allow(unused_variables)]
fn __action295<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Visibility, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, Identifier, usize),
__4: (usize, Token<'input>, usize),
__5: (usize, Vec<BranchVariant>, usize),
__6: (usize, Token<'input>, usize),
) -> Item
{
let __start0 = __6.2.clone();
let __end0 = __6.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action274(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__4,
__5,
__6,
__temp0,
)
}

#[allow(unused_variables)]
fn __action296<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Identifier, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, Vec<StructField>, usize),
__4: (usize, Token<'input>, usize),
) -> BranchVariant
{
let __start0 = __4.2.clone();
let __end0 = __4.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action23(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__4,
__temp0,
)
}

#[allow(unused_variables)]
fn __action297<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Identifier, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, Vec<Expr>, usize),
__4: (usize, Token<'input>, usize),
) -> Expr
{
let __start0 = __4.2.clone();
let __end0 = __4.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action234(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__4,
__temp0,
)
}

#[allow(unused_variables)]
fn __action298<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Identifier, usize),
__2: (usize, ::std::vec::Vec<Identifier>, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, Vec<Expr>, usize),
__5: (usize, Token<'input>, usize),
) -> Expr
{
let __start0 = __5.2.clone();
let __end0 = __5.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action235(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__4,
__5,
__temp0,
)
}

#[allow(unused_variables)]
fn __action299<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Visibility, usize),
__2: (usize, ::std::option::Option<(usize, usize)>, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, Identifier, usize),
__5: (usize, Token<'input>, usize),
__6: (usize, Type, usize),
__7: (usize, Token<'input>, usize),
__8: (usize, Vec<StructField>, usize),
__9: (usize, Token<'input>, usize),
) -> Item
{
let __start0 = __9.2.clone();
let __end0 = __9.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action275(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__4,
__5,
__6,
__7,
__8,
__9,
__temp0,
)
}

#[allow(unused_variables)]
fn __action300<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Visibility, usize),
__2: (usize, ::std::option::Option<(usize, usize)>, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, Identifier, usize),
__5: (usize, Token<'input>, usize),
__6: (usize, Vec<StructField>, usize),
__7: (usize, Token<'input>, usize),
) -> Item
{
let __start0 = __7.2.clone();
let __end0 = __7.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action276(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__4,
__5,
__6,
__7,
__temp0,
)
}

#[allow(unused_variables)]
fn __action301<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, Identifier, usize),
) -> Disambiguator
{
let __start0 = __2.2.clone();
let __end0 = __2.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action236(
input,
intr,
errs,
__0,
__1,
__2,
__temp0,
)
}

#[allow(unused_variables)]
fn __action302<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, Identifier, usize),
__3: (usize, ::std::vec::Vec<Identifier>, usize),
) -> Disambiguator
{
let __start0 = __3.2.clone();
let __end0 = __3.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action237(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__temp0,
)
}

#[allow(unused_variables)]
fn __action303<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Lit, usize),
) -> Expr
{
let __start0 = __1.2.clone();
let __end0 = __1.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action89(
input,
intr,
errs,
__0,
__1,
__temp0,
)
}

#[allow(unused_variables)]
fn __action304<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Identifier, usize),
) -> Expr
{
let __start0 = __1.2.clone();
let __end0 = __1.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action90(
input,
intr,
errs,
__0,
__1,
__temp0,
)
}

#[allow(unused_variables)]
fn __action305<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Expr, usize),
__2: (usize, ::std::option::Option<Disambiguator>, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, Identifier, usize),
) -> Expr
{
let __start0 = __4.2.clone();
let __end0 = __4.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action91(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__4,
__temp0,
)
}

#[allow(unused_variables)]
fn __action306<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, Vec<Expr>, usize),
__3: (usize, Token<'input>, usize),
) -> Expr
{
let __start0 = __3.2.clone();
let __end0 = __3.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action93(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__temp0,
)
}

#[allow(unused_variables)]
fn __action307<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, __lalrpop_util::ErrorRecovery<usize, Token<'input>, ParserError>, usize),
) -> Expr
{
let __start0 = __1.2.clone();
let __end0 = __1.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action94(
input,
intr,
errs,
__0,
__1,
__temp0,
)
}

#[allow(unused_variables)]
fn __action308<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Expr, usize),
__2: (usize, usize, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, Expr, usize),
) -> Expr
{
let __start0 = __3.2.clone();
let __end0 = __4.0.clone();
let __start1 = __4.2.clone();
let __end1 = __4.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
let __temp1 = __action156(
input,
intr,
errs,
&__start1,
&__end1,
);
let __temp1 = (__start1, __temp1, __end1);
__action51(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__temp0,
__4,
__temp1,
)
}

#[allow(unused_variables)]
fn __action309<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Expr, usize),
__2: (usize, Spanned<BinOp>, usize),
__3: (usize, Expr, usize),
) -> Expr
{
let __start0 = __3.2.clone();
let __end0 = __3.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action52(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__temp0,
)
}

#[allow(unused_variables)]
fn __action310<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Expr, usize),
__2: (usize, Spanned<IsOpKind>, usize),
__3: (usize, Type, usize),
) -> Expr
{
let __start0 = __3.2.clone();
let __end0 = __3.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action73(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__temp0,
)
}

#[allow(unused_variables)]
fn __action311<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Visibility, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, Identifier, usize),
__4: (usize, (Vec<FnParam>, ::std::option::Option<Type>, Option<Block>), usize),
) -> Item
{
let __start0 = __4.2.clone();
let __end0 = __4.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action25(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__4,
__temp0,
)
}

#[allow(unused_variables)]
fn __action312<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, &'input str, usize),
) -> Identifier
{
let __start0 = __1.2.clone();
let __end0 = __1.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action3(
input,
intr,
errs,
__0,
__1,
__temp0,
)
}

#[allow(unused_variables)]
fn __action313<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, Expr, usize),
__3: (usize, Block, usize),
) -> Expr
{
let __start0 = __3.2.clone();
let __end0 = __3.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action46(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__temp0,
)
}

#[allow(unused_variables)]
fn __action314<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, Expr, usize),
__3: (usize, Block, usize),
__4: (usize, Token<'input>, usize),
__5: (usize, Expr, usize),
) -> Expr
{
let __start0 = __5.2.clone();
let __end0 = __5.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action47(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__4,
__5,
__temp0,
)
}

#[allow(unused_variables)]
fn __action315<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, &'input str, usize),
) -> Lit
{
let __start0 = __1.2.clone();
let __end0 = __1.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action98(
input,
intr,
errs,
__0,
__1,
__temp0,
)
}

#[allow(unused_variables)]
fn __action316<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, Block, usize),
) -> Expr
{
let __start0 = __2.2.clone();
let __end0 = __2.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action48(
input,
intr,
errs,
__0,
__1,
__2,
__temp0,
)
}

#[allow(unused_variables)]
fn __action317<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, Expr, usize),
__3: (usize, Block, usize),
) -> Expr
{
let __start0 = __3.2.clone();
let __end0 = __3.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action49(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__temp0,
)
}

#[allow(unused_variables)]
fn __action318<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Visibility, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, Identifier, usize),
__4: (usize, Vec<Item>, usize),
) -> Item
{
let __start0 = __4.2.clone();
let __end0 = __4.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action19(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__4,
__temp0,
)
}

#[allow(unused_variables)]
fn __action319<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, IsOpKind, usize),
) -> Spanned<IsOpKind>
{
let __start0 = __1.2.clone();
let __end0 = __1.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action115(
input,
intr,
errs,
__0,
__1,
__temp0,
)
}

#[allow(unused_variables)]
fn __action320<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, UnOpKind, usize),
) -> Spanned<UnOpKind>
{
let __start0 = __1.2.clone();
let __end0 = __1.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action177(
input,
intr,
errs,
__0,
__1,
__temp0,
)
}

#[allow(unused_variables)]
fn __action321<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, BinOp, usize),
) -> Spanned<BinOp>
{
let __start0 = __1.2.clone();
let __end0 = __1.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action176(
input,
intr,
errs,
__0,
__1,
__temp0,
)
}

#[allow(unused_variables)]
fn __action322<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, BinOp, usize),
) -> Spanned<BinOp>
{
let __start0 = __1.2.clone();
let __end0 = __1.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action175(
input,
intr,
errs,
__0,
__1,
__temp0,
)
}

#[allow(unused_variables)]
fn __action323<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, BinOp, usize),
) -> Spanned<BinOp>
{
let __start0 = __1.2.clone();
let __end0 = __1.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action174(
input,
intr,
errs,
__0,
__1,
__temp0,
)
}

#[allow(unused_variables)]
fn __action324<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, BinOp, usize),
) -> Spanned<BinOp>
{
let __start0 = __1.2.clone();
let __end0 = __1.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action173(
input,
intr,
errs,
__0,
__1,
__temp0,
)
}

#[allow(unused_variables)]
fn __action325<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, BinOp, usize),
) -> Spanned<BinOp>
{
let __start0 = __1.2.clone();
let __end0 = __1.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action172(
input,
intr,
errs,
__0,
__1,
__temp0,
)
}

#[allow(unused_variables)]
fn __action326<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, BinOp, usize),
) -> Spanned<BinOp>
{
let __start0 = __1.2.clone();
let __end0 = __1.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action124(
input,
intr,
errs,
__0,
__1,
__temp0,
)
}

#[allow(unused_variables)]
fn __action327<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, BinOp, usize),
) -> Spanned<BinOp>
{
let __start0 = __1.2.clone();
let __end0 = __1.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action171(
input,
intr,
errs,
__0,
__1,
__temp0,
)
}

#[allow(unused_variables)]
fn __action328<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Item, usize),
) -> Stmt
{
let __start0 = __1.2.clone();
let __end0 = __1.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action33(
input,
intr,
errs,
__0,
__1,
__temp0,
)
}

#[allow(unused_variables)]
fn __action329<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, Identifier, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, Type, usize),
__5: (usize, Token<'input>, usize),
__6: (usize, Expr, usize),
__7: (usize, Token<'input>, usize),
) -> Stmt
{
let __start0 = __7.2.clone();
let __end0 = __7.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action279(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__4,
__5,
__6,
__7,
__temp0,
)
}

#[allow(unused_variables)]
fn __action330<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, Identifier, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, Expr, usize),
__5: (usize, Token<'input>, usize),
) -> Stmt
{
let __start0 = __5.2.clone();
let __end0 = __5.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action280(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__4,
__5,
__temp0,
)
}

#[allow(unused_variables)]
fn __action331<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, ::std::option::Option<Expr>, usize),
__3: (usize, Token<'input>, usize),
) -> Stmt
{
let __start0 = __3.2.clone();
let __end0 = __3.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action35(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__temp0,
)
}

#[allow(unused_variables)]
fn __action332<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, ::std::option::Option<Expr>, usize),
__3: (usize, Token<'input>, usize),
) -> Stmt
{
let __start0 = __3.2.clone();
let __end0 = __3.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action36(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__temp0,
)
}

#[allow(unused_variables)]
fn __action333<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, Token<'input>, usize),
) -> Stmt
{
let __start0 = __2.2.clone();
let __end0 = __2.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action226(
input,
intr,
errs,
__0,
__1,
__2,
__temp0,
)
}

#[allow(unused_variables)]
fn __action334<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Token<'input>, usize),
) -> Stmt
{
let __start0 = __1.2.clone();
let __end0 = __1.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action227(
input,
intr,
errs,
__0,
__1,
__temp0,
)
}

#[allow(unused_variables)]
fn __action335<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Expr, usize),
__2: (usize, Token<'input>, usize),
) -> Stmt
{
let __start0 = __2.2.clone();
let __end0 = __2.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action38(
input,
intr,
errs,
__0,
__1,
__2,
__temp0,
)
}

#[allow(unused_variables)]
fn __action336<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Expr, usize),
__2: (usize, Token<'input>, usize),
) -> Stmt
{
let __start0 = __2.2.clone();
let __end0 = __2.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action228(
input,
intr,
errs,
__0,
__1,
__2,
__temp0,
)
}

#[allow(unused_variables)]
fn __action337<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Expr, usize),
) -> Stmt
{
let __start0 = __1.2.clone();
let __end0 = __1.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action229(
input,
intr,
errs,
__0,
__1,
__temp0,
)
}

#[allow(unused_variables)]
fn __action338<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Visibility, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, Identifier, usize),
__4: (usize, Token<'input>, usize),
__5: (usize, Vec<StructField>, usize),
__6: (usize, Token<'input>, usize),
) -> Item
{
let __start0 = __6.2.clone();
let __end0 = __6.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action20(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__4,
__5,
__6,
__temp0,
)
}

#[allow(unused_variables)]
fn __action339<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Token<'input>, usize),
) -> Type
{
let __start0 = __1.2.clone();
let __end0 = __1.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action99(
input,
intr,
errs,
__0,
__1,
__temp0,
)
}

#[allow(unused_variables)]
fn __action340<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, Vec<Type>, usize),
__3: (usize, Token<'input>, usize),
) -> Type
{
let __start0 = __3.2.clone();
let __end0 = __3.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action100(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__temp0,
)
}

#[allow(unused_variables)]
fn __action341<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Vec<Path>, usize),
) -> Type
{
let __start0 = __1.2.clone();
let __end0 = __1.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action101(
input,
intr,
errs,
__0,
__1,
__temp0,
)
}

#[allow(unused_variables)]
fn __action342<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, __lalrpop_util::ErrorRecovery<usize, Token<'input>, ParserError>, usize),
) -> Type
{
let __start0 = __1.2.clone();
let __end0 = __1.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action102(
input,
intr,
errs,
__0,
__1,
__temp0,
)
}

#[allow(unused_variables)]
fn __action343<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Spanned<UnOpKind>, usize),
__2: (usize, Expr, usize),
) -> Expr
{
let __start0 = __2.2.clone();
let __end0 = __2.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action109(
input,
intr,
errs,
__0,
__1,
__2,
__temp0,
)
}

#[allow(unused_variables)]
fn __action344<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Visibility, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, UseTree, usize),
__4: (usize, Token<'input>, usize),
) -> Item
{
let __start0 = __4.2.clone();
let __end0 = __4.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action11(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__4,
__temp0,
)
}

#[allow(unused_variables)]
fn __action345<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Identifier, usize),
) -> UseTree
{
let __start0 = __1.2.clone();
let __end0 = __1.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action240(
input,
intr,
errs,
__0,
__1,
__temp0,
)
}

#[allow(unused_variables)]
fn __action346<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Identifier, usize),
__2: (usize, ::std::vec::Vec<Identifier>, usize),
) -> UseTree
{
let __start0 = __2.2.clone();
let __end0 = __2.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action241(
input,
intr,
errs,
__0,
__1,
__2,
__temp0,
)
}

#[allow(unused_variables)]
fn __action347<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Identifier, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, Identifier, usize),
) -> UseTree
{
let __start0 = __3.2.clone();
let __end0 = __3.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action242(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__temp0,
)
}

#[allow(unused_variables)]
fn __action348<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Identifier, usize),
__2: (usize, ::std::vec::Vec<Identifier>, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, Identifier, usize),
) -> UseTree
{
let __start0 = __4.2.clone();
let __end0 = __4.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action243(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__4,
__temp0,
)
}

#[allow(unused_variables)]
fn __action349<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Identifier, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, Token<'input>, usize),
) -> UseTree
{
let __start0 = __3.2.clone();
let __end0 = __3.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action244(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__temp0,
)
}

#[allow(unused_variables)]
fn __action350<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Identifier, usize),
__2: (usize, ::std::vec::Vec<Identifier>, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, Token<'input>, usize),
) -> UseTree
{
let __start0 = __4.2.clone();
let __end0 = __4.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action245(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__4,
__temp0,
)
}

#[allow(unused_variables)]
fn __action351<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Identifier, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, UseTree, usize),
__5: (usize, Token<'input>, usize),
__6: (usize, Token<'input>, usize),
) -> UseTree
{
let __start0 = __6.2.clone();
let __end0 = __6.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action264(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__4,
__5,
__6,
__temp0,
)
}

#[allow(unused_variables)]
fn __action352<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Identifier, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, UseTree, usize),
__5: (usize, ::std::vec::Vec<UseTree>, usize),
__6: (usize, Token<'input>, usize),
__7: (usize, Token<'input>, usize),
) -> UseTree
{
let __start0 = __7.2.clone();
let __end0 = __7.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action265(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__4,
__5,
__6,
__7,
__temp0,
)
}

#[allow(unused_variables)]
fn __action353<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Identifier, usize),
__2: (usize, ::std::vec::Vec<Identifier>, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, Token<'input>, usize),
__5: (usize, UseTree, usize),
__6: (usize, Token<'input>, usize),
__7: (usize, Token<'input>, usize),
) -> UseTree
{
let __start0 = __7.2.clone();
let __end0 = __7.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action266(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__4,
__5,
__6,
__7,
__temp0,
)
}

#[allow(unused_variables)]
fn __action354<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Identifier, usize),
__2: (usize, ::std::vec::Vec<Identifier>, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, Token<'input>, usize),
__5: (usize, UseTree, usize),
__6: (usize, ::std::vec::Vec<UseTree>, usize),
__7: (usize, Token<'input>, usize),
__8: (usize, Token<'input>, usize),
) -> UseTree
{
let __start0 = __8.2.clone();
let __end0 = __8.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action267(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__4,
__5,
__6,
__7,
__8,
__temp0,
)
}

#[allow(unused_variables)]
fn __action355<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Identifier, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, UseTree, usize),
__5: (usize, Token<'input>, usize),
) -> UseTree
{
let __start0 = __5.2.clone();
let __end0 = __5.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action268(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__4,
__5,
__temp0,
)
}

#[allow(unused_variables)]
fn __action356<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Identifier, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, UseTree, usize),
__5: (usize, ::std::vec::Vec<UseTree>, usize),
__6: (usize, Token<'input>, usize),
) -> UseTree
{
let __start0 = __6.2.clone();
let __end0 = __6.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action269(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__4,
__5,
__6,
__temp0,
)
}

#[allow(unused_variables)]
fn __action357<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Identifier, usize),
__2: (usize, ::std::vec::Vec<Identifier>, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, Token<'input>, usize),
__5: (usize, UseTree, usize),
__6: (usize, Token<'input>, usize),
) -> UseTree
{
let __start0 = __6.2.clone();
let __end0 = __6.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action270(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__4,
__5,
__6,
__temp0,
)
}

#[allow(unused_variables)]
fn __action358<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, Identifier, usize),
__2: (usize, ::std::vec::Vec<Identifier>, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, Token<'input>, usize),
__5: (usize, UseTree, usize),
__6: (usize, ::std::vec::Vec<UseTree>, usize),
__7: (usize, Token<'input>, usize),
) -> UseTree
{
let __start0 = __7.2.clone();
let __end0 = __7.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action271(
input,
intr,
errs,
__0,
__1,
__2,
__3,
__4,
__5,
__6,
__7,
__temp0,
)
}

#[allow(unused_variables)]
fn __action359<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, usize, usize),
__1: (usize, __lalrpop_util::ErrorRecovery<usize, Token<'input>, ParserError>, usize),
) -> UseTree
{
let __start0 = __1.2.clone();
let __end0 = __1.2.clone();
let __temp0 = __action156(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action16(
input,
intr,
errs,
__0,
__1,
__temp0,
)
}

#[allow(unused_variables)]
fn __action360<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Token<'input>, usize),
) -> (usize, usize)
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action283(
input,
intr,
errs,
__temp0,
__0,
)
}

#[allow(unused_variables)]
fn __action361<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Token<'input>, usize),
) -> (usize, usize)
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action284(
input,
intr,
errs,
__temp0,
__0,
)
}

#[allow(unused_variables)]
fn __action362<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Expr, usize),
) -> (usize, Expr, usize)
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action285(
input,
intr,
errs,
__temp0,
__0,
)
}

#[allow(unused_variables)]
fn __action363<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Expr, usize),
__1: (usize, Spanned<BinOp>, usize),
__2: (usize, Expr, usize),
) -> Expr
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action286(
input,
intr,
errs,
__temp0,
__0,
__1,
__2,
)
}

#[allow(unused_variables)]
fn __action364<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Expr, usize),
__1: (usize, Spanned<BinOp>, usize),
__2: (usize, Expr, usize),
) -> Expr
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action287(
input,
intr,
errs,
__temp0,
__0,
__1,
__2,
)
}

#[allow(unused_variables)]
fn __action365<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Expr, usize),
__1: (usize, Spanned<BinOp>, usize),
__2: (usize, Expr, usize),
) -> Expr
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action288(
input,
intr,
errs,
__temp0,
__0,
__1,
__2,
)
}

#[allow(unused_variables)]
fn __action366<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Expr, usize),
__1: (usize, Spanned<BinOp>, usize),
__2: (usize, Expr, usize),
) -> Expr
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action289(
input,
intr,
errs,
__temp0,
__0,
__1,
__2,
)
}

#[allow(unused_variables)]
fn __action367<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Expr, usize),
__1: (usize, Spanned<BinOp>, usize),
__2: (usize, Expr, usize),
) -> Expr
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action290(
input,
intr,
errs,
__temp0,
__0,
__1,
__2,
)
}

#[allow(unused_variables)]
fn __action368<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Expr, usize),
__1: (usize, Spanned<BinOp>, usize),
__2: (usize, Expr, usize),
) -> Expr
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action291(
input,
intr,
errs,
__temp0,
__0,
__1,
__2,
)
}

#[allow(unused_variables)]
fn __action369<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Token<'input>, usize),
__1: (usize, ::std::vec::Vec<Stmt>, usize),
__2: (usize, ::std::option::Option<(usize, Expr, usize)>, usize),
__3: (usize, Token<'input>, usize),
) -> Block
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action292(
input,
intr,
errs,
__temp0,
__0,
__1,
__2,
__3,
)
}

#[allow(unused_variables)]
fn __action370<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Block, usize),
) -> Expr
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action293(
input,
intr,
errs,
__temp0,
__0,
)
}

#[allow(unused_variables)]
fn __action371<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Visibility, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, Identifier, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, Type, usize),
__5: (usize, Token<'input>, usize),
__6: (usize, Vec<BranchVariant>, usize),
__7: (usize, Token<'input>, usize),
) -> Item
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action294(
input,
intr,
errs,
__temp0,
__0,
__1,
__2,
__3,
__4,
__5,
__6,
__7,
)
}

#[allow(unused_variables)]
fn __action372<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Visibility, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, Identifier, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, Vec<BranchVariant>, usize),
__5: (usize, Token<'input>, usize),
) -> Item
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action295(
input,
intr,
errs,
__temp0,
__0,
__1,
__2,
__3,
__4,
__5,
)
}

#[allow(unused_variables)]
fn __action373<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Identifier, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, Vec<StructField>, usize),
__3: (usize, Token<'input>, usize),
) -> BranchVariant
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action296(
input,
intr,
errs,
__temp0,
__0,
__1,
__2,
__3,
)
}

#[allow(unused_variables)]
fn __action374<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Identifier, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, Vec<Expr>, usize),
__3: (usize, Token<'input>, usize),
) -> Expr
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action297(
input,
intr,
errs,
__temp0,
__0,
__1,
__2,
__3,
)
}

#[allow(unused_variables)]
fn __action375<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Identifier, usize),
__1: (usize, ::std::vec::Vec<Identifier>, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, Vec<Expr>, usize),
__4: (usize, Token<'input>, usize),
) -> Expr
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action298(
input,
intr,
errs,
__temp0,
__0,
__1,
__2,
__3,
__4,
)
}

#[allow(unused_variables)]
fn __action376<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Visibility, usize),
__1: (usize, ::std::option::Option<(usize, usize)>, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, Identifier, usize),
__4: (usize, Token<'input>, usize),
__5: (usize, Type, usize),
__6: (usize, Token<'input>, usize),
__7: (usize, Vec<StructField>, usize),
__8: (usize, Token<'input>, usize),
) -> Item
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action299(
input,
intr,
errs,
__temp0,
__0,
__1,
__2,
__3,
__4,
__5,
__6,
__7,
__8,
)
}

#[allow(unused_variables)]
fn __action377<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Visibility, usize),
__1: (usize, ::std::option::Option<(usize, usize)>, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, Identifier, usize),
__4: (usize, Token<'input>, usize),
__5: (usize, Vec<StructField>, usize),
__6: (usize, Token<'input>, usize),
) -> Item
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action300(
input,
intr,
errs,
__temp0,
__0,
__1,
__2,
__3,
__4,
__5,
__6,
)
}

#[allow(unused_variables)]
fn __action378<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Token<'input>, usize),
__1: (usize, Identifier, usize),
) -> Disambiguator
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action301(
input,
intr,
errs,
__temp0,
__0,
__1,
)
}

#[allow(unused_variables)]
fn __action379<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Token<'input>, usize),
__1: (usize, Identifier, usize),
__2: (usize, ::std::vec::Vec<Identifier>, usize),
) -> Disambiguator
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action302(
input,
intr,
errs,
__temp0,
__0,
__1,
__2,
)
}

#[allow(unused_variables)]
fn __action380<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Lit, usize),
) -> Expr
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action303(
input,
intr,
errs,
__temp0,
__0,
)
}

#[allow(unused_variables)]
fn __action381<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Identifier, usize),
) -> Expr
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action304(
input,
intr,
errs,
__temp0,
__0,
)
}

#[allow(unused_variables)]
fn __action382<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Expr, usize),
__1: (usize, ::std::option::Option<Disambiguator>, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, Identifier, usize),
) -> Expr
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action305(
input,
intr,
errs,
__temp0,
__0,
__1,
__2,
__3,
)
}

#[allow(unused_variables)]
fn __action383<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Token<'input>, usize),
__1: (usize, Vec<Expr>, usize),
__2: (usize, Token<'input>, usize),
) -> Expr
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action306(
input,
intr,
errs,
__temp0,
__0,
__1,
__2,
)
}

#[allow(unused_variables)]
fn __action384<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, __lalrpop_util::ErrorRecovery<usize, Token<'input>, ParserError>, usize),
) -> Expr
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action307(
input,
intr,
errs,
__temp0,
__0,
)
}

#[allow(unused_variables)]
fn __action385<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Expr, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, Expr, usize),
) -> Expr
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __start1 = __0.2.clone();
let __end1 = __1.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
let __temp1 = __action157(
input,
intr,
errs,
&__start1,
&__end1,
);
let __temp1 = (__start1, __temp1, __end1);
__action308(
input,
intr,
errs,
__temp0,
__0,
__temp1,
__1,
__2,
)
}

#[allow(unused_variables)]
fn __action386<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Expr, usize),
__1: (usize, Spanned<BinOp>, usize),
__2: (usize, Expr, usize),
) -> Expr
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action309(
input,
intr,
errs,
__temp0,
__0,
__1,
__2,
)
}

#[allow(unused_variables)]
fn __action387<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Expr, usize),
__1: (usize, Spanned<IsOpKind>, usize),
__2: (usize, Type, usize),
) -> Expr
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action310(
input,
intr,
errs,
__temp0,
__0,
__1,
__2,
)
}

#[allow(unused_variables)]
fn __action388<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Visibility, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, Identifier, usize),
__3: (usize, (Vec<FnParam>, ::std::option::Option<Type>, Option<Block>), usize),
) -> Item
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action311(
input,
intr,
errs,
__temp0,
__0,
__1,
__2,
__3,
)
}

#[allow(unused_variables)]
fn __action389<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, &'input str, usize),
) -> Identifier
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action312(
input,
intr,
errs,
__temp0,
__0,
)
}

#[allow(unused_variables)]
fn __action390<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Token<'input>, usize),
__1: (usize, Expr, usize),
__2: (usize, Block, usize),
) -> Expr
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action313(
input,
intr,
errs,
__temp0,
__0,
__1,
__2,
)
}

#[allow(unused_variables)]
fn __action391<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Token<'input>, usize),
__1: (usize, Expr, usize),
__2: (usize, Block, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, Expr, usize),
) -> Expr
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action314(
input,
intr,
errs,
__temp0,
__0,
__1,
__2,
__3,
__4,
)
}

#[allow(unused_variables)]
fn __action392<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, &'input str, usize),
) -> Lit
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action315(
input,
intr,
errs,
__temp0,
__0,
)
}

#[allow(unused_variables)]
fn __action393<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Token<'input>, usize),
__1: (usize, Block, usize),
) -> Expr
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action316(
input,
intr,
errs,
__temp0,
__0,
__1,
)
}

#[allow(unused_variables)]
fn __action394<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Token<'input>, usize),
__1: (usize, Expr, usize),
__2: (usize, Block, usize),
) -> Expr
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action317(
input,
intr,
errs,
__temp0,
__0,
__1,
__2,
)
}

#[allow(unused_variables)]
fn __action395<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Visibility, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, Identifier, usize),
__3: (usize, Vec<Item>, usize),
) -> Item
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action318(
input,
intr,
errs,
__temp0,
__0,
__1,
__2,
__3,
)
}

#[allow(unused_variables)]
fn __action396<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, IsOpKind, usize),
) -> Spanned<IsOpKind>
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action319(
input,
intr,
errs,
__temp0,
__0,
)
}

#[allow(unused_variables)]
fn __action397<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, UnOpKind, usize),
) -> Spanned<UnOpKind>
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action320(
input,
intr,
errs,
__temp0,
__0,
)
}

#[allow(unused_variables)]
fn __action398<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, BinOp, usize),
) -> Spanned<BinOp>
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action321(
input,
intr,
errs,
__temp0,
__0,
)
}

#[allow(unused_variables)]
fn __action399<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, BinOp, usize),
) -> Spanned<BinOp>
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action322(
input,
intr,
errs,
__temp0,
__0,
)
}

#[allow(unused_variables)]
fn __action400<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, BinOp, usize),
) -> Spanned<BinOp>
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action323(
input,
intr,
errs,
__temp0,
__0,
)
}

#[allow(unused_variables)]
fn __action401<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, BinOp, usize),
) -> Spanned<BinOp>
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action324(
input,
intr,
errs,
__temp0,
__0,
)
}

#[allow(unused_variables)]
fn __action402<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, BinOp, usize),
) -> Spanned<BinOp>
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action325(
input,
intr,
errs,
__temp0,
__0,
)
}

#[allow(unused_variables)]
fn __action403<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, BinOp, usize),
) -> Spanned<BinOp>
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action326(
input,
intr,
errs,
__temp0,
__0,
)
}

#[allow(unused_variables)]
fn __action404<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, BinOp, usize),
) -> Spanned<BinOp>
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action327(
input,
intr,
errs,
__temp0,
__0,
)
}

#[allow(unused_variables)]
fn __action405<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Item, usize),
) -> Stmt
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action328(
input,
intr,
errs,
__temp0,
__0,
)
}

#[allow(unused_variables)]
fn __action406<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Token<'input>, usize),
__1: (usize, Identifier, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, Type, usize),
__4: (usize, Token<'input>, usize),
__5: (usize, Expr, usize),
__6: (usize, Token<'input>, usize),
) -> Stmt
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action329(
input,
intr,
errs,
__temp0,
__0,
__1,
__2,
__3,
__4,
__5,
__6,
)
}

#[allow(unused_variables)]
fn __action407<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Token<'input>, usize),
__1: (usize, Identifier, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, Expr, usize),
__4: (usize, Token<'input>, usize),
) -> Stmt
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action330(
input,
intr,
errs,
__temp0,
__0,
__1,
__2,
__3,
__4,
)
}

#[allow(unused_variables)]
fn __action408<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Token<'input>, usize),
__1: (usize, ::std::option::Option<Expr>, usize),
__2: (usize, Token<'input>, usize),
) -> Stmt
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action331(
input,
intr,
errs,
__temp0,
__0,
__1,
__2,
)
}

#[allow(unused_variables)]
fn __action409<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Token<'input>, usize),
__1: (usize, ::std::option::Option<Expr>, usize),
__2: (usize, Token<'input>, usize),
) -> Stmt
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action332(
input,
intr,
errs,
__temp0,
__0,
__1,
__2,
)
}

#[allow(unused_variables)]
fn __action410<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Token<'input>, usize),
__1: (usize, Token<'input>, usize),
) -> Stmt
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action333(
input,
intr,
errs,
__temp0,
__0,
__1,
)
}

#[allow(unused_variables)]
fn __action411<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Token<'input>, usize),
) -> Stmt
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action334(
input,
intr,
errs,
__temp0,
__0,
)
}

#[allow(unused_variables)]
fn __action412<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Expr, usize),
__1: (usize, Token<'input>, usize),
) -> Stmt
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action335(
input,
intr,
errs,
__temp0,
__0,
__1,
)
}

#[allow(unused_variables)]
fn __action413<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Expr, usize),
__1: (usize, Token<'input>, usize),
) -> Stmt
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action336(
input,
intr,
errs,
__temp0,
__0,
__1,
)
}

#[allow(unused_variables)]
fn __action414<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Expr, usize),
) -> Stmt
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action337(
input,
intr,
errs,
__temp0,
__0,
)
}

#[allow(unused_variables)]
fn __action415<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Visibility, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, Identifier, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, Vec<StructField>, usize),
__5: (usize, Token<'input>, usize),
) -> Item
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action338(
input,
intr,
errs,
__temp0,
__0,
__1,
__2,
__3,
__4,
__5,
)
}

#[allow(unused_variables)]
fn __action416<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Token<'input>, usize),
) -> Type
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action339(
input,
intr,
errs,
__temp0,
__0,
)
}

#[allow(unused_variables)]
fn __action417<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Token<'input>, usize),
__1: (usize, Vec<Type>, usize),
__2: (usize, Token<'input>, usize),
) -> Type
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action340(
input,
intr,
errs,
__temp0,
__0,
__1,
__2,
)
}

#[allow(unused_variables)]
fn __action418<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Vec<Path>, usize),
) -> Type
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action341(
input,
intr,
errs,
__temp0,
__0,
)
}

#[allow(unused_variables)]
fn __action419<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, __lalrpop_util::ErrorRecovery<usize, Token<'input>, ParserError>, usize),
) -> Type
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action342(
input,
intr,
errs,
__temp0,
__0,
)
}

#[allow(unused_variables)]
fn __action420<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Spanned<UnOpKind>, usize),
__1: (usize, Expr, usize),
) -> Expr
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action343(
input,
intr,
errs,
__temp0,
__0,
__1,
)
}

#[allow(unused_variables)]
fn __action421<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Visibility, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, UseTree, usize),
__3: (usize, Token<'input>, usize),
) -> Item
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action344(
input,
intr,
errs,
__temp0,
__0,
__1,
__2,
__3,
)
}

#[allow(unused_variables)]
fn __action422<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Identifier, usize),
) -> UseTree
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action345(
input,
intr,
errs,
__temp0,
__0,
)
}

#[allow(unused_variables)]
fn __action423<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Identifier, usize),
__1: (usize, ::std::vec::Vec<Identifier>, usize),
) -> UseTree
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action346(
input,
intr,
errs,
__temp0,
__0,
__1,
)
}

#[allow(unused_variables)]
fn __action424<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Identifier, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, Identifier, usize),
) -> UseTree
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action347(
input,
intr,
errs,
__temp0,
__0,
__1,
__2,
)
}

#[allow(unused_variables)]
fn __action425<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Identifier, usize),
__1: (usize, ::std::vec::Vec<Identifier>, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, Identifier, usize),
) -> UseTree
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action348(
input,
intr,
errs,
__temp0,
__0,
__1,
__2,
__3,
)
}

#[allow(unused_variables)]
fn __action426<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Identifier, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, Token<'input>, usize),
) -> UseTree
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action349(
input,
intr,
errs,
__temp0,
__0,
__1,
__2,
)
}

#[allow(unused_variables)]
fn __action427<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Identifier, usize),
__1: (usize, ::std::vec::Vec<Identifier>, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, Token<'input>, usize),
) -> UseTree
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action350(
input,
intr,
errs,
__temp0,
__0,
__1,
__2,
__3,
)
}

#[allow(unused_variables)]
fn __action428<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Identifier, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, UseTree, usize),
__4: (usize, Token<'input>, usize),
__5: (usize, Token<'input>, usize),
) -> UseTree
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action351(
input,
intr,
errs,
__temp0,
__0,
__1,
__2,
__3,
__4,
__5,
)
}

#[allow(unused_variables)]
fn __action429<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Identifier, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, UseTree, usize),
__4: (usize, ::std::vec::Vec<UseTree>, usize),
__5: (usize, Token<'input>, usize),
__6: (usize, Token<'input>, usize),
) -> UseTree
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action352(
input,
intr,
errs,
__temp0,
__0,
__1,
__2,
__3,
__4,
__5,
__6,
)
}

#[allow(unused_variables)]
fn __action430<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Identifier, usize),
__1: (usize, ::std::vec::Vec<Identifier>, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, UseTree, usize),
__5: (usize, Token<'input>, usize),
__6: (usize, Token<'input>, usize),
) -> UseTree
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action353(
input,
intr,
errs,
__temp0,
__0,
__1,
__2,
__3,
__4,
__5,
__6,
)
}

#[allow(unused_variables)]
fn __action431<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Identifier, usize),
__1: (usize, ::std::vec::Vec<Identifier>, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, UseTree, usize),
__5: (usize, ::std::vec::Vec<UseTree>, usize),
__6: (usize, Token<'input>, usize),
__7: (usize, Token<'input>, usize),
) -> UseTree
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action354(
input,
intr,
errs,
__temp0,
__0,
__1,
__2,
__3,
__4,
__5,
__6,
__7,
)
}

#[allow(unused_variables)]
fn __action432<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Identifier, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, UseTree, usize),
__4: (usize, Token<'input>, usize),
) -> UseTree
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action355(
input,
intr,
errs,
__temp0,
__0,
__1,
__2,
__3,
__4,
)
}

#[allow(unused_variables)]
fn __action433<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Identifier, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, UseTree, usize),
__4: (usize, ::std::vec::Vec<UseTree>, usize),
__5: (usize, Token<'input>, usize),
) -> UseTree
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action356(
input,
intr,
errs,
__temp0,
__0,
__1,
__2,
__3,
__4,
__5,
)
}

#[allow(unused_variables)]
fn __action434<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Identifier, usize),
__1: (usize, ::std::vec::Vec<Identifier>, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, UseTree, usize),
__5: (usize, Token<'input>, usize),
) -> UseTree
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action357(
input,
intr,
errs,
__temp0,
__0,
__1,
__2,
__3,
__4,
__5,
)
}

#[allow(unused_variables)]
fn __action435<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Identifier, usize),
__1: (usize, ::std::vec::Vec<Identifier>, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, UseTree, usize),
__5: (usize, ::std::vec::Vec<UseTree>, usize),
__6: (usize, Token<'input>, usize),
) -> UseTree
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action358(
input,
intr,
errs,
__temp0,
__0,
__1,
__2,
__3,
__4,
__5,
__6,
)
}

#[allow(unused_variables)]
fn __action436<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, __lalrpop_util::ErrorRecovery<usize, Token<'input>, ParserError>, usize),
) -> UseTree
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action157(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action359(
input,
intr,
errs,
__temp0,
__0,
)
}

#[allow(unused_variables)]
fn __action437<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Token<'input>, usize),
) -> ::std::option::Option<(usize, usize)>
{
let __start0 = __0.0.clone();
let __end0 = __0.2.clone();
let __temp0 = __action360(
input,
intr,
errs,
__0,
);
let __temp0 = (__start0, __temp0, __end0);
__action141(
input,
intr,
errs,
__temp0,
)
}

#[allow(unused_variables)]
fn __action438<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Visibility, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, Identifier, usize),
__4: (usize, Token<'input>, usize),
__5: (usize, Type, usize),
__6: (usize, Token<'input>, usize),
__7: (usize, Vec<StructField>, usize),
__8: (usize, Token<'input>, usize),
) -> Item
{
let __start0 = __1.0.clone();
let __end0 = __1.2.clone();
let __temp0 = __action437(
input,
intr,
errs,
__1,
);
let __temp0 = (__start0, __temp0, __end0);
__action376(
input,
intr,
errs,
__0,
__temp0,
__2,
__3,
__4,
__5,
__6,
__7,
__8,
)
}

#[allow(unused_variables)]
fn __action439<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Visibility, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, Identifier, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, Type, usize),
__5: (usize, Token<'input>, usize),
__6: (usize, Vec<StructField>, usize),
__7: (usize, Token<'input>, usize),
) -> Item
{
let __start0 = __0.2.clone();
let __end0 = __1.0.clone();
let __temp0 = __action142(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action376(
input,
intr,
errs,
__0,
__temp0,
__1,
__2,
__3,
__4,
__5,
__6,
__7,
)
}

#[allow(unused_variables)]
fn __action440<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Visibility, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, Identifier, usize),
__4: (usize, Token<'input>, usize),
__5: (usize, Vec<StructField>, usize),
__6: (usize, Token<'input>, usize),
) -> Item
{
let __start0 = __1.0.clone();
let __end0 = __1.2.clone();
let __temp0 = __action437(
input,
intr,
errs,
__1,
);
let __temp0 = (__start0, __temp0, __end0);
__action377(
input,
intr,
errs,
__0,
__temp0,
__2,
__3,
__4,
__5,
__6,
)
}

#[allow(unused_variables)]
fn __action441<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Visibility, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, Identifier, usize),
__3: (usize, Token<'input>, usize),
__4: (usize, Vec<StructField>, usize),
__5: (usize, Token<'input>, usize),
) -> Item
{
let __start0 = __0.2.clone();
let __end0 = __1.0.clone();
let __temp0 = __action142(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action377(
input,
intr,
errs,
__0,
__temp0,
__1,
__2,
__3,
__4,
__5,
)
}

#[allow(unused_variables)]
fn __action442<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Token<'input>, usize),
) -> ::std::option::Option<(usize, usize)>
{
let __start0 = __0.0.clone();
let __end0 = __0.2.clone();
let __temp0 = __action361(
input,
intr,
errs,
__0,
);
let __temp0 = (__start0, __temp0, __end0);
__action153(
input,
intr,
errs,
__temp0,
)
}

#[allow(unused_variables)]
fn __action443<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Token<'input>, usize),
) -> Visibility
{
let __start0 = __0.0.clone();
let __end0 = __0.2.clone();
let __temp0 = __action442(
input,
intr,
errs,
__0,
);
let __temp0 = (__start0, __temp0, __end0);
__action2(
input,
intr,
errs,
__temp0,
)
}

#[allow(unused_variables)]
fn __action444<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookbehind: &usize,
__lookahead: &usize,
) -> Visibility
{
let __start0 = __lookbehind.clone();
let __end0 = __lookahead.clone();
let __temp0 = __action154(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action2(
input,
intr,
errs,
__temp0,
)
}

#[allow(unused_variables)]
fn __action445<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Expr, usize),
) -> ::std::option::Option<(usize, Expr, usize)>
{
let __start0 = __0.0.clone();
let __end0 = __0.2.clone();
let __temp0 = __action362(
input,
intr,
errs,
__0,
);
let __temp0 = (__start0, __temp0, __end0);
__action131(
input,
intr,
errs,
__temp0,
)
}

#[allow(unused_variables)]
fn __action446<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Token<'input>, usize),
__1: (usize, ::std::vec::Vec<Stmt>, usize),
__2: (usize, Expr, usize),
__3: (usize, Token<'input>, usize),
) -> Block
{
let __start0 = __2.0.clone();
let __end0 = __2.2.clone();
let __temp0 = __action445(
input,
intr,
errs,
__2,
);
let __temp0 = (__start0, __temp0, __end0);
__action369(
input,
intr,
errs,
__0,
__1,
__temp0,
__3,
)
}

#[allow(unused_variables)]
fn __action447<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Token<'input>, usize),
__1: (usize, ::std::vec::Vec<Stmt>, usize),
__2: (usize, Token<'input>, usize),
) -> Block
{
let __start0 = __1.2.clone();
let __end0 = __2.0.clone();
let __temp0 = __action132(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action369(
input,
intr,
errs,
__0,
__1,
__temp0,
__2,
)
}

#[allow(unused_variables)]
fn __action448<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, BranchVariant, usize),
__1: (usize, Token<'input>, usize),
) -> ::std::vec::Vec<BranchVariant>
{
let __start0 = __0.0.clone();
let __end0 = __1.2.clone();
let __temp0 = __action208(
input,
intr,
errs,
__0,
__1,
);
let __temp0 = (__start0, __temp0, __end0);
__action216(
input,
intr,
errs,
__temp0,
)
}

#[allow(unused_variables)]
fn __action449<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, ::std::vec::Vec<BranchVariant>, usize),
__1: (usize, BranchVariant, usize),
__2: (usize, Token<'input>, usize),
) -> ::std::vec::Vec<BranchVariant>
{
let __start0 = __1.0.clone();
let __end0 = __2.2.clone();
let __temp0 = __action208(
input,
intr,
errs,
__1,
__2,
);
let __temp0 = (__start0, __temp0, __end0);
__action217(
input,
intr,
errs,
__0,
__temp0,
)
}

#[allow(unused_variables)]
fn __action450<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, ::std::option::Option<BranchVariant>, usize),
) -> Vec<BranchVariant>
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action206(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action167(
input,
intr,
errs,
__temp0,
__0,
)
}

#[allow(unused_variables)]
fn __action451<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, ::std::vec::Vec<BranchVariant>, usize),
__1: (usize, ::std::option::Option<BranchVariant>, usize),
) -> Vec<BranchVariant>
{
let __start0 = __0.0.clone();
let __end0 = __0.2.clone();
let __temp0 = __action207(
input,
intr,
errs,
__0,
);
let __temp0 = (__start0, __temp0, __end0);
__action167(
input,
intr,
errs,
__temp0,
__1,
)
}

#[allow(unused_variables)]
fn __action452<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Expr, usize),
__1: (usize, Token<'input>, usize),
) -> ::std::vec::Vec<Expr>
{
let __start0 = __0.0.clone();
let __end0 = __1.2.clone();
let __temp0 = __action198(
input,
intr,
errs,
__0,
__1,
);
let __temp0 = (__start0, __temp0, __end0);
__action220(
input,
intr,
errs,
__temp0,
)
}

#[allow(unused_variables)]
fn __action453<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, ::std::vec::Vec<Expr>, usize),
__1: (usize, Expr, usize),
__2: (usize, Token<'input>, usize),
) -> ::std::vec::Vec<Expr>
{
let __start0 = __1.0.clone();
let __end0 = __2.2.clone();
let __temp0 = __action198(
input,
intr,
errs,
__1,
__2,
);
let __temp0 = (__start0, __temp0, __end0);
__action221(
input,
intr,
errs,
__0,
__temp0,
)
}

#[allow(unused_variables)]
fn __action454<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, ::std::option::Option<Expr>, usize),
) -> Vec<Expr>
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action196(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action178(
input,
intr,
errs,
__temp0,
__0,
)
}

#[allow(unused_variables)]
fn __action455<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, ::std::vec::Vec<Expr>, usize),
__1: (usize, ::std::option::Option<Expr>, usize),
) -> Vec<Expr>
{
let __start0 = __0.0.clone();
let __end0 = __0.2.clone();
let __temp0 = __action197(
input,
intr,
errs,
__0,
);
let __temp0 = (__start0, __temp0, __end0);
__action178(
input,
intr,
errs,
__temp0,
__1,
)
}

#[allow(unused_variables)]
fn __action456<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, FnParam, usize),
__1: (usize, Token<'input>, usize),
) -> ::std::vec::Vec<FnParam>
{
let __start0 = __0.0.clone();
let __end0 = __1.2.clone();
let __temp0 = __action203(
input,
intr,
errs,
__0,
__1,
);
let __temp0 = (__start0, __temp0, __end0);
__action218(
input,
intr,
errs,
__temp0,
)
}

#[allow(unused_variables)]
fn __action457<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, ::std::vec::Vec<FnParam>, usize),
__1: (usize, FnParam, usize),
__2: (usize, Token<'input>, usize),
) -> ::std::vec::Vec<FnParam>
{
let __start0 = __1.0.clone();
let __end0 = __2.2.clone();
let __temp0 = __action203(
input,
intr,
errs,
__1,
__2,
);
let __temp0 = (__start0, __temp0, __end0);
__action219(
input,
intr,
errs,
__0,
__temp0,
)
}

#[allow(unused_variables)]
fn __action458<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, ::std::option::Option<FnParam>, usize),
) -> Vec<FnParam>
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action201(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action168(
input,
intr,
errs,
__temp0,
__0,
)
}

#[allow(unused_variables)]
fn __action459<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, ::std::vec::Vec<FnParam>, usize),
__1: (usize, ::std::option::Option<FnParam>, usize),
) -> Vec<FnParam>
{
let __start0 = __0.0.clone();
let __end0 = __0.2.clone();
let __temp0 = __action202(
input,
intr,
errs,
__0,
);
let __temp0 = (__start0, __temp0, __end0);
__action168(
input,
intr,
errs,
__temp0,
__1,
)
}

#[allow(unused_variables)]
fn __action460<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, StructField, usize),
__1: (usize, Token<'input>, usize),
) -> ::std::vec::Vec<StructField>
{
let __start0 = __0.0.clone();
let __end0 = __1.2.clone();
let __temp0 = __action213(
input,
intr,
errs,
__0,
__1,
);
let __temp0 = (__start0, __temp0, __end0);
__action214(
input,
intr,
errs,
__temp0,
)
}

#[allow(unused_variables)]
fn __action461<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, ::std::vec::Vec<StructField>, usize),
__1: (usize, StructField, usize),
__2: (usize, Token<'input>, usize),
) -> ::std::vec::Vec<StructField>
{
let __start0 = __1.0.clone();
let __end0 = __2.2.clone();
let __temp0 = __action213(
input,
intr,
errs,
__1,
__2,
);
let __temp0 = (__start0, __temp0, __end0);
__action215(
input,
intr,
errs,
__0,
__temp0,
)
}

#[allow(unused_variables)]
fn __action462<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, ::std::option::Option<StructField>, usize),
) -> Vec<StructField>
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action211(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action166(
input,
intr,
errs,
__temp0,
__0,
)
}

#[allow(unused_variables)]
fn __action463<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, ::std::vec::Vec<StructField>, usize),
__1: (usize, ::std::option::Option<StructField>, usize),
) -> Vec<StructField>
{
let __start0 = __0.0.clone();
let __end0 = __0.2.clone();
let __temp0 = __action212(
input,
intr,
errs,
__0,
);
let __temp0 = (__start0, __temp0, __end0);
__action166(
input,
intr,
errs,
__temp0,
__1,
)
}

#[allow(unused_variables)]
fn __action464<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Type, usize),
__1: (usize, Token<'input>, usize),
) -> ::std::vec::Vec<Type>
{
let __start0 = __0.0.clone();
let __end0 = __1.2.clone();
let __temp0 = __action186(
input,
intr,
errs,
__0,
__1,
);
let __temp0 = (__start0, __temp0, __end0);
__action192(
input,
intr,
errs,
__temp0,
)
}

#[allow(unused_variables)]
fn __action465<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, ::std::vec::Vec<Type>, usize),
__1: (usize, Type, usize),
__2: (usize, Token<'input>, usize),
) -> ::std::vec::Vec<Type>
{
let __start0 = __1.0.clone();
let __end0 = __2.2.clone();
let __temp0 = __action186(
input,
intr,
errs,
__1,
__2,
);
let __temp0 = (__start0, __temp0, __end0);
__action193(
input,
intr,
errs,
__0,
__temp0,
)
}

#[allow(unused_variables)]
fn __action466<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, ::std::option::Option<Type>, usize),
) -> Vec<Type>
{
let __start0 = __0.0.clone();
let __end0 = __0.0.clone();
let __temp0 = __action184(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action104(
input,
intr,
errs,
__temp0,
__0,
)
}

#[allow(unused_variables)]
fn __action467<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, ::std::vec::Vec<Type>, usize),
__1: (usize, ::std::option::Option<Type>, usize),
) -> Vec<Type>
{
let __start0 = __0.0.clone();
let __end0 = __0.2.clone();
let __temp0 = __action185(
input,
intr,
errs,
__0,
);
let __temp0 = (__start0, __temp0, __end0);
__action104(
input,
intr,
errs,
__temp0,
__1,
)
}

#[allow(unused_variables)]
fn __action468<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, BranchVariant, usize),
) -> Vec<BranchVariant>
{
let __start0 = __0.0.clone();
let __end0 = __0.2.clone();
let __temp0 = __action204(
input,
intr,
errs,
__0,
);
let __temp0 = (__start0, __temp0, __end0);
__action450(
input,
intr,
errs,
__temp0,
)
}

#[allow(unused_variables)]
fn __action469<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookbehind: &usize,
__lookahead: &usize,
) -> Vec<BranchVariant>
{
let __start0 = __lookbehind.clone();
let __end0 = __lookahead.clone();
let __temp0 = __action205(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action450(
input,
intr,
errs,
__temp0,
)
}

#[allow(unused_variables)]
fn __action470<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, ::std::vec::Vec<BranchVariant>, usize),
__1: (usize, BranchVariant, usize),
) -> Vec<BranchVariant>
{
let __start0 = __1.0.clone();
let __end0 = __1.2.clone();
let __temp0 = __action204(
input,
intr,
errs,
__1,
);
let __temp0 = (__start0, __temp0, __end0);
__action451(
input,
intr,
errs,
__0,
__temp0,
)
}

#[allow(unused_variables)]
fn __action471<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, ::std::vec::Vec<BranchVariant>, usize),
) -> Vec<BranchVariant>
{
let __start0 = __0.2.clone();
let __end0 = __0.2.clone();
let __temp0 = __action205(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action451(
input,
intr,
errs,
__0,
__temp0,
)
}

#[allow(unused_variables)]
fn __action472<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Expr, usize),
__1: (usize, Disambiguator, usize),
__2: (usize, Token<'input>, usize),
__3: (usize, Identifier, usize),
) -> Expr
{
let __start0 = __1.0.clone();
let __end0 = __1.2.clone();
let __temp0 = __action106(
input,
intr,
errs,
__1,
);
let __temp0 = (__start0, __temp0, __end0);
__action382(
input,
intr,
errs,
__0,
__temp0,
__2,
__3,
)
}

#[allow(unused_variables)]
fn __action473<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Expr, usize),
__1: (usize, Token<'input>, usize),
__2: (usize, Identifier, usize),
) -> Expr
{
let __start0 = __0.2.clone();
let __end0 = __1.0.clone();
let __temp0 = __action107(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action382(
input,
intr,
errs,
__0,
__temp0,
__1,
__2,
)
}

#[allow(unused_variables)]
fn __action474<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Expr, usize),
) -> Vec<Expr>
{
let __start0 = __0.0.clone();
let __end0 = __0.2.clone();
let __temp0 = __action127(
input,
intr,
errs,
__0,
);
let __temp0 = (__start0, __temp0, __end0);
__action454(
input,
intr,
errs,
__temp0,
)
}

#[allow(unused_variables)]
fn __action475<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookbehind: &usize,
__lookahead: &usize,
) -> Vec<Expr>
{
let __start0 = __lookbehind.clone();
let __end0 = __lookahead.clone();
let __temp0 = __action128(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action454(
input,
intr,
errs,
__temp0,
)
}

#[allow(unused_variables)]
fn __action476<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, ::std::vec::Vec<Expr>, usize),
__1: (usize, Expr, usize),
) -> Vec<Expr>
{
let __start0 = __1.0.clone();
let __end0 = __1.2.clone();
let __temp0 = __action127(
input,
intr,
errs,
__1,
);
let __temp0 = (__start0, __temp0, __end0);
__action455(
input,
intr,
errs,
__0,
__temp0,
)
}

#[allow(unused_variables)]
fn __action477<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, ::std::vec::Vec<Expr>, usize),
) -> Vec<Expr>
{
let __start0 = __0.2.clone();
let __end0 = __0.2.clone();
let __temp0 = __action128(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action455(
input,
intr,
errs,
__0,
__temp0,
)
}

#[allow(unused_variables)]
fn __action478<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Token<'input>, usize),
__1: (usize, Expr, usize),
__2: (usize, Token<'input>, usize),
) -> Stmt
{
let __start0 = __1.0.clone();
let __end0 = __1.2.clone();
let __temp0 = __action127(
input,
intr,
errs,
__1,
);
let __temp0 = (__start0, __temp0, __end0);
__action408(
input,
intr,
errs,
__0,
__temp0,
__2,
)
}

#[allow(unused_variables)]
fn __action479<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Token<'input>, usize),
__1: (usize, Token<'input>, usize),
) -> Stmt
{
let __start0 = __0.2.clone();
let __end0 = __1.0.clone();
let __temp0 = __action128(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action408(
input,
intr,
errs,
__0,
__temp0,
__1,
)
}

#[allow(unused_variables)]
fn __action480<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Token<'input>, usize),
__1: (usize, Expr, usize),
__2: (usize, Token<'input>, usize),
) -> Stmt
{
let __start0 = __1.0.clone();
let __end0 = __1.2.clone();
let __temp0 = __action127(
input,
intr,
errs,
__1,
);
let __temp0 = (__start0, __temp0, __end0);
__action409(
input,
intr,
errs,
__0,
__temp0,
__2,
)
}

#[allow(unused_variables)]
fn __action481<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Token<'input>, usize),
__1: (usize, Token<'input>, usize),
) -> Stmt
{
let __start0 = __0.2.clone();
let __end0 = __1.0.clone();
let __temp0 = __action128(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action409(
input,
intr,
errs,
__0,
__temp0,
__1,
)
}

#[allow(unused_variables)]
fn __action482<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, FnParam, usize),
) -> Vec<FnParam>
{
let __start0 = __0.0.clone();
let __end0 = __0.2.clone();
let __temp0 = __action199(
input,
intr,
errs,
__0,
);
let __temp0 = (__start0, __temp0, __end0);
__action458(
input,
intr,
errs,
__temp0,
)
}

#[allow(unused_variables)]
fn __action483<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookbehind: &usize,
__lookahead: &usize,
) -> Vec<FnParam>
{
let __start0 = __lookbehind.clone();
let __end0 = __lookahead.clone();
let __temp0 = __action200(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action458(
input,
intr,
errs,
__temp0,
)
}

#[allow(unused_variables)]
fn __action484<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, ::std::vec::Vec<FnParam>, usize),
__1: (usize, FnParam, usize),
) -> Vec<FnParam>
{
let __start0 = __1.0.clone();
let __end0 = __1.2.clone();
let __temp0 = __action199(
input,
intr,
errs,
__1,
);
let __temp0 = (__start0, __temp0, __end0);
__action459(
input,
intr,
errs,
__0,
__temp0,
)
}

#[allow(unused_variables)]
fn __action485<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, ::std::vec::Vec<FnParam>, usize),
) -> Vec<FnParam>
{
let __start0 = __0.2.clone();
let __end0 = __0.2.clone();
let __temp0 = __action200(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action459(
input,
intr,
errs,
__0,
__temp0,
)
}

#[allow(unused_variables)]
fn __action486<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Token<'input>, usize),
__1: (usize, Token<'input>, usize),
) -> Vec<Item>
{
let __start0 = __0.2.clone();
let __end0 = __1.0.clone();
let __temp0 = __action158(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action17(
input,
intr,
errs,
__0,
__temp0,
__1,
)
}

#[allow(unused_variables)]
fn __action487<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Token<'input>, usize),
__1: (usize, ::std::vec::Vec<Item>, usize),
__2: (usize, Token<'input>, usize),
) -> Vec<Item>
{
let __start0 = __1.0.clone();
let __end0 = __1.2.clone();
let __temp0 = __action159(
input,
intr,
errs,
__1,
);
let __temp0 = (__start0, __temp0, __end0);
__action17(
input,
intr,
errs,
__0,
__temp0,
__2,
)
}

#[allow(unused_variables)]
fn __action488<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookbehind: &usize,
__lookahead: &usize,
) -> Program
{
let __start0 = __lookbehind.clone();
let __end0 = __lookahead.clone();
let __temp0 = __action158(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action1(
input,
intr,
errs,
__temp0,
)
}

#[allow(unused_variables)]
fn __action489<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, ::std::vec::Vec<Item>, usize),
) -> Program
{
let __start0 = __0.0.clone();
let __end0 = __0.2.clone();
let __temp0 = __action159(
input,
intr,
errs,
__0,
);
let __temp0 = (__start0, __temp0, __end0);
__action1(
input,
intr,
errs,
__temp0,
)
}

#[allow(unused_variables)]
fn __action490<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Token<'input>, usize),
__1: (usize, Expr, usize),
__2: (usize, Token<'input>, usize),
) -> Block
{
let __start0 = __0.2.clone();
let __end0 = __1.0.clone();
let __temp0 = __action134(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action446(
input,
intr,
errs,
__0,
__temp0,
__1,
__2,
)
}

#[allow(unused_variables)]
fn __action491<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Token<'input>, usize),
__1: (usize, ::std::vec::Vec<Stmt>, usize),
__2: (usize, Expr, usize),
__3: (usize, Token<'input>, usize),
) -> Block
{
let __start0 = __1.0.clone();
let __end0 = __1.2.clone();
let __temp0 = __action135(
input,
intr,
errs,
__1,
);
let __temp0 = (__start0, __temp0, __end0);
__action446(
input,
intr,
errs,
__0,
__temp0,
__2,
__3,
)
}

#[allow(unused_variables)]
fn __action492<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Token<'input>, usize),
__1: (usize, Token<'input>, usize),
) -> Block
{
let __start0 = __0.2.clone();
let __end0 = __1.0.clone();
let __temp0 = __action134(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action447(
input,
intr,
errs,
__0,
__temp0,
__1,
)
}

#[allow(unused_variables)]
fn __action493<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Token<'input>, usize),
__1: (usize, ::std::vec::Vec<Stmt>, usize),
__2: (usize, Token<'input>, usize),
) -> Block
{
let __start0 = __1.0.clone();
let __end0 = __1.2.clone();
let __temp0 = __action135(
input,
intr,
errs,
__1,
);
let __temp0 = (__start0, __temp0, __end0);
__action447(
input,
intr,
errs,
__0,
__temp0,
__2,
)
}

#[allow(unused_variables)]
fn __action494<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, StructField, usize),
) -> Vec<StructField>
{
let __start0 = __0.0.clone();
let __end0 = __0.2.clone();
let __temp0 = __action209(
input,
intr,
errs,
__0,
);
let __temp0 = (__start0, __temp0, __end0);
__action462(
input,
intr,
errs,
__temp0,
)
}

#[allow(unused_variables)]
fn __action495<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookbehind: &usize,
__lookahead: &usize,
) -> Vec<StructField>
{
let __start0 = __lookbehind.clone();
let __end0 = __lookahead.clone();
let __temp0 = __action210(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action462(
input,
intr,
errs,
__temp0,
)
}

#[allow(unused_variables)]
fn __action496<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, ::std::vec::Vec<StructField>, usize),
__1: (usize, StructField, usize),
) -> Vec<StructField>
{
let __start0 = __1.0.clone();
let __end0 = __1.2.clone();
let __temp0 = __action209(
input,
intr,
errs,
__1,
);
let __temp0 = (__start0, __temp0, __end0);
__action463(
input,
intr,
errs,
__0,
__temp0,
)
}

#[allow(unused_variables)]
fn __action497<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, ::std::vec::Vec<StructField>, usize),
) -> Vec<StructField>
{
let __start0 = __0.2.clone();
let __end0 = __0.2.clone();
let __temp0 = __action210(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action463(
input,
intr,
errs,
__0,
__temp0,
)
}

#[allow(unused_variables)]
fn __action498<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, Type, usize),
) -> Vec<Type>
{
let __start0 = __0.0.clone();
let __end0 = __0.2.clone();
let __temp0 = __action182(
input,
intr,
errs,
__0,
);
let __temp0 = (__start0, __temp0, __end0);
__action466(
input,
intr,
errs,
__temp0,
)
}

#[allow(unused_variables)]
fn __action499<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__lookbehind: &usize,
__lookahead: &usize,
) -> Vec<Type>
{
let __start0 = __lookbehind.clone();
let __end0 = __lookahead.clone();
let __temp0 = __action183(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action466(
input,
intr,
errs,
__temp0,
)
}

#[allow(unused_variables)]
fn __action500<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, ::std::vec::Vec<Type>, usize),
__1: (usize, Type, usize),
) -> Vec<Type>
{
let __start0 = __1.0.clone();
let __end0 = __1.2.clone();
let __temp0 = __action182(
input,
intr,
errs,
__1,
);
let __temp0 = (__start0, __temp0, __end0);
__action467(
input,
intr,
errs,
__0,
__temp0,
)
}

#[allow(unused_variables)]
fn __action501<
    'input,
>(
input: &'input str,
intr: &Interner,
errs: &mut Vec<String>,
__0: (usize, ::std::vec::Vec<Type>, usize),
) -> Vec<Type>
{
let __start0 = __0.2.clone();
let __end0 = __0.2.clone();
let __temp0 = __action183(
input,
intr,
errs,
&__start0,
&__end0,
);
let __temp0 = (__start0, __temp0, __end0);
__action467(
input,
intr,
errs,
__0,
__temp0,
)
}

pub trait __ToTriple<'input, > {
fn to_triple(value: Self) -> Result<(usize,Token<'input>,usize), __lalrpop_util::ParseError<usize, Token<'input>, ParserError>>;
}

impl<'input, > __ToTriple<'input, > for (usize, Token<'input>, usize) {
fn to_triple(value: Self) -> Result<(usize,Token<'input>,usize), __lalrpop_util::ParseError<usize, Token<'input>, ParserError>> {
Ok(value)
}
}
impl<'input, > __ToTriple<'input, > for Result<(usize, Token<'input>, usize), ParserError> {
fn to_triple(value: Self) -> Result<(usize,Token<'input>,usize), __lalrpop_util::ParseError<usize, Token<'input>, ParserError>> {
match value {
Ok(v) => Ok(v),
Err(error) => Err(__lalrpop_util::ParseError::User { error }),
}
}
}
